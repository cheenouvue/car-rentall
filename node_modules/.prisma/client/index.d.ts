
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Employees
 * 
 */
export type Employees = $Result.DefaultSelection<Prisma.$EmployeesPayload>
/**
 * Model Departments
 * 
 */
export type Departments = $Result.DefaultSelection<Prisma.$DepartmentsPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Promotions
 * 
 */
export type Promotions = $Result.DefaultSelection<Prisma.$PromotionsPayload>
/**
 * Model Coupons
 * 
 */
export type Coupons = $Result.DefaultSelection<Prisma.$CouponsPayload>
/**
 * Model CarType
 * 
 */
export type CarType = $Result.DefaultSelection<Prisma.$CarTypePayload>
/**
 * Model Insurance
 * 
 */
export type Insurance = $Result.DefaultSelection<Prisma.$InsurancePayload>
/**
 * Model Bank
 * 
 */
export type Bank = $Result.DefaultSelection<Prisma.$BankPayload>
/**
 * Model Car
 * 
 */
export type Car = $Result.DefaultSelection<Prisma.$CarPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model payment
 * 
 */
export type payment = $Result.DefaultSelection<Prisma.$paymentPayload>
/**
 * Model Repair
 * 
 */
export type Repair = $Result.DefaultSelection<Prisma.$RepairPayload>
/**
 * Model Rental
 * 
 */
export type Rental = $Result.DefaultSelection<Prisma.$RentalPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  admin: 'admin',
  superAdmin: 'superAdmin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Statu_Promotion: {
  active: 'active',
  inactive: 'inactive',
  expired: 'expired'
};

export type Statu_Promotion = (typeof Statu_Promotion)[keyof typeof Statu_Promotion]


export const Discount_Type: {
  percent: 'percent',
  currency: 'currency'
};

export type Discount_Type = (typeof Discount_Type)[keyof typeof Discount_Type]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Statu_Promotion = $Enums.Statu_Promotion

export const Statu_Promotion: typeof $Enums.Statu_Promotion

export type Discount_Type = $Enums.Discount_Type

export const Discount_Type: typeof $Enums.Discount_Type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employees`: Exposes CRUD operations for the **Employees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employees.findMany()
    * ```
    */
  get employees(): Prisma.EmployeesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departments`: Exposes CRUD operations for the **Departments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.departments.findMany()
    * ```
    */
  get departments(): Prisma.DepartmentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promotions`: Exposes CRUD operations for the **Promotions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotions
    * const promotions = await prisma.promotions.findMany()
    * ```
    */
  get promotions(): Prisma.PromotionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coupons`: Exposes CRUD operations for the **Coupons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coupons
    * const coupons = await prisma.coupons.findMany()
    * ```
    */
  get coupons(): Prisma.CouponsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.carType`: Exposes CRUD operations for the **CarType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CarTypes
    * const carTypes = await prisma.carType.findMany()
    * ```
    */
  get carType(): Prisma.CarTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insurance`: Exposes CRUD operations for the **Insurance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Insurances
    * const insurances = await prisma.insurance.findMany()
    * ```
    */
  get insurance(): Prisma.InsuranceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bank`: Exposes CRUD operations for the **Bank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banks
    * const banks = await prisma.bank.findMany()
    * ```
    */
  get bank(): Prisma.BankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.car`: Exposes CRUD operations for the **Car** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.car.findMany()
    * ```
    */
  get car(): Prisma.CarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.repair`: Exposes CRUD operations for the **Repair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repairs
    * const repairs = await prisma.repair.findMany()
    * ```
    */
  get repair(): Prisma.RepairDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rental`: Exposes CRUD operations for the **Rental** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rentals
    * const rentals = await prisma.rental.findMany()
    * ```
    */
  get rental(): Prisma.RentalDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Employees: 'Employees',
    Departments: 'Departments',
    Status: 'Status',
    Promotions: 'Promotions',
    Coupons: 'Coupons',
    CarType: 'CarType',
    Insurance: 'Insurance',
    Bank: 'Bank',
    Car: 'Car',
    Review: 'Review',
    payment: 'payment',
    Repair: 'Repair',
    Rental: 'Rental'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "employees" | "departments" | "status" | "promotions" | "coupons" | "carType" | "insurance" | "bank" | "car" | "review" | "payment" | "repair" | "rental"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Employees: {
        payload: Prisma.$EmployeesPayload<ExtArgs>
        fields: Prisma.EmployeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          findFirst: {
            args: Prisma.EmployeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          findMany: {
            args: Prisma.EmployeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>[]
          }
          create: {
            args: Prisma.EmployeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          createMany: {
            args: Prisma.EmployeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          update: {
            args: Prisma.EmployeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          deleteMany: {
            args: Prisma.EmployeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeesPayload>
          }
          aggregate: {
            args: Prisma.EmployeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployees>
          }
          groupBy: {
            args: Prisma.EmployeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeesCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeesCountAggregateOutputType> | number
          }
        }
      }
      Departments: {
        payload: Prisma.$DepartmentsPayload<ExtArgs>
        fields: Prisma.DepartmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          findFirst: {
            args: Prisma.DepartmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          findMany: {
            args: Prisma.DepartmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>[]
          }
          create: {
            args: Prisma.DepartmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          createMany: {
            args: Prisma.DepartmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DepartmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          update: {
            args: Prisma.DepartmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentsPayload>
          }
          aggregate: {
            args: Prisma.DepartmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartments>
          }
          groupBy: {
            args: Prisma.DepartmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentsCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentsCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Promotions: {
        payload: Prisma.$PromotionsPayload<ExtArgs>
        fields: Prisma.PromotionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromotionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromotionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          findFirst: {
            args: Prisma.PromotionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromotionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          findMany: {
            args: Prisma.PromotionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>[]
          }
          create: {
            args: Prisma.PromotionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          createMany: {
            args: Prisma.PromotionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PromotionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          update: {
            args: Prisma.PromotionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          deleteMany: {
            args: Prisma.PromotionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromotionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromotionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromotionsPayload>
          }
          aggregate: {
            args: Prisma.PromotionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotions>
          }
          groupBy: {
            args: Prisma.PromotionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromotionsCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionsCountAggregateOutputType> | number
          }
        }
      }
      Coupons: {
        payload: Prisma.$CouponsPayload<ExtArgs>
        fields: Prisma.CouponsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CouponsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CouponsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          findFirst: {
            args: Prisma.CouponsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CouponsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          findMany: {
            args: Prisma.CouponsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>[]
          }
          create: {
            args: Prisma.CouponsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          createMany: {
            args: Prisma.CouponsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CouponsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          update: {
            args: Prisma.CouponsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          deleteMany: {
            args: Prisma.CouponsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CouponsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CouponsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CouponsPayload>
          }
          aggregate: {
            args: Prisma.CouponsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoupons>
          }
          groupBy: {
            args: Prisma.CouponsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CouponsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CouponsCountArgs<ExtArgs>
            result: $Utils.Optional<CouponsCountAggregateOutputType> | number
          }
        }
      }
      CarType: {
        payload: Prisma.$CarTypePayload<ExtArgs>
        fields: Prisma.CarTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          findFirst: {
            args: Prisma.CarTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          findMany: {
            args: Prisma.CarTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>[]
          }
          create: {
            args: Prisma.CarTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          createMany: {
            args: Prisma.CarTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CarTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          update: {
            args: Prisma.CarTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          deleteMany: {
            args: Prisma.CarTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CarTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarTypePayload>
          }
          aggregate: {
            args: Prisma.CarTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCarType>
          }
          groupBy: {
            args: Prisma.CarTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarTypeCountArgs<ExtArgs>
            result: $Utils.Optional<CarTypeCountAggregateOutputType> | number
          }
        }
      }
      Insurance: {
        payload: Prisma.$InsurancePayload<ExtArgs>
        fields: Prisma.InsuranceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsuranceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsuranceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          findFirst: {
            args: Prisma.InsuranceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsuranceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          findMany: {
            args: Prisma.InsuranceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>[]
          }
          create: {
            args: Prisma.InsuranceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          createMany: {
            args: Prisma.InsuranceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InsuranceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          update: {
            args: Prisma.InsuranceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          deleteMany: {
            args: Prisma.InsuranceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsuranceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InsuranceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsurancePayload>
          }
          aggregate: {
            args: Prisma.InsuranceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsurance>
          }
          groupBy: {
            args: Prisma.InsuranceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsuranceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsuranceCountArgs<ExtArgs>
            result: $Utils.Optional<InsuranceCountAggregateOutputType> | number
          }
        }
      }
      Bank: {
        payload: Prisma.$BankPayload<ExtArgs>
        fields: Prisma.BankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          findFirst: {
            args: Prisma.BankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          findMany: {
            args: Prisma.BankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>[]
          }
          create: {
            args: Prisma.BankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          createMany: {
            args: Prisma.BankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          update: {
            args: Prisma.BankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          deleteMany: {
            args: Prisma.BankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankPayload>
          }
          aggregate: {
            args: Prisma.BankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBank>
          }
          groupBy: {
            args: Prisma.BankGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankCountArgs<ExtArgs>
            result: $Utils.Optional<BankCountAggregateOutputType> | number
          }
        }
      }
      Car: {
        payload: Prisma.$CarPayload<ExtArgs>
        fields: Prisma.CarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          findFirst: {
            args: Prisma.CarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          findMany: {
            args: Prisma.CarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>[]
          }
          create: {
            args: Prisma.CarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          createMany: {
            args: Prisma.CarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          update: {
            args: Prisma.CarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          deleteMany: {
            args: Prisma.CarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CarPayload>
          }
          aggregate: {
            args: Prisma.CarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCar>
          }
          groupBy: {
            args: Prisma.CarGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarCountArgs<ExtArgs>
            result: $Utils.Optional<CarCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      payment: {
        payload: Prisma.$paymentPayload<ExtArgs>
        fields: Prisma.paymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findFirst: {
            args: Prisma.paymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findMany: {
            args: Prisma.paymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          create: {
            args: Prisma.paymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          createMany: {
            args: Prisma.paymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.paymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          update: {
            args: Prisma.paymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          deleteMany: {
            args: Prisma.paymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.paymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.paymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Repair: {
        payload: Prisma.$RepairPayload<ExtArgs>
        fields: Prisma.RepairFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepairFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepairFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          findFirst: {
            args: Prisma.RepairFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepairFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          findMany: {
            args: Prisma.RepairFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>[]
          }
          create: {
            args: Prisma.RepairCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          createMany: {
            args: Prisma.RepairCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RepairDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          update: {
            args: Prisma.RepairUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          deleteMany: {
            args: Prisma.RepairDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepairUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RepairUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepairPayload>
          }
          aggregate: {
            args: Prisma.RepairAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRepair>
          }
          groupBy: {
            args: Prisma.RepairGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepairGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepairCountArgs<ExtArgs>
            result: $Utils.Optional<RepairCountAggregateOutputType> | number
          }
        }
      }
      Rental: {
        payload: Prisma.$RentalPayload<ExtArgs>
        fields: Prisma.RentalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          findFirst: {
            args: Prisma.RentalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          findMany: {
            args: Prisma.RentalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>[]
          }
          create: {
            args: Prisma.RentalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          createMany: {
            args: Prisma.RentalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RentalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          update: {
            args: Prisma.RentalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          deleteMany: {
            args: Prisma.RentalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RentalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RentalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          aggregate: {
            args: Prisma.RentalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRental>
          }
          groupBy: {
            args: Prisma.RentalGroupByArgs<ExtArgs>
            result: $Utils.Optional<RentalGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentalCountArgs<ExtArgs>
            result: $Utils.Optional<RentalCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    employees?: EmployeesOmit
    departments?: DepartmentsOmit
    status?: StatusOmit
    promotions?: PromotionsOmit
    coupons?: CouponsOmit
    carType?: CarTypeOmit
    insurance?: InsuranceOmit
    bank?: BankOmit
    car?: CarOmit
    review?: ReviewOmit
    payment?: paymentOmit
    repair?: RepairOmit
    rental?: RentalOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    coupon: number
    car: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupon?: boolean | UsersCountOutputTypeCountCouponArgs
    car?: boolean | UsersCountOutputTypeCountCarArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCouponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }


  /**
   * Count Type EmployeesCountOutputType
   */

  export type EmployeesCountOutputType = {
    rental: number
    review: number
  }

  export type EmployeesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | EmployeesCountOutputTypeCountRentalArgs
    review?: boolean | EmployeesCountOutputTypeCountReviewArgs
  }

  // Custom InputTypes
  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeesCountOutputType
     */
    select?: EmployeesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type DepartmentsCountOutputType
   */

  export type DepartmentsCountOutputType = {
    Employees: number
  }

  export type DepartmentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employees?: boolean | DepartmentsCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentsCountOutputType without action
   */
  export type DepartmentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentsCountOutputType
     */
    select?: DepartmentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentsCountOutputType without action
   */
  export type DepartmentsCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeesWhereInput
  }


  /**
   * Count Type CarTypeCountOutputType
   */

  export type CarTypeCountOutputType = {
    car: number
  }

  export type CarTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | CarTypeCountOutputTypeCountCarArgs
  }

  // Custom InputTypes
  /**
   * CarTypeCountOutputType without action
   */
  export type CarTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarTypeCountOutputType
     */
    select?: CarTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarTypeCountOutputType without action
   */
  export type CarTypeCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }


  /**
   * Count Type InsuranceCountOutputType
   */

  export type InsuranceCountOutputType = {
    car: number
  }

  export type InsuranceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | InsuranceCountOutputTypeCountCarArgs
  }

  // Custom InputTypes
  /**
   * InsuranceCountOutputType without action
   */
  export type InsuranceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InsuranceCountOutputType
     */
    select?: InsuranceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InsuranceCountOutputType without action
   */
  export type InsuranceCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }


  /**
   * Count Type BankCountOutputType
   */

  export type BankCountOutputType = {
    rental: number
  }

  export type BankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | BankCountOutputTypeCountRentalArgs
  }

  // Custom InputTypes
  /**
   * BankCountOutputType without action
   */
  export type BankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankCountOutputType
     */
    select?: BankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BankCountOutputType without action
   */
  export type BankCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }


  /**
   * Count Type CarCountOutputType
   */

  export type CarCountOutputType = {
    rental: number
    review: number
  }

  export type CarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | CarCountOutputTypeCountRentalArgs
    review?: boolean | CarCountOutputTypeCountReviewArgs
  }

  // Custom InputTypes
  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCountOutputType
     */
    select?: CarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }

  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    profile: string | null
    role: $Enums.Role | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    profile: string | null
    role: $Enums.Role | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    profile: number
    role: number
    otp: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    profile?: true
    role?: true
    createAt?: true
    updateAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    profile?: true
    role?: true
    createAt?: true
    updateAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    profile?: true
    role?: true
    otp?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile: string | null
    role: $Enums.Role
    otp: JsonValue | null
    createAt: Date
    updateAt: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    profile?: boolean
    role?: boolean
    otp?: boolean
    createAt?: boolean
    updateAt?: boolean
    coupon?: boolean | Users$couponArgs<ExtArgs>
    car?: boolean | Users$carArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type UsersSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    profile?: boolean
    role?: boolean
    otp?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "password" | "profile" | "role" | "otp" | "createAt" | "updateAt", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coupon?: boolean | Users$couponArgs<ExtArgs>
    car?: boolean | Users$carArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      coupon: Prisma.$CouponsPayload<ExtArgs>[]
      car: Prisma.$RentalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      password: string
      profile: string | null
      role: $Enums.Role
      otp: Prisma.JsonValue | null
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coupon<T extends Users$couponArgs<ExtArgs> = {}>(args?: Subset<T, Users$couponArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    car<T extends Users$carArgs<ExtArgs> = {}>(args?: Subset<T, Users$carArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly firstName: FieldRef<"Users", 'String'>
    readonly lastName: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly profile: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'Role'>
    readonly otp: FieldRef<"Users", 'Json'>
    readonly createAt: FieldRef<"Users", 'DateTime'>
    readonly updateAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.coupon
   */
  export type Users$couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    where?: CouponsWhereInput
    orderBy?: CouponsOrderByWithRelationInput | CouponsOrderByWithRelationInput[]
    cursor?: CouponsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * Users.car
   */
  export type Users$carArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Employees
   */

  export type AggregateEmployees = {
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  export type EmployeesAvgAggregateOutputType = {
    phone: number | null
    salary: number | null
  }

  export type EmployeesSumAggregateOutputType = {
    phone: number | null
    salary: number | null
  }

  export type EmployeesMinAggregateOutputType = {
    id: string | null
    dept_id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: number | null
    village: string | null
    distrit: string | null
    provinced: string | null
    natinalIdCard: string | null
    salary: number | null
    birthday: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type EmployeesMaxAggregateOutputType = {
    id: string | null
    dept_id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: number | null
    village: string | null
    distrit: string | null
    provinced: string | null
    natinalIdCard: string | null
    salary: number | null
    birthday: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type EmployeesCountAggregateOutputType = {
    id: number
    dept_id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    village: number
    distrit: number
    provinced: number
    natinalIdCard: number
    salary: number
    birthday: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type EmployeesAvgAggregateInputType = {
    phone?: true
    salary?: true
  }

  export type EmployeesSumAggregateInputType = {
    phone?: true
    salary?: true
  }

  export type EmployeesMinAggregateInputType = {
    id?: true
    dept_id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    village?: true
    distrit?: true
    provinced?: true
    natinalIdCard?: true
    salary?: true
    birthday?: true
    createAt?: true
    updateAt?: true
  }

  export type EmployeesMaxAggregateInputType = {
    id?: true
    dept_id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    village?: true
    distrit?: true
    provinced?: true
    natinalIdCard?: true
    salary?: true
    birthday?: true
    createAt?: true
    updateAt?: true
  }

  export type EmployeesCountAggregateInputType = {
    id?: true
    dept_id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    village?: true
    distrit?: true
    provinced?: true
    natinalIdCard?: true
    salary?: true
    birthday?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type EmployeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to aggregate.
     */
    where?: EmployeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeesOrderByWithRelationInput | EmployeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeesMaxAggregateInputType
  }

  export type GetEmployeesAggregateType<T extends EmployeesAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployees[P]>
      : GetScalarType<T[P], AggregateEmployees[P]>
  }




  export type EmployeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeesWhereInput
    orderBy?: EmployeesOrderByWithAggregationInput | EmployeesOrderByWithAggregationInput[]
    by: EmployeesScalarFieldEnum[] | EmployeesScalarFieldEnum
    having?: EmployeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeesCountAggregateInputType | true
    _avg?: EmployeesAvgAggregateInputType
    _sum?: EmployeesSumAggregateInputType
    _min?: EmployeesMinAggregateInputType
    _max?: EmployeesMaxAggregateInputType
  }

  export type EmployeesGroupByOutputType = {
    id: string
    dept_id: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date
    createAt: Date
    updateAt: Date
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  type GetEmployeesGroupByPayload<T extends EmployeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
        }
      >
    >


  export type EmployeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dept_id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    village?: boolean
    distrit?: boolean
    provinced?: boolean
    natinalIdCard?: boolean
    salary?: boolean
    birthday?: boolean
    createAt?: boolean
    updateAt?: boolean
    department?: boolean | DepartmentsDefaultArgs<ExtArgs>
    rental?: boolean | Employees$rentalArgs<ExtArgs>
    review?: boolean | Employees$reviewArgs<ExtArgs>
    _count?: boolean | EmployeesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employees"]>



  export type EmployeesSelectScalar = {
    id?: boolean
    dept_id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    village?: boolean
    distrit?: boolean
    provinced?: boolean
    natinalIdCard?: boolean
    salary?: boolean
    birthday?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type EmployeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dept_id" | "firstName" | "lastName" | "email" | "phone" | "village" | "distrit" | "provinced" | "natinalIdCard" | "salary" | "birthday" | "createAt" | "updateAt", ExtArgs["result"]["employees"]>
  export type EmployeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentsDefaultArgs<ExtArgs>
    rental?: boolean | Employees$rentalArgs<ExtArgs>
    review?: boolean | Employees$reviewArgs<ExtArgs>
    _count?: boolean | EmployeesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmployeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employees"
    objects: {
      department: Prisma.$DepartmentsPayload<ExtArgs>
      rental: Prisma.$RentalPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dept_id: string
      firstName: string
      lastName: string
      email: string
      phone: number
      village: string
      distrit: string
      provinced: string
      natinalIdCard: string
      salary: number
      birthday: Date
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["employees"]>
    composites: {}
  }

  type EmployeesGetPayload<S extends boolean | null | undefined | EmployeesDefaultArgs> = $Result.GetResult<Prisma.$EmployeesPayload, S>

  type EmployeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeesCountAggregateInputType | true
    }

  export interface EmployeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employees'], meta: { name: 'Employees' } }
    /**
     * Find zero or one Employees that matches the filter.
     * @param {EmployeesFindUniqueArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeesFindUniqueArgs>(args: SelectSubset<T, EmployeesFindUniqueArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Employees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeesFindUniqueOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeesFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesFindFirstArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeesFindFirstArgs>(args?: SelectSubset<T, EmployeesFindFirstArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Employees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesFindFirstOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeesFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employees.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeesWithIdOnly = await prisma.employees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeesFindManyArgs>(args?: SelectSubset<T, EmployeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Employees.
     * @param {EmployeesCreateArgs} args - Arguments to create a Employees.
     * @example
     * // Create one Employees
     * const Employees = await prisma.employees.create({
     *   data: {
     *     // ... data to create a Employees
     *   }
     * })
     * 
     */
    create<T extends EmployeesCreateArgs>(args: SelectSubset<T, EmployeesCreateArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Employees.
     * @param {EmployeesCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employees = await prisma.employees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeesCreateManyArgs>(args?: SelectSubset<T, EmployeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employees.
     * @param {EmployeesDeleteArgs} args - Arguments to delete one Employees.
     * @example
     * // Delete one Employees
     * const Employees = await prisma.employees.delete({
     *   where: {
     *     // ... filter to delete one Employees
     *   }
     * })
     * 
     */
    delete<T extends EmployeesDeleteArgs>(args: SelectSubset<T, EmployeesDeleteArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Employees.
     * @param {EmployeesUpdateArgs} args - Arguments to update one Employees.
     * @example
     * // Update one Employees
     * const employees = await prisma.employees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeesUpdateArgs>(args: SelectSubset<T, EmployeesUpdateArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeesDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeesDeleteManyArgs>(args?: SelectSubset<T, EmployeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employees = await prisma.employees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeesUpdateManyArgs>(args: SelectSubset<T, EmployeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employees.
     * @param {EmployeesUpsertArgs} args - Arguments to update or create a Employees.
     * @example
     * // Update or create a Employees
     * const employees = await prisma.employees.upsert({
     *   create: {
     *     // ... data to create a Employees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employees we want to update
     *   }
     * })
     */
    upsert<T extends EmployeesUpsertArgs>(args: SelectSubset<T, EmployeesUpsertArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employees.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeesCountArgs>(
      args?: Subset<T, EmployeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeesAggregateArgs>(args: Subset<T, EmployeesAggregateArgs>): Prisma.PrismaPromise<GetEmployeesAggregateType<T>>

    /**
     * Group by Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeesGroupByArgs['orderBy'] }
        : { orderBy?: EmployeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employees model
   */
  readonly fields: EmployeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentsDefaultArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    rental<T extends Employees$rentalArgs<ExtArgs> = {}>(args?: Subset<T, Employees$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    review<T extends Employees$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Employees$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employees model
   */ 
  interface EmployeesFieldRefs {
    readonly id: FieldRef<"Employees", 'String'>
    readonly dept_id: FieldRef<"Employees", 'String'>
    readonly firstName: FieldRef<"Employees", 'String'>
    readonly lastName: FieldRef<"Employees", 'String'>
    readonly email: FieldRef<"Employees", 'String'>
    readonly phone: FieldRef<"Employees", 'Int'>
    readonly village: FieldRef<"Employees", 'String'>
    readonly distrit: FieldRef<"Employees", 'String'>
    readonly provinced: FieldRef<"Employees", 'String'>
    readonly natinalIdCard: FieldRef<"Employees", 'String'>
    readonly salary: FieldRef<"Employees", 'Float'>
    readonly birthday: FieldRef<"Employees", 'DateTime'>
    readonly createAt: FieldRef<"Employees", 'DateTime'>
    readonly updateAt: FieldRef<"Employees", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employees findUnique
   */
  export type EmployeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where: EmployeesWhereUniqueInput
  }

  /**
   * Employees findUniqueOrThrow
   */
  export type EmployeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where: EmployeesWhereUniqueInput
  }

  /**
   * Employees findFirst
   */
  export type EmployeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeesOrderByWithRelationInput | EmployeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * Employees findFirstOrThrow
   */
  export type EmployeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeesOrderByWithRelationInput | EmployeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * Employees findMany
   */
  export type EmployeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeesOrderByWithRelationInput | EmployeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * Employees create
   */
  export type EmployeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * The data needed to create a Employees.
     */
    data: XOR<EmployeesCreateInput, EmployeesUncheckedCreateInput>
  }

  /**
   * Employees createMany
   */
  export type EmployeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeesCreateManyInput | EmployeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employees update
   */
  export type EmployeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * The data needed to update a Employees.
     */
    data: XOR<EmployeesUpdateInput, EmployeesUncheckedUpdateInput>
    /**
     * Choose, which Employees to update.
     */
    where: EmployeesWhereUniqueInput
  }

  /**
   * Employees updateMany
   */
  export type EmployeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeesUpdateManyMutationInput, EmployeesUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeesWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employees upsert
   */
  export type EmployeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * The filter to search for the Employees to update in case it exists.
     */
    where: EmployeesWhereUniqueInput
    /**
     * In case the Employees found by the `where` argument doesn't exist, create a new Employees with this data.
     */
    create: XOR<EmployeesCreateInput, EmployeesUncheckedCreateInput>
    /**
     * In case the Employees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeesUpdateInput, EmployeesUncheckedUpdateInput>
  }

  /**
   * Employees delete
   */
  export type EmployeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    /**
     * Filter which Employees to delete.
     */
    where: EmployeesWhereUniqueInput
  }

  /**
   * Employees deleteMany
   */
  export type EmployeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeesWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employees.rental
   */
  export type Employees$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Employees.review
   */
  export type Employees$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Employees without action
   */
  export type EmployeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
  }


  /**
   * Model Departments
   */

  export type AggregateDepartments = {
    _count: DepartmentsCountAggregateOutputType | null
    _min: DepartmentsMinAggregateOutputType | null
    _max: DepartmentsMaxAggregateOutputType | null
  }

  export type DepartmentsMinAggregateOutputType = {
    id: string | null
    deptName: string | null
    pricePerDay: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type DepartmentsMaxAggregateOutputType = {
    id: string | null
    deptName: string | null
    pricePerDay: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type DepartmentsCountAggregateOutputType = {
    id: number
    deptName: number
    pricePerDay: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type DepartmentsMinAggregateInputType = {
    id?: true
    deptName?: true
    pricePerDay?: true
    createAt?: true
    updateAt?: true
  }

  export type DepartmentsMaxAggregateInputType = {
    id?: true
    deptName?: true
    pricePerDay?: true
    createAt?: true
    updateAt?: true
  }

  export type DepartmentsCountAggregateInputType = {
    id?: true
    deptName?: true
    pricePerDay?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type DepartmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to aggregate.
     */
    where?: DepartmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentsOrderByWithRelationInput | DepartmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentsMaxAggregateInputType
  }

  export type GetDepartmentsAggregateType<T extends DepartmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartments[P]>
      : GetScalarType<T[P], AggregateDepartments[P]>
  }




  export type DepartmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentsWhereInput
    orderBy?: DepartmentsOrderByWithAggregationInput | DepartmentsOrderByWithAggregationInput[]
    by: DepartmentsScalarFieldEnum[] | DepartmentsScalarFieldEnum
    having?: DepartmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentsCountAggregateInputType | true
    _min?: DepartmentsMinAggregateInputType
    _max?: DepartmentsMaxAggregateInputType
  }

  export type DepartmentsGroupByOutputType = {
    id: string
    deptName: string
    pricePerDay: string | null
    createAt: Date
    updateAt: Date
    _count: DepartmentsCountAggregateOutputType | null
    _min: DepartmentsMinAggregateOutputType | null
    _max: DepartmentsMaxAggregateOutputType | null
  }

  type GetDepartmentsGroupByPayload<T extends DepartmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentsGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentsGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    deptName?: boolean
    pricePerDay?: boolean
    createAt?: boolean
    updateAt?: boolean
    Employees?: boolean | Departments$EmployeesArgs<ExtArgs>
    _count?: boolean | DepartmentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departments"]>



  export type DepartmentsSelectScalar = {
    id?: boolean
    deptName?: boolean
    pricePerDay?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type DepartmentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "deptName" | "pricePerDay" | "createAt" | "updateAt", ExtArgs["result"]["departments"]>
  export type DepartmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employees?: boolean | Departments$EmployeesArgs<ExtArgs>
    _count?: boolean | DepartmentsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DepartmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Departments"
    objects: {
      Employees: Prisma.$EmployeesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      deptName: string
      pricePerDay: string | null
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["departments"]>
    composites: {}
  }

  type DepartmentsGetPayload<S extends boolean | null | undefined | DepartmentsDefaultArgs> = $Result.GetResult<Prisma.$DepartmentsPayload, S>

  type DepartmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentsCountAggregateInputType | true
    }

  export interface DepartmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Departments'], meta: { name: 'Departments' } }
    /**
     * Find zero or one Departments that matches the filter.
     * @param {DepartmentsFindUniqueArgs} args - Arguments to find a Departments
     * @example
     * // Get one Departments
     * const departments = await prisma.departments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentsFindUniqueArgs>(args: SelectSubset<T, DepartmentsFindUniqueArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Departments that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentsFindUniqueOrThrowArgs} args - Arguments to find a Departments
     * @example
     * // Get one Departments
     * const departments = await prisma.departments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsFindFirstArgs} args - Arguments to find a Departments
     * @example
     * // Get one Departments
     * const departments = await prisma.departments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentsFindFirstArgs>(args?: SelectSubset<T, DepartmentsFindFirstArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Departments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsFindFirstOrThrowArgs} args - Arguments to find a Departments
     * @example
     * // Get one Departments
     * const departments = await prisma.departments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.departments.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.departments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentsWithIdOnly = await prisma.departments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentsFindManyArgs>(args?: SelectSubset<T, DepartmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Departments.
     * @param {DepartmentsCreateArgs} args - Arguments to create a Departments.
     * @example
     * // Create one Departments
     * const Departments = await prisma.departments.create({
     *   data: {
     *     // ... data to create a Departments
     *   }
     * })
     * 
     */
    create<T extends DepartmentsCreateArgs>(args: SelectSubset<T, DepartmentsCreateArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Departments.
     * @param {DepartmentsCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const departments = await prisma.departments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentsCreateManyArgs>(args?: SelectSubset<T, DepartmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Departments.
     * @param {DepartmentsDeleteArgs} args - Arguments to delete one Departments.
     * @example
     * // Delete one Departments
     * const Departments = await prisma.departments.delete({
     *   where: {
     *     // ... filter to delete one Departments
     *   }
     * })
     * 
     */
    delete<T extends DepartmentsDeleteArgs>(args: SelectSubset<T, DepartmentsDeleteArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Departments.
     * @param {DepartmentsUpdateArgs} args - Arguments to update one Departments.
     * @example
     * // Update one Departments
     * const departments = await prisma.departments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentsUpdateArgs>(args: SelectSubset<T, DepartmentsUpdateArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentsDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.departments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentsDeleteManyArgs>(args?: SelectSubset<T, DepartmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const departments = await prisma.departments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentsUpdateManyArgs>(args: SelectSubset<T, DepartmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Departments.
     * @param {DepartmentsUpsertArgs} args - Arguments to update or create a Departments.
     * @example
     * // Update or create a Departments
     * const departments = await prisma.departments.upsert({
     *   create: {
     *     // ... data to create a Departments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departments we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentsUpsertArgs>(args: SelectSubset<T, DepartmentsUpsertArgs<ExtArgs>>): Prisma__DepartmentsClient<$Result.GetResult<Prisma.$DepartmentsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.departments.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentsCountArgs>(
      args?: Subset<T, DepartmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentsAggregateArgs>(args: Subset<T, DepartmentsAggregateArgs>): Prisma.PrismaPromise<GetDepartmentsAggregateType<T>>

    /**
     * Group by Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentsGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Departments model
   */
  readonly fields: DepartmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Departments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Employees<T extends Departments$EmployeesArgs<ExtArgs> = {}>(args?: Subset<T, Departments$EmployeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Departments model
   */ 
  interface DepartmentsFieldRefs {
    readonly id: FieldRef<"Departments", 'String'>
    readonly deptName: FieldRef<"Departments", 'String'>
    readonly pricePerDay: FieldRef<"Departments", 'String'>
    readonly createAt: FieldRef<"Departments", 'DateTime'>
    readonly updateAt: FieldRef<"Departments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Departments findUnique
   */
  export type DepartmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where: DepartmentsWhereUniqueInput
  }

  /**
   * Departments findUniqueOrThrow
   */
  export type DepartmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where: DepartmentsWhereUniqueInput
  }

  /**
   * Departments findFirst
   */
  export type DepartmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentsOrderByWithRelationInput | DepartmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentsScalarFieldEnum | DepartmentsScalarFieldEnum[]
  }

  /**
   * Departments findFirstOrThrow
   */
  export type DepartmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentsOrderByWithRelationInput | DepartmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentsScalarFieldEnum | DepartmentsScalarFieldEnum[]
  }

  /**
   * Departments findMany
   */
  export type DepartmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentsOrderByWithRelationInput | DepartmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentsScalarFieldEnum | DepartmentsScalarFieldEnum[]
  }

  /**
   * Departments create
   */
  export type DepartmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Departments.
     */
    data: XOR<DepartmentsCreateInput, DepartmentsUncheckedCreateInput>
  }

  /**
   * Departments createMany
   */
  export type DepartmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentsCreateManyInput | DepartmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Departments update
   */
  export type DepartmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Departments.
     */
    data: XOR<DepartmentsUpdateInput, DepartmentsUncheckedUpdateInput>
    /**
     * Choose, which Departments to update.
     */
    where: DepartmentsWhereUniqueInput
  }

  /**
   * Departments updateMany
   */
  export type DepartmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentsUpdateManyMutationInput, DepartmentsUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentsWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Departments upsert
   */
  export type DepartmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Departments to update in case it exists.
     */
    where: DepartmentsWhereUniqueInput
    /**
     * In case the Departments found by the `where` argument doesn't exist, create a new Departments with this data.
     */
    create: XOR<DepartmentsCreateInput, DepartmentsUncheckedCreateInput>
    /**
     * In case the Departments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentsUpdateInput, DepartmentsUncheckedUpdateInput>
  }

  /**
   * Departments delete
   */
  export type DepartmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
    /**
     * Filter which Departments to delete.
     */
    where: DepartmentsWhereUniqueInput
  }

  /**
   * Departments deleteMany
   */
  export type DepartmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentsWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Departments.Employees
   */
  export type Departments$EmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employees
     */
    select?: EmployeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employees
     */
    omit?: EmployeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeesInclude<ExtArgs> | null
    where?: EmployeesWhereInput
    orderBy?: EmployeesOrderByWithRelationInput | EmployeesOrderByWithRelationInput[]
    cursor?: EmployeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * Departments without action
   */
  export type DepartmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Departments
     */
    select?: DepartmentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Departments
     */
    omit?: DepartmentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentsInclude<ExtArgs> | null
  }


  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    statu: number | null
  }

  export type StatusSumAggregateOutputType = {
    statu: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: string | null
    statu: number | null
    statu_user: string | null
    statu_admin: string | null
    statu_car: string | null
    icon_statu: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StatusMaxAggregateOutputType = {
    id: string | null
    statu: number | null
    statu_user: string | null
    statu_admin: string | null
    statu_car: string | null
    icon_statu: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    statu: number
    statu_user: number
    statu_admin: number
    statu_car: number
    icon_statu: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    statu?: true
  }

  export type StatusSumAggregateInputType = {
    statu?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    statu?: true
    statu_user?: true
    statu_admin?: true
    statu_car?: true
    icon_statu?: true
    createAt?: true
    updateAt?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    statu?: true
    statu_user?: true
    statu_admin?: true
    statu_car?: true
    icon_statu?: true
    createAt?: true
    updateAt?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    statu?: true
    statu_user?: true
    statu_admin?: true
    statu_car?: true
    icon_statu?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    id: string
    statu: number
    statu_user: string
    statu_admin: string
    statu_car: string
    icon_statu: string
    createAt: Date
    updateAt: Date
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statu?: boolean
    statu_user?: boolean
    statu_admin?: boolean
    statu_car?: boolean
    icon_statu?: boolean
    createAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["status"]>



  export type StatusSelectScalar = {
    id?: boolean
    statu?: boolean
    statu_user?: boolean
    statu_admin?: boolean
    statu_car?: boolean
    icon_statu?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type StatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statu" | "statu_user" | "statu_admin" | "statu_car" | "icon_statu" | "createAt" | "updateAt", ExtArgs["result"]["status"]>

  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      statu: number
      statu_user: string
      statu_admin: string
      statu_car: string
      icon_statu: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["status"]>
    composites: {}
  }

  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusFindUniqueArgs>(args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Status that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusFindFirstArgs>(args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusFindManyArgs>(args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
     */
    create<T extends StatusCreateArgs>(args: SelectSubset<T, StatusCreateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Statuses.
     * @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const status = await prisma.status.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusCreateManyArgs>(args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
     */
    delete<T extends StatusDeleteArgs>(args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusUpdateArgs>(args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusDeleteManyArgs>(args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusUpdateManyArgs>(args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
     */
    upsert<T extends StatusUpsertArgs>(args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly id: FieldRef<"Status", 'String'>
    readonly statu: FieldRef<"Status", 'Int'>
    readonly statu_user: FieldRef<"Status", 'String'>
    readonly statu_admin: FieldRef<"Status", 'String'>
    readonly statu_car: FieldRef<"Status", 'String'>
    readonly icon_statu: FieldRef<"Status", 'String'>
    readonly createAt: FieldRef<"Status", 'DateTime'>
    readonly updateAt: FieldRef<"Status", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }

  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }

  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to update.
     */
    limit?: number
  }

  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }

  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }

  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
    /**
     * Limit how many Statuses to delete.
     */
    limit?: number
  }

  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Status
     */
    omit?: StatusOmit<ExtArgs> | null
  }


  /**
   * Model Promotions
   */

  export type AggregatePromotions = {
    _count: PromotionsCountAggregateOutputType | null
    _avg: PromotionsAvgAggregateOutputType | null
    _sum: PromotionsSumAggregateOutputType | null
    _min: PromotionsMinAggregateOutputType | null
    _max: PromotionsMaxAggregateOutputType | null
  }

  export type PromotionsAvgAggregateOutputType = {
    discount: number | null
    min_rent_amount: number | null
  }

  export type PromotionsSumAggregateOutputType = {
    discount: number | null
    min_rent_amount: number | null
  }

  export type PromotionsMinAggregateOutputType = {
    id: string | null
    titel: string | null
    description: string | null
    image: string | null
    discount_type: $Enums.Discount_Type | null
    discount: number | null
    min_rent_amount: number | null
    status: $Enums.Statu_Promotion | null
    start_date: Date | null
    end_date: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PromotionsMaxAggregateOutputType = {
    id: string | null
    titel: string | null
    description: string | null
    image: string | null
    discount_type: $Enums.Discount_Type | null
    discount: number | null
    min_rent_amount: number | null
    status: $Enums.Statu_Promotion | null
    start_date: Date | null
    end_date: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PromotionsCountAggregateOutputType = {
    id: number
    titel: number
    description: number
    image: number
    discount_type: number
    discount: number
    min_rent_amount: number
    status: number
    start_date: number
    end_date: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type PromotionsAvgAggregateInputType = {
    discount?: true
    min_rent_amount?: true
  }

  export type PromotionsSumAggregateInputType = {
    discount?: true
    min_rent_amount?: true
  }

  export type PromotionsMinAggregateInputType = {
    id?: true
    titel?: true
    description?: true
    image?: true
    discount_type?: true
    discount?: true
    min_rent_amount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
  }

  export type PromotionsMaxAggregateInputType = {
    id?: true
    titel?: true
    description?: true
    image?: true
    discount_type?: true
    discount?: true
    min_rent_amount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
  }

  export type PromotionsCountAggregateInputType = {
    id?: true
    titel?: true
    description?: true
    image?: true
    discount_type?: true
    discount?: true
    min_rent_amount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type PromotionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotions to aggregate.
     */
    where?: PromotionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionsOrderByWithRelationInput | PromotionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromotionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promotions
    **/
    _count?: true | PromotionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionsMaxAggregateInputType
  }

  export type GetPromotionsAggregateType<T extends PromotionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotions[P]>
      : GetScalarType<T[P], AggregatePromotions[P]>
  }




  export type PromotionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromotionsWhereInput
    orderBy?: PromotionsOrderByWithAggregationInput | PromotionsOrderByWithAggregationInput[]
    by: PromotionsScalarFieldEnum[] | PromotionsScalarFieldEnum
    having?: PromotionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionsCountAggregateInputType | true
    _avg?: PromotionsAvgAggregateInputType
    _sum?: PromotionsSumAggregateInputType
    _min?: PromotionsMinAggregateInputType
    _max?: PromotionsMaxAggregateInputType
  }

  export type PromotionsGroupByOutputType = {
    id: string
    titel: string
    description: string
    image: string
    discount_type: $Enums.Discount_Type
    discount: number
    min_rent_amount: number
    status: $Enums.Statu_Promotion
    start_date: Date
    end_date: Date
    createAt: Date
    updateAt: Date
    _count: PromotionsCountAggregateOutputType | null
    _avg: PromotionsAvgAggregateOutputType | null
    _sum: PromotionsSumAggregateOutputType | null
    _min: PromotionsMinAggregateOutputType | null
    _max: PromotionsMaxAggregateOutputType | null
  }

  type GetPromotionsGroupByPayload<T extends PromotionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionsGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionsGroupByOutputType[P]>
        }
      >
    >


  export type PromotionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titel?: boolean
    description?: boolean
    image?: boolean
    discount_type?: boolean
    discount?: boolean
    min_rent_amount?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    createAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["promotions"]>



  export type PromotionsSelectScalar = {
    id?: boolean
    titel?: boolean
    description?: boolean
    image?: boolean
    discount_type?: boolean
    discount?: boolean
    min_rent_amount?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type PromotionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titel" | "description" | "image" | "discount_type" | "discount" | "min_rent_amount" | "status" | "start_date" | "end_date" | "createAt" | "updateAt", ExtArgs["result"]["promotions"]>

  export type $PromotionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Promotions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titel: string
      description: string
      image: string
      discount_type: $Enums.Discount_Type
      discount: number
      min_rent_amount: number
      status: $Enums.Statu_Promotion
      start_date: Date
      end_date: Date
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["promotions"]>
    composites: {}
  }

  type PromotionsGetPayload<S extends boolean | null | undefined | PromotionsDefaultArgs> = $Result.GetResult<Prisma.$PromotionsPayload, S>

  type PromotionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromotionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromotionsCountAggregateInputType | true
    }

  export interface PromotionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Promotions'], meta: { name: 'Promotions' } }
    /**
     * Find zero or one Promotions that matches the filter.
     * @param {PromotionsFindUniqueArgs} args - Arguments to find a Promotions
     * @example
     * // Get one Promotions
     * const promotions = await prisma.promotions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromotionsFindUniqueArgs>(args: SelectSubset<T, PromotionsFindUniqueArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Promotions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromotionsFindUniqueOrThrowArgs} args - Arguments to find a Promotions
     * @example
     * // Get one Promotions
     * const promotions = await prisma.promotions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromotionsFindUniqueOrThrowArgs>(args: SelectSubset<T, PromotionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsFindFirstArgs} args - Arguments to find a Promotions
     * @example
     * // Get one Promotions
     * const promotions = await prisma.promotions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromotionsFindFirstArgs>(args?: SelectSubset<T, PromotionsFindFirstArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Promotions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsFindFirstOrThrowArgs} args - Arguments to find a Promotions
     * @example
     * // Get one Promotions
     * const promotions = await prisma.promotions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromotionsFindFirstOrThrowArgs>(args?: SelectSubset<T, PromotionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotions
     * const promotions = await prisma.promotions.findMany()
     * 
     * // Get first 10 Promotions
     * const promotions = await prisma.promotions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionsWithIdOnly = await prisma.promotions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromotionsFindManyArgs>(args?: SelectSubset<T, PromotionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Promotions.
     * @param {PromotionsCreateArgs} args - Arguments to create a Promotions.
     * @example
     * // Create one Promotions
     * const Promotions = await prisma.promotions.create({
     *   data: {
     *     // ... data to create a Promotions
     *   }
     * })
     * 
     */
    create<T extends PromotionsCreateArgs>(args: SelectSubset<T, PromotionsCreateArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Promotions.
     * @param {PromotionsCreateManyArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotions = await prisma.promotions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromotionsCreateManyArgs>(args?: SelectSubset<T, PromotionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Promotions.
     * @param {PromotionsDeleteArgs} args - Arguments to delete one Promotions.
     * @example
     * // Delete one Promotions
     * const Promotions = await prisma.promotions.delete({
     *   where: {
     *     // ... filter to delete one Promotions
     *   }
     * })
     * 
     */
    delete<T extends PromotionsDeleteArgs>(args: SelectSubset<T, PromotionsDeleteArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Promotions.
     * @param {PromotionsUpdateArgs} args - Arguments to update one Promotions.
     * @example
     * // Update one Promotions
     * const promotions = await prisma.promotions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromotionsUpdateArgs>(args: SelectSubset<T, PromotionsUpdateArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Promotions.
     * @param {PromotionsDeleteManyArgs} args - Arguments to filter Promotions to delete.
     * @example
     * // Delete a few Promotions
     * const { count } = await prisma.promotions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromotionsDeleteManyArgs>(args?: SelectSubset<T, PromotionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotions
     * const promotions = await prisma.promotions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromotionsUpdateManyArgs>(args: SelectSubset<T, PromotionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promotions.
     * @param {PromotionsUpsertArgs} args - Arguments to update or create a Promotions.
     * @example
     * // Update or create a Promotions
     * const promotions = await prisma.promotions.upsert({
     *   create: {
     *     // ... data to create a Promotions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotions we want to update
     *   }
     * })
     */
    upsert<T extends PromotionsUpsertArgs>(args: SelectSubset<T, PromotionsUpsertArgs<ExtArgs>>): Prisma__PromotionsClient<$Result.GetResult<Prisma.$PromotionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsCountArgs} args - Arguments to filter Promotions to count.
     * @example
     * // Count the number of Promotions
     * const count = await prisma.promotions.count({
     *   where: {
     *     // ... the filter for the Promotions we want to count
     *   }
     * })
    **/
    count<T extends PromotionsCountArgs>(
      args?: Subset<T, PromotionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionsAggregateArgs>(args: Subset<T, PromotionsAggregateArgs>): Prisma.PrismaPromise<GetPromotionsAggregateType<T>>

    /**
     * Group by Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromotionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromotionsGroupByArgs['orderBy'] }
        : { orderBy?: PromotionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromotionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Promotions model
   */
  readonly fields: PromotionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Promotions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromotionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Promotions model
   */ 
  interface PromotionsFieldRefs {
    readonly id: FieldRef<"Promotions", 'String'>
    readonly titel: FieldRef<"Promotions", 'String'>
    readonly description: FieldRef<"Promotions", 'String'>
    readonly image: FieldRef<"Promotions", 'String'>
    readonly discount_type: FieldRef<"Promotions", 'Discount_Type'>
    readonly discount: FieldRef<"Promotions", 'Float'>
    readonly min_rent_amount: FieldRef<"Promotions", 'Float'>
    readonly status: FieldRef<"Promotions", 'Statu_Promotion'>
    readonly start_date: FieldRef<"Promotions", 'DateTime'>
    readonly end_date: FieldRef<"Promotions", 'DateTime'>
    readonly createAt: FieldRef<"Promotions", 'DateTime'>
    readonly updateAt: FieldRef<"Promotions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Promotions findUnique
   */
  export type PromotionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where: PromotionsWhereUniqueInput
  }

  /**
   * Promotions findUniqueOrThrow
   */
  export type PromotionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where: PromotionsWhereUniqueInput
  }

  /**
   * Promotions findFirst
   */
  export type PromotionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where?: PromotionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionsOrderByWithRelationInput | PromotionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionsScalarFieldEnum | PromotionsScalarFieldEnum[]
  }

  /**
   * Promotions findFirstOrThrow
   */
  export type PromotionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where?: PromotionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionsOrderByWithRelationInput | PromotionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promotions.
     */
    cursor?: PromotionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promotions.
     */
    distinct?: PromotionsScalarFieldEnum | PromotionsScalarFieldEnum[]
  }

  /**
   * Promotions findMany
   */
  export type PromotionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter, which Promotions to fetch.
     */
    where?: PromotionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promotions to fetch.
     */
    orderBy?: PromotionsOrderByWithRelationInput | PromotionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promotions.
     */
    cursor?: PromotionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promotions.
     */
    skip?: number
    distinct?: PromotionsScalarFieldEnum | PromotionsScalarFieldEnum[]
  }

  /**
   * Promotions create
   */
  export type PromotionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * The data needed to create a Promotions.
     */
    data: XOR<PromotionsCreateInput, PromotionsUncheckedCreateInput>
  }

  /**
   * Promotions createMany
   */
  export type PromotionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Promotions.
     */
    data: PromotionsCreateManyInput | PromotionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Promotions update
   */
  export type PromotionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * The data needed to update a Promotions.
     */
    data: XOR<PromotionsUpdateInput, PromotionsUncheckedUpdateInput>
    /**
     * Choose, which Promotions to update.
     */
    where: PromotionsWhereUniqueInput
  }

  /**
   * Promotions updateMany
   */
  export type PromotionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Promotions.
     */
    data: XOR<PromotionsUpdateManyMutationInput, PromotionsUncheckedUpdateManyInput>
    /**
     * Filter which Promotions to update
     */
    where?: PromotionsWhereInput
    /**
     * Limit how many Promotions to update.
     */
    limit?: number
  }

  /**
   * Promotions upsert
   */
  export type PromotionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * The filter to search for the Promotions to update in case it exists.
     */
    where: PromotionsWhereUniqueInput
    /**
     * In case the Promotions found by the `where` argument doesn't exist, create a new Promotions with this data.
     */
    create: XOR<PromotionsCreateInput, PromotionsUncheckedCreateInput>
    /**
     * In case the Promotions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromotionsUpdateInput, PromotionsUncheckedUpdateInput>
  }

  /**
   * Promotions delete
   */
  export type PromotionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
    /**
     * Filter which Promotions to delete.
     */
    where: PromotionsWhereUniqueInput
  }

  /**
   * Promotions deleteMany
   */
  export type PromotionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promotions to delete
     */
    where?: PromotionsWhereInput
    /**
     * Limit how many Promotions to delete.
     */
    limit?: number
  }

  /**
   * Promotions without action
   */
  export type PromotionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promotions
     */
    select?: PromotionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promotions
     */
    omit?: PromotionsOmit<ExtArgs> | null
  }


  /**
   * Model Coupons
   */

  export type AggregateCoupons = {
    _count: CouponsCountAggregateOutputType | null
    _avg: CouponsAvgAggregateOutputType | null
    _sum: CouponsSumAggregateOutputType | null
    _min: CouponsMinAggregateOutputType | null
    _max: CouponsMaxAggregateOutputType | null
  }

  export type CouponsAvgAggregateOutputType = {
    discount: number | null
  }

  export type CouponsSumAggregateOutputType = {
    discount: number | null
  }

  export type CouponsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    code: string | null
    description: string | null
    discount: number | null
    status: $Enums.Statu_Promotion | null
    start_date: Date | null
    end_date: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type CouponsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    code: string | null
    description: string | null
    discount: number | null
    status: $Enums.Statu_Promotion | null
    start_date: Date | null
    end_date: Date | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type CouponsCountAggregateOutputType = {
    id: number
    user_id: number
    code: number
    description: number
    discount: number
    status: number
    start_date: number
    end_date: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type CouponsAvgAggregateInputType = {
    discount?: true
  }

  export type CouponsSumAggregateInputType = {
    discount?: true
  }

  export type CouponsMinAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    description?: true
    discount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
  }

  export type CouponsMaxAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    description?: true
    discount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
  }

  export type CouponsCountAggregateInputType = {
    id?: true
    user_id?: true
    code?: true
    description?: true
    discount?: true
    status?: true
    start_date?: true
    end_date?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type CouponsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coupons to aggregate.
     */
    where?: CouponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponsOrderByWithRelationInput | CouponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CouponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coupons
    **/
    _count?: true | CouponsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CouponsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CouponsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CouponsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CouponsMaxAggregateInputType
  }

  export type GetCouponsAggregateType<T extends CouponsAggregateArgs> = {
        [P in keyof T & keyof AggregateCoupons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoupons[P]>
      : GetScalarType<T[P], AggregateCoupons[P]>
  }




  export type CouponsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CouponsWhereInput
    orderBy?: CouponsOrderByWithAggregationInput | CouponsOrderByWithAggregationInput[]
    by: CouponsScalarFieldEnum[] | CouponsScalarFieldEnum
    having?: CouponsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CouponsCountAggregateInputType | true
    _avg?: CouponsAvgAggregateInputType
    _sum?: CouponsSumAggregateInputType
    _min?: CouponsMinAggregateInputType
    _max?: CouponsMaxAggregateInputType
  }

  export type CouponsGroupByOutputType = {
    id: string
    user_id: string
    code: string
    description: string
    discount: number
    status: $Enums.Statu_Promotion
    start_date: Date
    end_date: Date
    createAt: Date
    updateAt: Date
    _count: CouponsCountAggregateOutputType | null
    _avg: CouponsAvgAggregateOutputType | null
    _sum: CouponsSumAggregateOutputType | null
    _min: CouponsMinAggregateOutputType | null
    _max: CouponsMaxAggregateOutputType | null
  }

  type GetCouponsGroupByPayload<T extends CouponsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CouponsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CouponsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CouponsGroupByOutputType[P]>
            : GetScalarType<T[P], CouponsGroupByOutputType[P]>
        }
      >
    >


  export type CouponsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    code?: boolean
    description?: boolean
    discount?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    createAt?: boolean
    updateAt?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coupons"]>



  export type CouponsSelectScalar = {
    id?: boolean
    user_id?: boolean
    code?: boolean
    description?: boolean
    discount?: boolean
    status?: boolean
    start_date?: boolean
    end_date?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type CouponsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "code" | "description" | "discount" | "status" | "start_date" | "end_date" | "createAt" | "updateAt", ExtArgs["result"]["coupons"]>
  export type CouponsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $CouponsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coupons"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      code: string
      description: string
      discount: number
      status: $Enums.Statu_Promotion
      start_date: Date
      end_date: Date
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["coupons"]>
    composites: {}
  }

  type CouponsGetPayload<S extends boolean | null | undefined | CouponsDefaultArgs> = $Result.GetResult<Prisma.$CouponsPayload, S>

  type CouponsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CouponsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CouponsCountAggregateInputType | true
    }

  export interface CouponsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coupons'], meta: { name: 'Coupons' } }
    /**
     * Find zero or one Coupons that matches the filter.
     * @param {CouponsFindUniqueArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CouponsFindUniqueArgs>(args: SelectSubset<T, CouponsFindUniqueArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Coupons that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CouponsFindUniqueOrThrowArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CouponsFindUniqueOrThrowArgs>(args: SelectSubset<T, CouponsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsFindFirstArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CouponsFindFirstArgs>(args?: SelectSubset<T, CouponsFindFirstArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Coupons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsFindFirstOrThrowArgs} args - Arguments to find a Coupons
     * @example
     * // Get one Coupons
     * const coupons = await prisma.coupons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CouponsFindFirstOrThrowArgs>(args?: SelectSubset<T, CouponsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coupons
     * const coupons = await prisma.coupons.findMany()
     * 
     * // Get first 10 Coupons
     * const coupons = await prisma.coupons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const couponsWithIdOnly = await prisma.coupons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CouponsFindManyArgs>(args?: SelectSubset<T, CouponsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Coupons.
     * @param {CouponsCreateArgs} args - Arguments to create a Coupons.
     * @example
     * // Create one Coupons
     * const Coupons = await prisma.coupons.create({
     *   data: {
     *     // ... data to create a Coupons
     *   }
     * })
     * 
     */
    create<T extends CouponsCreateArgs>(args: SelectSubset<T, CouponsCreateArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Coupons.
     * @param {CouponsCreateManyArgs} args - Arguments to create many Coupons.
     * @example
     * // Create many Coupons
     * const coupons = await prisma.coupons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CouponsCreateManyArgs>(args?: SelectSubset<T, CouponsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Coupons.
     * @param {CouponsDeleteArgs} args - Arguments to delete one Coupons.
     * @example
     * // Delete one Coupons
     * const Coupons = await prisma.coupons.delete({
     *   where: {
     *     // ... filter to delete one Coupons
     *   }
     * })
     * 
     */
    delete<T extends CouponsDeleteArgs>(args: SelectSubset<T, CouponsDeleteArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Coupons.
     * @param {CouponsUpdateArgs} args - Arguments to update one Coupons.
     * @example
     * // Update one Coupons
     * const coupons = await prisma.coupons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CouponsUpdateArgs>(args: SelectSubset<T, CouponsUpdateArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Coupons.
     * @param {CouponsDeleteManyArgs} args - Arguments to filter Coupons to delete.
     * @example
     * // Delete a few Coupons
     * const { count } = await prisma.coupons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CouponsDeleteManyArgs>(args?: SelectSubset<T, CouponsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coupons
     * const coupons = await prisma.coupons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CouponsUpdateManyArgs>(args: SelectSubset<T, CouponsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coupons.
     * @param {CouponsUpsertArgs} args - Arguments to update or create a Coupons.
     * @example
     * // Update or create a Coupons
     * const coupons = await prisma.coupons.upsert({
     *   create: {
     *     // ... data to create a Coupons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coupons we want to update
     *   }
     * })
     */
    upsert<T extends CouponsUpsertArgs>(args: SelectSubset<T, CouponsUpsertArgs<ExtArgs>>): Prisma__CouponsClient<$Result.GetResult<Prisma.$CouponsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsCountArgs} args - Arguments to filter Coupons to count.
     * @example
     * // Count the number of Coupons
     * const count = await prisma.coupons.count({
     *   where: {
     *     // ... the filter for the Coupons we want to count
     *   }
     * })
    **/
    count<T extends CouponsCountArgs>(
      args?: Subset<T, CouponsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CouponsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CouponsAggregateArgs>(args: Subset<T, CouponsAggregateArgs>): Prisma.PrismaPromise<GetCouponsAggregateType<T>>

    /**
     * Group by Coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CouponsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CouponsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CouponsGroupByArgs['orderBy'] }
        : { orderBy?: CouponsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CouponsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCouponsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coupons model
   */
  readonly fields: CouponsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coupons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CouponsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Coupons model
   */ 
  interface CouponsFieldRefs {
    readonly id: FieldRef<"Coupons", 'String'>
    readonly user_id: FieldRef<"Coupons", 'String'>
    readonly code: FieldRef<"Coupons", 'String'>
    readonly description: FieldRef<"Coupons", 'String'>
    readonly discount: FieldRef<"Coupons", 'Float'>
    readonly status: FieldRef<"Coupons", 'Statu_Promotion'>
    readonly start_date: FieldRef<"Coupons", 'DateTime'>
    readonly end_date: FieldRef<"Coupons", 'DateTime'>
    readonly createAt: FieldRef<"Coupons", 'DateTime'>
    readonly updateAt: FieldRef<"Coupons", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Coupons findUnique
   */
  export type CouponsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where: CouponsWhereUniqueInput
  }

  /**
   * Coupons findUniqueOrThrow
   */
  export type CouponsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where: CouponsWhereUniqueInput
  }

  /**
   * Coupons findFirst
   */
  export type CouponsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where?: CouponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponsOrderByWithRelationInput | CouponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coupons.
     */
    cursor?: CouponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coupons.
     */
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * Coupons findFirstOrThrow
   */
  export type CouponsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where?: CouponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponsOrderByWithRelationInput | CouponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coupons.
     */
    cursor?: CouponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coupons.
     */
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * Coupons findMany
   */
  export type CouponsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter, which Coupons to fetch.
     */
    where?: CouponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coupons to fetch.
     */
    orderBy?: CouponsOrderByWithRelationInput | CouponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coupons.
     */
    cursor?: CouponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coupons.
     */
    skip?: number
    distinct?: CouponsScalarFieldEnum | CouponsScalarFieldEnum[]
  }

  /**
   * Coupons create
   */
  export type CouponsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * The data needed to create a Coupons.
     */
    data: XOR<CouponsCreateInput, CouponsUncheckedCreateInput>
  }

  /**
   * Coupons createMany
   */
  export type CouponsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coupons.
     */
    data: CouponsCreateManyInput | CouponsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coupons update
   */
  export type CouponsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * The data needed to update a Coupons.
     */
    data: XOR<CouponsUpdateInput, CouponsUncheckedUpdateInput>
    /**
     * Choose, which Coupons to update.
     */
    where: CouponsWhereUniqueInput
  }

  /**
   * Coupons updateMany
   */
  export type CouponsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coupons.
     */
    data: XOR<CouponsUpdateManyMutationInput, CouponsUncheckedUpdateManyInput>
    /**
     * Filter which Coupons to update
     */
    where?: CouponsWhereInput
    /**
     * Limit how many Coupons to update.
     */
    limit?: number
  }

  /**
   * Coupons upsert
   */
  export type CouponsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * The filter to search for the Coupons to update in case it exists.
     */
    where: CouponsWhereUniqueInput
    /**
     * In case the Coupons found by the `where` argument doesn't exist, create a new Coupons with this data.
     */
    create: XOR<CouponsCreateInput, CouponsUncheckedCreateInput>
    /**
     * In case the Coupons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CouponsUpdateInput, CouponsUncheckedUpdateInput>
  }

  /**
   * Coupons delete
   */
  export type CouponsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
    /**
     * Filter which Coupons to delete.
     */
    where: CouponsWhereUniqueInput
  }

  /**
   * Coupons deleteMany
   */
  export type CouponsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coupons to delete
     */
    where?: CouponsWhereInput
    /**
     * Limit how many Coupons to delete.
     */
    limit?: number
  }

  /**
   * Coupons without action
   */
  export type CouponsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupons
     */
    select?: CouponsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coupons
     */
    omit?: CouponsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CouponsInclude<ExtArgs> | null
  }


  /**
   * Model CarType
   */

  export type AggregateCarType = {
    _count: CarTypeCountAggregateOutputType | null
    _min: CarTypeMinAggregateOutputType | null
    _max: CarTypeMaxAggregateOutputType | null
  }

  export type CarTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarTypeCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarTypeMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarTypeMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarTypeCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarType to aggregate.
     */
    where?: CarTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarTypes to fetch.
     */
    orderBy?: CarTypeOrderByWithRelationInput | CarTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CarTypes
    **/
    _count?: true | CarTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarTypeMaxAggregateInputType
  }

  export type GetCarTypeAggregateType<T extends CarTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateCarType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarType[P]>
      : GetScalarType<T[P], AggregateCarType[P]>
  }




  export type CarTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarTypeWhereInput
    orderBy?: CarTypeOrderByWithAggregationInput | CarTypeOrderByWithAggregationInput[]
    by: CarTypeScalarFieldEnum[] | CarTypeScalarFieldEnum
    having?: CarTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarTypeCountAggregateInputType | true
    _min?: CarTypeMinAggregateInputType
    _max?: CarTypeMaxAggregateInputType
  }

  export type CarTypeGroupByOutputType = {
    id: string
    name: string
    icon: string
    createdAt: Date
    updatedAt: Date
    _count: CarTypeCountAggregateOutputType | null
    _min: CarTypeMinAggregateOutputType | null
    _max: CarTypeMaxAggregateOutputType | null
  }

  type GetCarTypeGroupByPayload<T extends CarTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarTypeGroupByOutputType[P]>
            : GetScalarType<T[P], CarTypeGroupByOutputType[P]>
        }
      >
    >


  export type CarTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    car?: boolean | CarType$carArgs<ExtArgs>
    _count?: boolean | CarTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carType"]>



  export type CarTypeSelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CarTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "icon" | "createdAt" | "updatedAt", ExtArgs["result"]["carType"]>
  export type CarTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | CarType$carArgs<ExtArgs>
    _count?: boolean | CarTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CarTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CarType"
    objects: {
      car: Prisma.$CarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      icon: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["carType"]>
    composites: {}
  }

  type CarTypeGetPayload<S extends boolean | null | undefined | CarTypeDefaultArgs> = $Result.GetResult<Prisma.$CarTypePayload, S>

  type CarTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarTypeCountAggregateInputType | true
    }

  export interface CarTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CarType'], meta: { name: 'CarType' } }
    /**
     * Find zero or one CarType that matches the filter.
     * @param {CarTypeFindUniqueArgs} args - Arguments to find a CarType
     * @example
     * // Get one CarType
     * const carType = await prisma.carType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarTypeFindUniqueArgs>(args: SelectSubset<T, CarTypeFindUniqueArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CarType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarTypeFindUniqueOrThrowArgs} args - Arguments to find a CarType
     * @example
     * // Get one CarType
     * const carType = await prisma.carType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, CarTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CarType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeFindFirstArgs} args - Arguments to find a CarType
     * @example
     * // Get one CarType
     * const carType = await prisma.carType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarTypeFindFirstArgs>(args?: SelectSubset<T, CarTypeFindFirstArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CarType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeFindFirstOrThrowArgs} args - Arguments to find a CarType
     * @example
     * // Get one CarType
     * const carType = await prisma.carType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, CarTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CarTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CarTypes
     * const carTypes = await prisma.carType.findMany()
     * 
     * // Get first 10 CarTypes
     * const carTypes = await prisma.carType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carTypeWithIdOnly = await prisma.carType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarTypeFindManyArgs>(args?: SelectSubset<T, CarTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CarType.
     * @param {CarTypeCreateArgs} args - Arguments to create a CarType.
     * @example
     * // Create one CarType
     * const CarType = await prisma.carType.create({
     *   data: {
     *     // ... data to create a CarType
     *   }
     * })
     * 
     */
    create<T extends CarTypeCreateArgs>(args: SelectSubset<T, CarTypeCreateArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CarTypes.
     * @param {CarTypeCreateManyArgs} args - Arguments to create many CarTypes.
     * @example
     * // Create many CarTypes
     * const carType = await prisma.carType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarTypeCreateManyArgs>(args?: SelectSubset<T, CarTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CarType.
     * @param {CarTypeDeleteArgs} args - Arguments to delete one CarType.
     * @example
     * // Delete one CarType
     * const CarType = await prisma.carType.delete({
     *   where: {
     *     // ... filter to delete one CarType
     *   }
     * })
     * 
     */
    delete<T extends CarTypeDeleteArgs>(args: SelectSubset<T, CarTypeDeleteArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CarType.
     * @param {CarTypeUpdateArgs} args - Arguments to update one CarType.
     * @example
     * // Update one CarType
     * const carType = await prisma.carType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarTypeUpdateArgs>(args: SelectSubset<T, CarTypeUpdateArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CarTypes.
     * @param {CarTypeDeleteManyArgs} args - Arguments to filter CarTypes to delete.
     * @example
     * // Delete a few CarTypes
     * const { count } = await prisma.carType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarTypeDeleteManyArgs>(args?: SelectSubset<T, CarTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CarTypes
     * const carType = await prisma.carType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarTypeUpdateManyArgs>(args: SelectSubset<T, CarTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CarType.
     * @param {CarTypeUpsertArgs} args - Arguments to update or create a CarType.
     * @example
     * // Update or create a CarType
     * const carType = await prisma.carType.upsert({
     *   create: {
     *     // ... data to create a CarType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CarType we want to update
     *   }
     * })
     */
    upsert<T extends CarTypeUpsertArgs>(args: SelectSubset<T, CarTypeUpsertArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CarTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeCountArgs} args - Arguments to filter CarTypes to count.
     * @example
     * // Count the number of CarTypes
     * const count = await prisma.carType.count({
     *   where: {
     *     // ... the filter for the CarTypes we want to count
     *   }
     * })
    **/
    count<T extends CarTypeCountArgs>(
      args?: Subset<T, CarTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CarType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarTypeAggregateArgs>(args: Subset<T, CarTypeAggregateArgs>): Prisma.PrismaPromise<GetCarTypeAggregateType<T>>

    /**
     * Group by CarType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarTypeGroupByArgs['orderBy'] }
        : { orderBy?: CarTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CarType model
   */
  readonly fields: CarTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CarType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    car<T extends CarType$carArgs<ExtArgs> = {}>(args?: Subset<T, CarType$carArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CarType model
   */ 
  interface CarTypeFieldRefs {
    readonly id: FieldRef<"CarType", 'String'>
    readonly name: FieldRef<"CarType", 'String'>
    readonly icon: FieldRef<"CarType", 'String'>
    readonly createdAt: FieldRef<"CarType", 'DateTime'>
    readonly updatedAt: FieldRef<"CarType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CarType findUnique
   */
  export type CarTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter, which CarType to fetch.
     */
    where: CarTypeWhereUniqueInput
  }

  /**
   * CarType findUniqueOrThrow
   */
  export type CarTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter, which CarType to fetch.
     */
    where: CarTypeWhereUniqueInput
  }

  /**
   * CarType findFirst
   */
  export type CarTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter, which CarType to fetch.
     */
    where?: CarTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarTypes to fetch.
     */
    orderBy?: CarTypeOrderByWithRelationInput | CarTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarTypes.
     */
    cursor?: CarTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarTypes.
     */
    distinct?: CarTypeScalarFieldEnum | CarTypeScalarFieldEnum[]
  }

  /**
   * CarType findFirstOrThrow
   */
  export type CarTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter, which CarType to fetch.
     */
    where?: CarTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarTypes to fetch.
     */
    orderBy?: CarTypeOrderByWithRelationInput | CarTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CarTypes.
     */
    cursor?: CarTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CarTypes.
     */
    distinct?: CarTypeScalarFieldEnum | CarTypeScalarFieldEnum[]
  }

  /**
   * CarType findMany
   */
  export type CarTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter, which CarTypes to fetch.
     */
    where?: CarTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CarTypes to fetch.
     */
    orderBy?: CarTypeOrderByWithRelationInput | CarTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CarTypes.
     */
    cursor?: CarTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CarTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CarTypes.
     */
    skip?: number
    distinct?: CarTypeScalarFieldEnum | CarTypeScalarFieldEnum[]
  }

  /**
   * CarType create
   */
  export type CarTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a CarType.
     */
    data: XOR<CarTypeCreateInput, CarTypeUncheckedCreateInput>
  }

  /**
   * CarType createMany
   */
  export type CarTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CarTypes.
     */
    data: CarTypeCreateManyInput | CarTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CarType update
   */
  export type CarTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a CarType.
     */
    data: XOR<CarTypeUpdateInput, CarTypeUncheckedUpdateInput>
    /**
     * Choose, which CarType to update.
     */
    where: CarTypeWhereUniqueInput
  }

  /**
   * CarType updateMany
   */
  export type CarTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CarTypes.
     */
    data: XOR<CarTypeUpdateManyMutationInput, CarTypeUncheckedUpdateManyInput>
    /**
     * Filter which CarTypes to update
     */
    where?: CarTypeWhereInput
    /**
     * Limit how many CarTypes to update.
     */
    limit?: number
  }

  /**
   * CarType upsert
   */
  export type CarTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the CarType to update in case it exists.
     */
    where: CarTypeWhereUniqueInput
    /**
     * In case the CarType found by the `where` argument doesn't exist, create a new CarType with this data.
     */
    create: XOR<CarTypeCreateInput, CarTypeUncheckedCreateInput>
    /**
     * In case the CarType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarTypeUpdateInput, CarTypeUncheckedUpdateInput>
  }

  /**
   * CarType delete
   */
  export type CarTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
    /**
     * Filter which CarType to delete.
     */
    where: CarTypeWhereUniqueInput
  }

  /**
   * CarType deleteMany
   */
  export type CarTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CarTypes to delete
     */
    where?: CarTypeWhereInput
    /**
     * Limit how many CarTypes to delete.
     */
    limit?: number
  }

  /**
   * CarType.car
   */
  export type CarType$carArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * CarType without action
   */
  export type CarTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarType
     */
    select?: CarTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CarType
     */
    omit?: CarTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarTypeInclude<ExtArgs> | null
  }


  /**
   * Model Insurance
   */

  export type AggregateInsurance = {
    _count: InsuranceCountAggregateOutputType | null
    _min: InsuranceMinAggregateOutputType | null
    _max: InsuranceMaxAggregateOutputType | null
  }

  export type InsuranceMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InsuranceCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InsuranceMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InsuranceCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InsuranceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insurance to aggregate.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Insurances
    **/
    _count?: true | InsuranceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsuranceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsuranceMaxAggregateInputType
  }

  export type GetInsuranceAggregateType<T extends InsuranceAggregateArgs> = {
        [P in keyof T & keyof AggregateInsurance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsurance[P]>
      : GetScalarType<T[P], AggregateInsurance[P]>
  }




  export type InsuranceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsuranceWhereInput
    orderBy?: InsuranceOrderByWithAggregationInput | InsuranceOrderByWithAggregationInput[]
    by: InsuranceScalarFieldEnum[] | InsuranceScalarFieldEnum
    having?: InsuranceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsuranceCountAggregateInputType | true
    _min?: InsuranceMinAggregateInputType
    _max?: InsuranceMaxAggregateInputType
  }

  export type InsuranceGroupByOutputType = {
    id: string
    name: string
    icon: string
    createdAt: Date
    updatedAt: Date
    _count: InsuranceCountAggregateOutputType | null
    _min: InsuranceMinAggregateOutputType | null
    _max: InsuranceMaxAggregateOutputType | null
  }

  type GetInsuranceGroupByPayload<T extends InsuranceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsuranceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsuranceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsuranceGroupByOutputType[P]>
            : GetScalarType<T[P], InsuranceGroupByOutputType[P]>
        }
      >
    >


  export type InsuranceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    car?: boolean | Insurance$carArgs<ExtArgs>
    _count?: boolean | InsuranceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insurance"]>



  export type InsuranceSelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InsuranceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "icon" | "createdAt" | "updatedAt", ExtArgs["result"]["insurance"]>
  export type InsuranceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    car?: boolean | Insurance$carArgs<ExtArgs>
    _count?: boolean | InsuranceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InsurancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Insurance"
    objects: {
      car: Prisma.$CarPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      icon: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["insurance"]>
    composites: {}
  }

  type InsuranceGetPayload<S extends boolean | null | undefined | InsuranceDefaultArgs> = $Result.GetResult<Prisma.$InsurancePayload, S>

  type InsuranceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsuranceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsuranceCountAggregateInputType | true
    }

  export interface InsuranceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Insurance'], meta: { name: 'Insurance' } }
    /**
     * Find zero or one Insurance that matches the filter.
     * @param {InsuranceFindUniqueArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsuranceFindUniqueArgs>(args: SelectSubset<T, InsuranceFindUniqueArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Insurance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsuranceFindUniqueOrThrowArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsuranceFindUniqueOrThrowArgs>(args: SelectSubset<T, InsuranceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Insurance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindFirstArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsuranceFindFirstArgs>(args?: SelectSubset<T, InsuranceFindFirstArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Insurance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindFirstOrThrowArgs} args - Arguments to find a Insurance
     * @example
     * // Get one Insurance
     * const insurance = await prisma.insurance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsuranceFindFirstOrThrowArgs>(args?: SelectSubset<T, InsuranceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Insurances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Insurances
     * const insurances = await prisma.insurance.findMany()
     * 
     * // Get first 10 Insurances
     * const insurances = await prisma.insurance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insuranceWithIdOnly = await prisma.insurance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsuranceFindManyArgs>(args?: SelectSubset<T, InsuranceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Insurance.
     * @param {InsuranceCreateArgs} args - Arguments to create a Insurance.
     * @example
     * // Create one Insurance
     * const Insurance = await prisma.insurance.create({
     *   data: {
     *     // ... data to create a Insurance
     *   }
     * })
     * 
     */
    create<T extends InsuranceCreateArgs>(args: SelectSubset<T, InsuranceCreateArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Insurances.
     * @param {InsuranceCreateManyArgs} args - Arguments to create many Insurances.
     * @example
     * // Create many Insurances
     * const insurance = await prisma.insurance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsuranceCreateManyArgs>(args?: SelectSubset<T, InsuranceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Insurance.
     * @param {InsuranceDeleteArgs} args - Arguments to delete one Insurance.
     * @example
     * // Delete one Insurance
     * const Insurance = await prisma.insurance.delete({
     *   where: {
     *     // ... filter to delete one Insurance
     *   }
     * })
     * 
     */
    delete<T extends InsuranceDeleteArgs>(args: SelectSubset<T, InsuranceDeleteArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Insurance.
     * @param {InsuranceUpdateArgs} args - Arguments to update one Insurance.
     * @example
     * // Update one Insurance
     * const insurance = await prisma.insurance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsuranceUpdateArgs>(args: SelectSubset<T, InsuranceUpdateArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Insurances.
     * @param {InsuranceDeleteManyArgs} args - Arguments to filter Insurances to delete.
     * @example
     * // Delete a few Insurances
     * const { count } = await prisma.insurance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsuranceDeleteManyArgs>(args?: SelectSubset<T, InsuranceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insurances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Insurances
     * const insurance = await prisma.insurance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsuranceUpdateManyArgs>(args: SelectSubset<T, InsuranceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Insurance.
     * @param {InsuranceUpsertArgs} args - Arguments to update or create a Insurance.
     * @example
     * // Update or create a Insurance
     * const insurance = await prisma.insurance.upsert({
     *   create: {
     *     // ... data to create a Insurance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Insurance we want to update
     *   }
     * })
     */
    upsert<T extends InsuranceUpsertArgs>(args: SelectSubset<T, InsuranceUpsertArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Insurances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceCountArgs} args - Arguments to filter Insurances to count.
     * @example
     * // Count the number of Insurances
     * const count = await prisma.insurance.count({
     *   where: {
     *     // ... the filter for the Insurances we want to count
     *   }
     * })
    **/
    count<T extends InsuranceCountArgs>(
      args?: Subset<T, InsuranceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsuranceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Insurance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsuranceAggregateArgs>(args: Subset<T, InsuranceAggregateArgs>): Prisma.PrismaPromise<GetInsuranceAggregateType<T>>

    /**
     * Group by Insurance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsuranceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsuranceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsuranceGroupByArgs['orderBy'] }
        : { orderBy?: InsuranceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsuranceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsuranceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Insurance model
   */
  readonly fields: InsuranceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Insurance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsuranceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    car<T extends Insurance$carArgs<ExtArgs> = {}>(args?: Subset<T, Insurance$carArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Insurance model
   */ 
  interface InsuranceFieldRefs {
    readonly id: FieldRef<"Insurance", 'String'>
    readonly name: FieldRef<"Insurance", 'String'>
    readonly icon: FieldRef<"Insurance", 'String'>
    readonly createdAt: FieldRef<"Insurance", 'DateTime'>
    readonly updatedAt: FieldRef<"Insurance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Insurance findUnique
   */
  export type InsuranceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance findUniqueOrThrow
   */
  export type InsuranceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance findFirst
   */
  export type InsuranceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insurances.
     */
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance findFirstOrThrow
   */
  export type InsuranceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurance to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insurances.
     */
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance findMany
   */
  export type InsuranceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter, which Insurances to fetch.
     */
    where?: InsuranceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insurances to fetch.
     */
    orderBy?: InsuranceOrderByWithRelationInput | InsuranceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Insurances.
     */
    cursor?: InsuranceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insurances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insurances.
     */
    skip?: number
    distinct?: InsuranceScalarFieldEnum | InsuranceScalarFieldEnum[]
  }

  /**
   * Insurance create
   */
  export type InsuranceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The data needed to create a Insurance.
     */
    data: XOR<InsuranceCreateInput, InsuranceUncheckedCreateInput>
  }

  /**
   * Insurance createMany
   */
  export type InsuranceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Insurances.
     */
    data: InsuranceCreateManyInput | InsuranceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Insurance update
   */
  export type InsuranceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The data needed to update a Insurance.
     */
    data: XOR<InsuranceUpdateInput, InsuranceUncheckedUpdateInput>
    /**
     * Choose, which Insurance to update.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance updateMany
   */
  export type InsuranceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Insurances.
     */
    data: XOR<InsuranceUpdateManyMutationInput, InsuranceUncheckedUpdateManyInput>
    /**
     * Filter which Insurances to update
     */
    where?: InsuranceWhereInput
    /**
     * Limit how many Insurances to update.
     */
    limit?: number
  }

  /**
   * Insurance upsert
   */
  export type InsuranceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * The filter to search for the Insurance to update in case it exists.
     */
    where: InsuranceWhereUniqueInput
    /**
     * In case the Insurance found by the `where` argument doesn't exist, create a new Insurance with this data.
     */
    create: XOR<InsuranceCreateInput, InsuranceUncheckedCreateInput>
    /**
     * In case the Insurance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsuranceUpdateInput, InsuranceUncheckedUpdateInput>
  }

  /**
   * Insurance delete
   */
  export type InsuranceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
    /**
     * Filter which Insurance to delete.
     */
    where: InsuranceWhereUniqueInput
  }

  /**
   * Insurance deleteMany
   */
  export type InsuranceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insurances to delete
     */
    where?: InsuranceWhereInput
    /**
     * Limit how many Insurances to delete.
     */
    limit?: number
  }

  /**
   * Insurance.car
   */
  export type Insurance$carArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Insurance without action
   */
  export type InsuranceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insurance
     */
    select?: InsuranceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insurance
     */
    omit?: InsuranceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsuranceInclude<ExtArgs> | null
  }


  /**
   * Model Bank
   */

  export type AggregateBank = {
    _count: BankCountAggregateOutputType | null
    _min: BankMinAggregateOutputType | null
    _max: BankMaxAggregateOutputType | null
  }

  export type BankMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BankMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bank to aggregate.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: BankOrderByWithRelationInput | BankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Banks
    **/
    _count?: true | BankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankMaxAggregateInputType
  }

  export type GetBankAggregateType<T extends BankAggregateArgs> = {
        [P in keyof T & keyof AggregateBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBank[P]>
      : GetScalarType<T[P], AggregateBank[P]>
  }




  export type BankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankWhereInput
    orderBy?: BankOrderByWithAggregationInput | BankOrderByWithAggregationInput[]
    by: BankScalarFieldEnum[] | BankScalarFieldEnum
    having?: BankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankCountAggregateInputType | true
    _min?: BankMinAggregateInputType
    _max?: BankMaxAggregateInputType
  }

  export type BankGroupByOutputType = {
    id: string
    name: string
    icon: string
    image: string
    createdAt: Date
    updatedAt: Date
    _count: BankCountAggregateOutputType | null
    _min: BankMinAggregateOutputType | null
    _max: BankMaxAggregateOutputType | null
  }

  type GetBankGroupByPayload<T extends BankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankGroupByOutputType[P]>
            : GetScalarType<T[P], BankGroupByOutputType[P]>
        }
      >
    >


  export type BankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rental?: boolean | Bank$rentalArgs<ExtArgs>
    _count?: boolean | BankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bank"]>



  export type BankSelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "icon" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["bank"]>
  export type BankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | Bank$rentalArgs<ExtArgs>
    _count?: boolean | BankCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bank"
    objects: {
      rental: Prisma.$RentalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      icon: string
      image: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bank"]>
    composites: {}
  }

  type BankGetPayload<S extends boolean | null | undefined | BankDefaultArgs> = $Result.GetResult<Prisma.$BankPayload, S>

  type BankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BankCountAggregateInputType | true
    }

  export interface BankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bank'], meta: { name: 'Bank' } }
    /**
     * Find zero or one Bank that matches the filter.
     * @param {BankFindUniqueArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankFindUniqueArgs>(args: SelectSubset<T, BankFindUniqueArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Bank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BankFindUniqueOrThrowArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankFindUniqueOrThrowArgs>(args: SelectSubset<T, BankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Bank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindFirstArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankFindFirstArgs>(args?: SelectSubset<T, BankFindFirstArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Bank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindFirstOrThrowArgs} args - Arguments to find a Bank
     * @example
     * // Get one Bank
     * const bank = await prisma.bank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankFindFirstOrThrowArgs>(args?: SelectSubset<T, BankFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Banks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banks
     * const banks = await prisma.bank.findMany()
     * 
     * // Get first 10 Banks
     * const banks = await prisma.bank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankWithIdOnly = await prisma.bank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankFindManyArgs>(args?: SelectSubset<T, BankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Bank.
     * @param {BankCreateArgs} args - Arguments to create a Bank.
     * @example
     * // Create one Bank
     * const Bank = await prisma.bank.create({
     *   data: {
     *     // ... data to create a Bank
     *   }
     * })
     * 
     */
    create<T extends BankCreateArgs>(args: SelectSubset<T, BankCreateArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Banks.
     * @param {BankCreateManyArgs} args - Arguments to create many Banks.
     * @example
     * // Create many Banks
     * const bank = await prisma.bank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankCreateManyArgs>(args?: SelectSubset<T, BankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bank.
     * @param {BankDeleteArgs} args - Arguments to delete one Bank.
     * @example
     * // Delete one Bank
     * const Bank = await prisma.bank.delete({
     *   where: {
     *     // ... filter to delete one Bank
     *   }
     * })
     * 
     */
    delete<T extends BankDeleteArgs>(args: SelectSubset<T, BankDeleteArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Bank.
     * @param {BankUpdateArgs} args - Arguments to update one Bank.
     * @example
     * // Update one Bank
     * const bank = await prisma.bank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankUpdateArgs>(args: SelectSubset<T, BankUpdateArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Banks.
     * @param {BankDeleteManyArgs} args - Arguments to filter Banks to delete.
     * @example
     * // Delete a few Banks
     * const { count } = await prisma.bank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankDeleteManyArgs>(args?: SelectSubset<T, BankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banks
     * const bank = await prisma.bank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankUpdateManyArgs>(args: SelectSubset<T, BankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bank.
     * @param {BankUpsertArgs} args - Arguments to update or create a Bank.
     * @example
     * // Update or create a Bank
     * const bank = await prisma.bank.upsert({
     *   create: {
     *     // ... data to create a Bank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bank we want to update
     *   }
     * })
     */
    upsert<T extends BankUpsertArgs>(args: SelectSubset<T, BankUpsertArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankCountArgs} args - Arguments to filter Banks to count.
     * @example
     * // Count the number of Banks
     * const count = await prisma.bank.count({
     *   where: {
     *     // ... the filter for the Banks we want to count
     *   }
     * })
    **/
    count<T extends BankCountArgs>(
      args?: Subset<T, BankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankAggregateArgs>(args: Subset<T, BankAggregateArgs>): Prisma.PrismaPromise<GetBankAggregateType<T>>

    /**
     * Group by Bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankGroupByArgs['orderBy'] }
        : { orderBy?: BankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bank model
   */
  readonly fields: BankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rental<T extends Bank$rentalArgs<ExtArgs> = {}>(args?: Subset<T, Bank$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bank model
   */ 
  interface BankFieldRefs {
    readonly id: FieldRef<"Bank", 'String'>
    readonly name: FieldRef<"Bank", 'String'>
    readonly icon: FieldRef<"Bank", 'String'>
    readonly image: FieldRef<"Bank", 'String'>
    readonly createdAt: FieldRef<"Bank", 'DateTime'>
    readonly updatedAt: FieldRef<"Bank", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bank findUnique
   */
  export type BankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter, which Bank to fetch.
     */
    where: BankWhereUniqueInput
  }

  /**
   * Bank findUniqueOrThrow
   */
  export type BankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter, which Bank to fetch.
     */
    where: BankWhereUniqueInput
  }

  /**
   * Bank findFirst
   */
  export type BankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter, which Bank to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: BankOrderByWithRelationInput | BankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banks.
     */
    distinct?: BankScalarFieldEnum | BankScalarFieldEnum[]
  }

  /**
   * Bank findFirstOrThrow
   */
  export type BankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter, which Bank to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: BankOrderByWithRelationInput | BankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banks.
     */
    distinct?: BankScalarFieldEnum | BankScalarFieldEnum[]
  }

  /**
   * Bank findMany
   */
  export type BankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter, which Banks to fetch.
     */
    where?: BankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banks to fetch.
     */
    orderBy?: BankOrderByWithRelationInput | BankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Banks.
     */
    cursor?: BankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banks.
     */
    skip?: number
    distinct?: BankScalarFieldEnum | BankScalarFieldEnum[]
  }

  /**
   * Bank create
   */
  export type BankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * The data needed to create a Bank.
     */
    data: XOR<BankCreateInput, BankUncheckedCreateInput>
  }

  /**
   * Bank createMany
   */
  export type BankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Banks.
     */
    data: BankCreateManyInput | BankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bank update
   */
  export type BankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * The data needed to update a Bank.
     */
    data: XOR<BankUpdateInput, BankUncheckedUpdateInput>
    /**
     * Choose, which Bank to update.
     */
    where: BankWhereUniqueInput
  }

  /**
   * Bank updateMany
   */
  export type BankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Banks.
     */
    data: XOR<BankUpdateManyMutationInput, BankUncheckedUpdateManyInput>
    /**
     * Filter which Banks to update
     */
    where?: BankWhereInput
    /**
     * Limit how many Banks to update.
     */
    limit?: number
  }

  /**
   * Bank upsert
   */
  export type BankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * The filter to search for the Bank to update in case it exists.
     */
    where: BankWhereUniqueInput
    /**
     * In case the Bank found by the `where` argument doesn't exist, create a new Bank with this data.
     */
    create: XOR<BankCreateInput, BankUncheckedCreateInput>
    /**
     * In case the Bank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankUpdateInput, BankUncheckedUpdateInput>
  }

  /**
   * Bank delete
   */
  export type BankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
    /**
     * Filter which Bank to delete.
     */
    where: BankWhereUniqueInput
  }

  /**
   * Bank deleteMany
   */
  export type BankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Banks to delete
     */
    where?: BankWhereInput
    /**
     * Limit how many Banks to delete.
     */
    limit?: number
  }

  /**
   * Bank.rental
   */
  export type Bank$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Bank without action
   */
  export type BankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bank
     */
    select?: BankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bank
     */
    omit?: BankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankInclude<ExtArgs> | null
  }


  /**
   * Model Car
   */

  export type AggregateCar = {
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  export type CarAvgAggregateOutputType = {
    price: number | null
  }

  export type CarSumAggregateOutputType = {
    price: number | null
  }

  export type CarMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    year: string | null
    plate_city: string | null
    plate_text: string | null
    plate_number: string | null
    gps: string | null
    car_seat: string | null
    car_gear: string | null
    color: string | null
    status: string | null
    price: number | null
    carTypeId: string | null
    insuranceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    year: string | null
    plate_city: string | null
    plate_text: string | null
    plate_number: string | null
    gps: string | null
    car_seat: string | null
    car_gear: string | null
    color: string | null
    status: string | null
    price: number | null
    carTypeId: string | null
    insuranceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CarCountAggregateOutputType = {
    id: number
    name: number
    image: number
    year: number
    plate_city: number
    plate_text: number
    plate_number: number
    gps: number
    car_seat: number
    car_gear: number
    color: number
    status: number
    price: number
    carTypeId: number
    insuranceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CarAvgAggregateInputType = {
    price?: true
  }

  export type CarSumAggregateInputType = {
    price?: true
  }

  export type CarMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    year?: true
    plate_city?: true
    plate_text?: true
    plate_number?: true
    gps?: true
    car_seat?: true
    car_gear?: true
    color?: true
    status?: true
    price?: true
    carTypeId?: true
    insuranceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    year?: true
    plate_city?: true
    plate_text?: true
    plate_number?: true
    gps?: true
    car_seat?: true
    car_gear?: true
    color?: true
    status?: true
    price?: true
    carTypeId?: true
    insuranceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CarCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    year?: true
    plate_city?: true
    plate_text?: true
    plate_number?: true
    gps?: true
    car_seat?: true
    car_gear?: true
    color?: true
    status?: true
    price?: true
    carTypeId?: true
    insuranceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Car to aggregate.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cars
    **/
    _count?: true | CarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarMaxAggregateInputType
  }

  export type GetCarAggregateType<T extends CarAggregateArgs> = {
        [P in keyof T & keyof AggregateCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCar[P]>
      : GetScalarType<T[P], AggregateCar[P]>
  }




  export type CarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
    orderBy?: CarOrderByWithAggregationInput | CarOrderByWithAggregationInput[]
    by: CarScalarFieldEnum[] | CarScalarFieldEnum
    having?: CarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCountAggregateInputType | true
    _avg?: CarAvgAggregateInputType
    _sum?: CarSumAggregateInputType
    _min?: CarMinAggregateInputType
    _max?: CarMaxAggregateInputType
  }

  export type CarGroupByOutputType = {
    id: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    insuranceId: string
    createdAt: Date
    updatedAt: Date
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  type GetCarGroupByPayload<T extends CarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarGroupByOutputType[P]>
            : GetScalarType<T[P], CarGroupByOutputType[P]>
        }
      >
    >


  export type CarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    year?: boolean
    plate_city?: boolean
    plate_text?: boolean
    plate_number?: boolean
    gps?: boolean
    car_seat?: boolean
    car_gear?: boolean
    color?: boolean
    status?: boolean
    price?: boolean
    carTypeId?: boolean
    insuranceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    carType?: boolean | CarTypeDefaultArgs<ExtArgs>
    insurance?: boolean | InsuranceDefaultArgs<ExtArgs>
    rental?: boolean | Car$rentalArgs<ExtArgs>
    review?: boolean | Car$reviewArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["car"]>



  export type CarSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    year?: boolean
    plate_city?: boolean
    plate_text?: boolean
    plate_number?: boolean
    gps?: boolean
    car_seat?: boolean
    car_gear?: boolean
    color?: boolean
    status?: boolean
    price?: boolean
    carTypeId?: boolean
    insuranceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "year" | "plate_city" | "plate_text" | "plate_number" | "gps" | "car_seat" | "car_gear" | "color" | "status" | "price" | "carTypeId" | "insuranceId" | "createdAt" | "updatedAt", ExtArgs["result"]["car"]>
  export type CarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carType?: boolean | CarTypeDefaultArgs<ExtArgs>
    insurance?: boolean | InsuranceDefaultArgs<ExtArgs>
    rental?: boolean | Car$rentalArgs<ExtArgs>
    review?: boolean | Car$reviewArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Car"
    objects: {
      carType: Prisma.$CarTypePayload<ExtArgs>
      insurance: Prisma.$InsurancePayload<ExtArgs>
      rental: Prisma.$RentalPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      image: string
      year: string
      plate_city: string
      plate_text: string
      plate_number: string
      gps: string
      car_seat: string
      car_gear: string
      color: string
      status: string
      price: number
      carTypeId: string
      insuranceId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["car"]>
    composites: {}
  }

  type CarGetPayload<S extends boolean | null | undefined | CarDefaultArgs> = $Result.GetResult<Prisma.$CarPayload, S>

  type CarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CarCountAggregateInputType | true
    }

  export interface CarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Car'], meta: { name: 'Car' } }
    /**
     * Find zero or one Car that matches the filter.
     * @param {CarFindUniqueArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CarFindUniqueArgs>(args: SelectSubset<T, CarFindUniqueArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Car that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CarFindUniqueOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CarFindUniqueOrThrowArgs>(args: SelectSubset<T, CarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Car that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CarFindFirstArgs>(args?: SelectSubset<T, CarFindFirstArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Car that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CarFindFirstOrThrowArgs>(args?: SelectSubset<T, CarFindFirstOrThrowArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.car.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.car.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carWithIdOnly = await prisma.car.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CarFindManyArgs>(args?: SelectSubset<T, CarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Car.
     * @param {CarCreateArgs} args - Arguments to create a Car.
     * @example
     * // Create one Car
     * const Car = await prisma.car.create({
     *   data: {
     *     // ... data to create a Car
     *   }
     * })
     * 
     */
    create<T extends CarCreateArgs>(args: SelectSubset<T, CarCreateArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Cars.
     * @param {CarCreateManyArgs} args - Arguments to create many Cars.
     * @example
     * // Create many Cars
     * const car = await prisma.car.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CarCreateManyArgs>(args?: SelectSubset<T, CarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Car.
     * @param {CarDeleteArgs} args - Arguments to delete one Car.
     * @example
     * // Delete one Car
     * const Car = await prisma.car.delete({
     *   where: {
     *     // ... filter to delete one Car
     *   }
     * })
     * 
     */
    delete<T extends CarDeleteArgs>(args: SelectSubset<T, CarDeleteArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Car.
     * @param {CarUpdateArgs} args - Arguments to update one Car.
     * @example
     * // Update one Car
     * const car = await prisma.car.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CarUpdateArgs>(args: SelectSubset<T, CarUpdateArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Cars.
     * @param {CarDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.car.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CarDeleteManyArgs>(args?: SelectSubset<T, CarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const car = await prisma.car.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CarUpdateManyArgs>(args: SelectSubset<T, CarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Car.
     * @param {CarUpsertArgs} args - Arguments to update or create a Car.
     * @example
     * // Update or create a Car
     * const car = await prisma.car.upsert({
     *   create: {
     *     // ... data to create a Car
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Car we want to update
     *   }
     * })
     */
    upsert<T extends CarUpsertArgs>(args: SelectSubset<T, CarUpsertArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.car.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends CarCountArgs>(
      args?: Subset<T, CarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarAggregateArgs>(args: Subset<T, CarAggregateArgs>): Prisma.PrismaPromise<GetCarAggregateType<T>>

    /**
     * Group by Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarGroupByArgs['orderBy'] }
        : { orderBy?: CarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Car model
   */
  readonly fields: CarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Car.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    carType<T extends CarTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarTypeDefaultArgs<ExtArgs>>): Prisma__CarTypeClient<$Result.GetResult<Prisma.$CarTypePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    insurance<T extends InsuranceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InsuranceDefaultArgs<ExtArgs>>): Prisma__InsuranceClient<$Result.GetResult<Prisma.$InsurancePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    rental<T extends Car$rentalArgs<ExtArgs> = {}>(args?: Subset<T, Car$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    review<T extends Car$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Car$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Car model
   */ 
  interface CarFieldRefs {
    readonly id: FieldRef<"Car", 'String'>
    readonly name: FieldRef<"Car", 'String'>
    readonly image: FieldRef<"Car", 'String'>
    readonly year: FieldRef<"Car", 'String'>
    readonly plate_city: FieldRef<"Car", 'String'>
    readonly plate_text: FieldRef<"Car", 'String'>
    readonly plate_number: FieldRef<"Car", 'String'>
    readonly gps: FieldRef<"Car", 'String'>
    readonly car_seat: FieldRef<"Car", 'String'>
    readonly car_gear: FieldRef<"Car", 'String'>
    readonly color: FieldRef<"Car", 'String'>
    readonly status: FieldRef<"Car", 'String'>
    readonly price: FieldRef<"Car", 'Float'>
    readonly carTypeId: FieldRef<"Car", 'String'>
    readonly insuranceId: FieldRef<"Car", 'String'>
    readonly createdAt: FieldRef<"Car", 'DateTime'>
    readonly updatedAt: FieldRef<"Car", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Car findUnique
   */
  export type CarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car findUniqueOrThrow
   */
  export type CarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car findFirst
   */
  export type CarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car findFirstOrThrow
   */
  export type CarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car findMany
   */
  export type CarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Cars to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: CarOrderByWithRelationInput | CarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    distinct?: CarScalarFieldEnum | CarScalarFieldEnum[]
  }

  /**
   * Car create
   */
  export type CarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to create a Car.
     */
    data: XOR<CarCreateInput, CarUncheckedCreateInput>
  }

  /**
   * Car createMany
   */
  export type CarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cars.
     */
    data: CarCreateManyInput | CarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Car update
   */
  export type CarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to update a Car.
     */
    data: XOR<CarUpdateInput, CarUncheckedUpdateInput>
    /**
     * Choose, which Car to update.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car updateMany
   */
  export type CarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cars.
     */
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     */
    where?: CarWhereInput
    /**
     * Limit how many Cars to update.
     */
    limit?: number
  }

  /**
   * Car upsert
   */
  export type CarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The filter to search for the Car to update in case it exists.
     */
    where: CarWhereUniqueInput
    /**
     * In case the Car found by the `where` argument doesn't exist, create a new Car with this data.
     */
    create: XOR<CarCreateInput, CarUncheckedCreateInput>
    /**
     * In case the Car was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarUpdateInput, CarUncheckedUpdateInput>
  }

  /**
   * Car delete
   */
  export type CarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter which Car to delete.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car deleteMany
   */
  export type CarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cars to delete
     */
    where?: CarWhereInput
    /**
     * Limit how many Cars to delete.
     */
    limit?: number
  }

  /**
   * Car.rental
   */
  export type Car$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Car.review
   */
  export type Car$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Car without action
   */
  export type CarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Car
     */
    omit?: CarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    carPoint: number | null
    emplyPoint: number | null
  }

  export type ReviewSumAggregateOutputType = {
    carPoint: number | null
    emplyPoint: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    comment: string | null
    carPoint: number | null
    emplyPoint: number | null
    emplyId: string | null
    carId: string | null
    rentalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    comment: string | null
    carPoint: number | null
    emplyPoint: number | null
    emplyId: string | null
    carId: string | null
    rentalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    comment: number
    carPoint: number
    emplyPoint: number
    emplyId: number
    carId: number
    rentalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    carPoint?: true
    emplyPoint?: true
  }

  export type ReviewSumAggregateInputType = {
    carPoint?: true
    emplyPoint?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    comment?: true
    carPoint?: true
    emplyPoint?: true
    emplyId?: true
    carId?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    comment?: true
    carPoint?: true
    emplyPoint?: true
    emplyId?: true
    carId?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    comment?: true
    carPoint?: true
    emplyPoint?: true
    emplyId?: true
    carId?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    carId: string
    rentalId: string
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    comment?: boolean
    carPoint?: boolean
    emplyPoint?: boolean
    emplyId?: boolean
    carId?: boolean
    rentalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rental?: boolean | RentalDefaultArgs<ExtArgs>
    emply?: boolean | EmployeesDefaultArgs<ExtArgs>
    car?: boolean | CarDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>



  export type ReviewSelectScalar = {
    id?: boolean
    comment?: boolean
    carPoint?: boolean
    emplyPoint?: boolean
    emplyId?: boolean
    carId?: boolean
    rentalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "comment" | "carPoint" | "emplyPoint" | "emplyId" | "carId" | "rentalId" | "createdAt" | "updatedAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | RentalDefaultArgs<ExtArgs>
    emply?: boolean | EmployeesDefaultArgs<ExtArgs>
    car?: boolean | CarDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      rental: Prisma.$RentalPayload<ExtArgs>
      emply: Prisma.$EmployeesPayload<ExtArgs>
      car: Prisma.$CarPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      comment: string
      carPoint: number
      emplyPoint: number
      emplyId: string
      carId: string
      rentalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rental<T extends RentalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RentalDefaultArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    emply<T extends EmployeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeesDefaultArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    car<T extends CarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarDefaultArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly carPoint: FieldRef<"Review", 'Int'>
    readonly emplyPoint: FieldRef<"Review", 'Int'>
    readonly emplyId: FieldRef<"Review", 'String'>
    readonly carId: FieldRef<"Review", 'String'>
    readonly rentalId: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    price: number | null
  }

  export type PaymentSumAggregateOutputType = {
    price: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    price: number | null
    image: string | null
    rentalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    price: number | null
    image: string | null
    rentalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    price: number
    image: number
    rentalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    price?: true
  }

  export type PaymentSumAggregateInputType = {
    price?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    price?: true
    image?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    price?: true
    image?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    price?: true
    image?: true
    rentalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment to aggregate.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type paymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithAggregationInput | paymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    price: number
    image: string
    rentalId: string
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends paymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    image?: boolean
    rentalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rental?: boolean | RentalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>



  export type paymentSelectScalar = {
    id?: boolean
    price?: boolean
    image?: boolean
    rentalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type paymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "price" | "image" | "rentalId" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type paymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | RentalDefaultArgs<ExtArgs>
  }

  export type $paymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment"
    objects: {
      rental: Prisma.$RentalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      price: number
      image: string
      rentalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type paymentGetPayload<S extends boolean | null | undefined | paymentDefaultArgs> = $Result.GetResult<Prisma.$paymentPayload, S>

  type paymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface paymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment'], meta: { name: 'payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentFindUniqueArgs>(args: SelectSubset<T, paymentFindUniqueArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentFindFirstArgs>(args?: SelectSubset<T, paymentFindFirstArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends paymentFindManyArgs>(args?: SelectSubset<T, paymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends paymentCreateArgs>(args: SelectSubset<T, paymentCreateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Payments.
     * @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentCreateManyArgs>(args?: SelectSubset<T, paymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends paymentDeleteArgs>(args: SelectSubset<T, paymentDeleteArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentUpdateArgs>(args: SelectSubset<T, paymentUpdateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentDeleteManyArgs>(args?: SelectSubset<T, paymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentUpdateManyArgs>(args: SelectSubset<T, paymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends paymentUpsertArgs>(args: SelectSubset<T, paymentUpsertArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentGroupByArgs['orderBy'] }
        : { orderBy?: paymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment model
   */
  readonly fields: paymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rental<T extends RentalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RentalDefaultArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment model
   */ 
  interface paymentFieldRefs {
    readonly id: FieldRef<"payment", 'String'>
    readonly price: FieldRef<"payment", 'Float'>
    readonly image: FieldRef<"payment", 'String'>
    readonly rentalId: FieldRef<"payment", 'String'>
    readonly createdAt: FieldRef<"payment", 'DateTime'>
    readonly updatedAt: FieldRef<"payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment findUnique
   */
  export type paymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findFirst
   */
  export type paymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findMany
   */
  export type paymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment create
   */
  export type paymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to create a payment.
     */
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }

  /**
   * payment createMany
   */
  export type paymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment update
   */
  export type paymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to update a payment.
     */
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment upsert
   */
  export type paymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The filter to search for the payment to update in case it exists.
     */
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     */
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }

  /**
   * payment delete
   */
  export type paymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter which payment to delete.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to delete.
     */
    limit?: number
  }

  /**
   * payment without action
   */
  export type paymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
  }


  /**
   * Model Repair
   */

  export type AggregateRepair = {
    _count: RepairCountAggregateOutputType | null
    _avg: RepairAvgAggregateOutputType | null
    _sum: RepairSumAggregateOutputType | null
    _min: RepairMinAggregateOutputType | null
    _max: RepairMaxAggregateOutputType | null
  }

  export type RepairAvgAggregateOutputType = {
    penaltyPrice: number | null
    pay: number | null
  }

  export type RepairSumAggregateOutputType = {
    penaltyPrice: number | null
    pay: number | null
  }

  export type RepairMinAggregateOutputType = {
    id: string | null
    penaltyImg: string | null
    penaltyTail: string | null
    penaltyPrice: number | null
    image: string | null
    detail: string | null
    pay: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RepairMaxAggregateOutputType = {
    id: string | null
    penaltyImg: string | null
    penaltyTail: string | null
    penaltyPrice: number | null
    image: string | null
    detail: string | null
    pay: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RepairCountAggregateOutputType = {
    id: number
    penaltyImg: number
    penaltyTail: number
    penaltyPrice: number
    image: number
    detail: number
    pay: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RepairAvgAggregateInputType = {
    penaltyPrice?: true
    pay?: true
  }

  export type RepairSumAggregateInputType = {
    penaltyPrice?: true
    pay?: true
  }

  export type RepairMinAggregateInputType = {
    id?: true
    penaltyImg?: true
    penaltyTail?: true
    penaltyPrice?: true
    image?: true
    detail?: true
    pay?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RepairMaxAggregateInputType = {
    id?: true
    penaltyImg?: true
    penaltyTail?: true
    penaltyPrice?: true
    image?: true
    detail?: true
    pay?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RepairCountAggregateInputType = {
    id?: true
    penaltyImg?: true
    penaltyTail?: true
    penaltyPrice?: true
    image?: true
    detail?: true
    pay?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RepairAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repair to aggregate.
     */
    where?: RepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repairs to fetch.
     */
    orderBy?: RepairOrderByWithRelationInput | RepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Repairs
    **/
    _count?: true | RepairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepairAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepairSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepairMaxAggregateInputType
  }

  export type GetRepairAggregateType<T extends RepairAggregateArgs> = {
        [P in keyof T & keyof AggregateRepair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepair[P]>
      : GetScalarType<T[P], AggregateRepair[P]>
  }




  export type RepairGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepairWhereInput
    orderBy?: RepairOrderByWithAggregationInput | RepairOrderByWithAggregationInput[]
    by: RepairScalarFieldEnum[] | RepairScalarFieldEnum
    having?: RepairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepairCountAggregateInputType | true
    _avg?: RepairAvgAggregateInputType
    _sum?: RepairSumAggregateInputType
    _min?: RepairMinAggregateInputType
    _max?: RepairMaxAggregateInputType
  }

  export type RepairGroupByOutputType = {
    id: string
    penaltyImg: string
    penaltyTail: string
    penaltyPrice: number
    image: string
    detail: string
    pay: number
    createdAt: Date
    updatedAt: Date
    _count: RepairCountAggregateOutputType | null
    _avg: RepairAvgAggregateOutputType | null
    _sum: RepairSumAggregateOutputType | null
    _min: RepairMinAggregateOutputType | null
    _max: RepairMaxAggregateOutputType | null
  }

  type GetRepairGroupByPayload<T extends RepairGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepairGroupByOutputType[P]>
            : GetScalarType<T[P], RepairGroupByOutputType[P]>
        }
      >
    >


  export type RepairSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    penaltyImg?: boolean
    penaltyTail?: boolean
    penaltyPrice?: boolean
    image?: boolean
    detail?: boolean
    pay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["repair"]>



  export type RepairSelectScalar = {
    id?: boolean
    penaltyImg?: boolean
    penaltyTail?: boolean
    penaltyPrice?: boolean
    image?: boolean
    detail?: boolean
    pay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RepairOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "penaltyImg" | "penaltyTail" | "penaltyPrice" | "image" | "detail" | "pay" | "createdAt" | "updatedAt", ExtArgs["result"]["repair"]>

  export type $RepairPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Repair"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      penaltyImg: string
      penaltyTail: string
      penaltyPrice: number
      image: string
      detail: string
      pay: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["repair"]>
    composites: {}
  }

  type RepairGetPayload<S extends boolean | null | undefined | RepairDefaultArgs> = $Result.GetResult<Prisma.$RepairPayload, S>

  type RepairCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RepairFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RepairCountAggregateInputType | true
    }

  export interface RepairDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Repair'], meta: { name: 'Repair' } }
    /**
     * Find zero or one Repair that matches the filter.
     * @param {RepairFindUniqueArgs} args - Arguments to find a Repair
     * @example
     * // Get one Repair
     * const repair = await prisma.repair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepairFindUniqueArgs>(args: SelectSubset<T, RepairFindUniqueArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Repair that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RepairFindUniqueOrThrowArgs} args - Arguments to find a Repair
     * @example
     * // Get one Repair
     * const repair = await prisma.repair.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepairFindUniqueOrThrowArgs>(args: SelectSubset<T, RepairFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Repair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairFindFirstArgs} args - Arguments to find a Repair
     * @example
     * // Get one Repair
     * const repair = await prisma.repair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepairFindFirstArgs>(args?: SelectSubset<T, RepairFindFirstArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Repair that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairFindFirstOrThrowArgs} args - Arguments to find a Repair
     * @example
     * // Get one Repair
     * const repair = await prisma.repair.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepairFindFirstOrThrowArgs>(args?: SelectSubset<T, RepairFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Repairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repairs
     * const repairs = await prisma.repair.findMany()
     * 
     * // Get first 10 Repairs
     * const repairs = await prisma.repair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repairWithIdOnly = await prisma.repair.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepairFindManyArgs>(args?: SelectSubset<T, RepairFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Repair.
     * @param {RepairCreateArgs} args - Arguments to create a Repair.
     * @example
     * // Create one Repair
     * const Repair = await prisma.repair.create({
     *   data: {
     *     // ... data to create a Repair
     *   }
     * })
     * 
     */
    create<T extends RepairCreateArgs>(args: SelectSubset<T, RepairCreateArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Repairs.
     * @param {RepairCreateManyArgs} args - Arguments to create many Repairs.
     * @example
     * // Create many Repairs
     * const repair = await prisma.repair.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepairCreateManyArgs>(args?: SelectSubset<T, RepairCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Repair.
     * @param {RepairDeleteArgs} args - Arguments to delete one Repair.
     * @example
     * // Delete one Repair
     * const Repair = await prisma.repair.delete({
     *   where: {
     *     // ... filter to delete one Repair
     *   }
     * })
     * 
     */
    delete<T extends RepairDeleteArgs>(args: SelectSubset<T, RepairDeleteArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Repair.
     * @param {RepairUpdateArgs} args - Arguments to update one Repair.
     * @example
     * // Update one Repair
     * const repair = await prisma.repair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepairUpdateArgs>(args: SelectSubset<T, RepairUpdateArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Repairs.
     * @param {RepairDeleteManyArgs} args - Arguments to filter Repairs to delete.
     * @example
     * // Delete a few Repairs
     * const { count } = await prisma.repair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepairDeleteManyArgs>(args?: SelectSubset<T, RepairDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repairs
     * const repair = await prisma.repair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepairUpdateManyArgs>(args: SelectSubset<T, RepairUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Repair.
     * @param {RepairUpsertArgs} args - Arguments to update or create a Repair.
     * @example
     * // Update or create a Repair
     * const repair = await prisma.repair.upsert({
     *   create: {
     *     // ... data to create a Repair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repair we want to update
     *   }
     * })
     */
    upsert<T extends RepairUpsertArgs>(args: SelectSubset<T, RepairUpsertArgs<ExtArgs>>): Prisma__RepairClient<$Result.GetResult<Prisma.$RepairPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Repairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairCountArgs} args - Arguments to filter Repairs to count.
     * @example
     * // Count the number of Repairs
     * const count = await prisma.repair.count({
     *   where: {
     *     // ... the filter for the Repairs we want to count
     *   }
     * })
    **/
    count<T extends RepairCountArgs>(
      args?: Subset<T, RepairCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepairAggregateArgs>(args: Subset<T, RepairAggregateArgs>): Prisma.PrismaPromise<GetRepairAggregateType<T>>

    /**
     * Group by Repair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepairGroupByArgs['orderBy'] }
        : { orderBy?: RepairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepairGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Repair model
   */
  readonly fields: RepairFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Repair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepairClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Repair model
   */ 
  interface RepairFieldRefs {
    readonly id: FieldRef<"Repair", 'String'>
    readonly penaltyImg: FieldRef<"Repair", 'String'>
    readonly penaltyTail: FieldRef<"Repair", 'String'>
    readonly penaltyPrice: FieldRef<"Repair", 'Float'>
    readonly image: FieldRef<"Repair", 'String'>
    readonly detail: FieldRef<"Repair", 'String'>
    readonly pay: FieldRef<"Repair", 'Float'>
    readonly createdAt: FieldRef<"Repair", 'DateTime'>
    readonly updatedAt: FieldRef<"Repair", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Repair findUnique
   */
  export type RepairFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter, which Repair to fetch.
     */
    where: RepairWhereUniqueInput
  }

  /**
   * Repair findUniqueOrThrow
   */
  export type RepairFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter, which Repair to fetch.
     */
    where: RepairWhereUniqueInput
  }

  /**
   * Repair findFirst
   */
  export type RepairFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter, which Repair to fetch.
     */
    where?: RepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repairs to fetch.
     */
    orderBy?: RepairOrderByWithRelationInput | RepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repairs.
     */
    cursor?: RepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repairs.
     */
    distinct?: RepairScalarFieldEnum | RepairScalarFieldEnum[]
  }

  /**
   * Repair findFirstOrThrow
   */
  export type RepairFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter, which Repair to fetch.
     */
    where?: RepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repairs to fetch.
     */
    orderBy?: RepairOrderByWithRelationInput | RepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repairs.
     */
    cursor?: RepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repairs.
     */
    distinct?: RepairScalarFieldEnum | RepairScalarFieldEnum[]
  }

  /**
   * Repair findMany
   */
  export type RepairFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter, which Repairs to fetch.
     */
    where?: RepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repairs to fetch.
     */
    orderBy?: RepairOrderByWithRelationInput | RepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Repairs.
     */
    cursor?: RepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repairs.
     */
    skip?: number
    distinct?: RepairScalarFieldEnum | RepairScalarFieldEnum[]
  }

  /**
   * Repair create
   */
  export type RepairCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * The data needed to create a Repair.
     */
    data: XOR<RepairCreateInput, RepairUncheckedCreateInput>
  }

  /**
   * Repair createMany
   */
  export type RepairCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Repairs.
     */
    data: RepairCreateManyInput | RepairCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Repair update
   */
  export type RepairUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * The data needed to update a Repair.
     */
    data: XOR<RepairUpdateInput, RepairUncheckedUpdateInput>
    /**
     * Choose, which Repair to update.
     */
    where: RepairWhereUniqueInput
  }

  /**
   * Repair updateMany
   */
  export type RepairUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Repairs.
     */
    data: XOR<RepairUpdateManyMutationInput, RepairUncheckedUpdateManyInput>
    /**
     * Filter which Repairs to update
     */
    where?: RepairWhereInput
    /**
     * Limit how many Repairs to update.
     */
    limit?: number
  }

  /**
   * Repair upsert
   */
  export type RepairUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * The filter to search for the Repair to update in case it exists.
     */
    where: RepairWhereUniqueInput
    /**
     * In case the Repair found by the `where` argument doesn't exist, create a new Repair with this data.
     */
    create: XOR<RepairCreateInput, RepairUncheckedCreateInput>
    /**
     * In case the Repair was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepairUpdateInput, RepairUncheckedUpdateInput>
  }

  /**
   * Repair delete
   */
  export type RepairDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
    /**
     * Filter which Repair to delete.
     */
    where: RepairWhereUniqueInput
  }

  /**
   * Repair deleteMany
   */
  export type RepairDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repairs to delete
     */
    where?: RepairWhereInput
    /**
     * Limit how many Repairs to delete.
     */
    limit?: number
  }

  /**
   * Repair without action
   */
  export type RepairDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repair
     */
    select?: RepairSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Repair
     */
    omit?: RepairOmit<ExtArgs> | null
  }


  /**
   * Model Rental
   */

  export type AggregateRental = {
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  export type RentalAvgAggregateOutputType = {
    phone: number | null
    booking_pay: number | null
  }

  export type RentalSumAggregateOutputType = {
    phone: number | null
    booking_pay: number | null
  }

  export type RentalMinAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    phone: number | null
    passport: string | null
    identity_card: string | null
    dri_icenes: string | null
    pay_image: string | null
    booking_pay: number | null
    usersId: string | null
    carId: string | null
    employeesId: string | null
    bankId: string | null
    creatDat: Date | null
    updateDat: Date | null
  }

  export type RentalMaxAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    phone: number | null
    passport: string | null
    identity_card: string | null
    dri_icenes: string | null
    pay_image: string | null
    booking_pay: number | null
    usersId: string | null
    carId: string | null
    employeesId: string | null
    bankId: string | null
    creatDat: Date | null
    updateDat: Date | null
  }

  export type RentalCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    phone: number
    passport: number
    identity_card: number
    dri_icenes: number
    pay_image: number
    booking_pay: number
    usersId: number
    carId: number
    employeesId: number
    bankId: number
    creatDat: number
    updateDat: number
    _all: number
  }


  export type RentalAvgAggregateInputType = {
    phone?: true
    booking_pay?: true
  }

  export type RentalSumAggregateInputType = {
    phone?: true
    booking_pay?: true
  }

  export type RentalMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    phone?: true
    passport?: true
    identity_card?: true
    dri_icenes?: true
    pay_image?: true
    booking_pay?: true
    usersId?: true
    carId?: true
    employeesId?: true
    bankId?: true
    creatDat?: true
    updateDat?: true
  }

  export type RentalMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    phone?: true
    passport?: true
    identity_card?: true
    dri_icenes?: true
    pay_image?: true
    booking_pay?: true
    usersId?: true
    carId?: true
    employeesId?: true
    bankId?: true
    creatDat?: true
    updateDat?: true
  }

  export type RentalCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    phone?: true
    passport?: true
    identity_card?: true
    dri_icenes?: true
    pay_image?: true
    booking_pay?: true
    usersId?: true
    carId?: true
    employeesId?: true
    bankId?: true
    creatDat?: true
    updateDat?: true
    _all?: true
  }

  export type RentalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rental to aggregate.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rentals
    **/
    _count?: true | RentalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentalMaxAggregateInputType
  }

  export type GetRentalAggregateType<T extends RentalAggregateArgs> = {
        [P in keyof T & keyof AggregateRental]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRental[P]>
      : GetScalarType<T[P], AggregateRental[P]>
  }




  export type RentalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithAggregationInput | RentalOrderByWithAggregationInput[]
    by: RentalScalarFieldEnum[] | RentalScalarFieldEnum
    having?: RentalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentalCountAggregateInputType | true
    _avg?: RentalAvgAggregateInputType
    _sum?: RentalSumAggregateInputType
    _min?: RentalMinAggregateInputType
    _max?: RentalMaxAggregateInputType
  }

  export type RentalGroupByOutputType = {
    id: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    bankId: string
    creatDat: Date
    updateDat: Date
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  type GetRentalGroupByPayload<T extends RentalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentalGroupByOutputType[P]>
            : GetScalarType<T[P], RentalGroupByOutputType[P]>
        }
      >
    >


  export type RentalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    passport?: boolean
    identity_card?: boolean
    dri_icenes?: boolean
    pay_image?: boolean
    booking_pay?: boolean
    usersId?: boolean
    carId?: boolean
    employeesId?: boolean
    bankId?: boolean
    creatDat?: boolean
    updateDat?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    car?: boolean | CarDefaultArgs<ExtArgs>
    bank?: boolean | BankDefaultArgs<ExtArgs>
    Employees?: boolean | EmployeesDefaultArgs<ExtArgs>
    review?: boolean | Rental$reviewArgs<ExtArgs>
    payment?: boolean | Rental$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["rental"]>



  export type RentalSelectScalar = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    passport?: boolean
    identity_card?: boolean
    dri_icenes?: boolean
    pay_image?: boolean
    booking_pay?: boolean
    usersId?: boolean
    carId?: boolean
    employeesId?: boolean
    bankId?: boolean
    creatDat?: boolean
    updateDat?: boolean
  }

  export type RentalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "last_name" | "phone" | "passport" | "identity_card" | "dri_icenes" | "pay_image" | "booking_pay" | "usersId" | "carId" | "employeesId" | "bankId" | "creatDat" | "updateDat", ExtArgs["result"]["rental"]>
  export type RentalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    car?: boolean | CarDefaultArgs<ExtArgs>
    bank?: boolean | BankDefaultArgs<ExtArgs>
    Employees?: boolean | EmployeesDefaultArgs<ExtArgs>
    review?: boolean | Rental$reviewArgs<ExtArgs>
    payment?: boolean | Rental$paymentArgs<ExtArgs>
  }

  export type $RentalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rental"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      car: Prisma.$CarPayload<ExtArgs>
      bank: Prisma.$BankPayload<ExtArgs>
      Employees: Prisma.$EmployeesPayload<ExtArgs>
      review: Prisma.$ReviewPayload<ExtArgs> | null
      payment: Prisma.$paymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      first_name: string
      last_name: string
      phone: number
      passport: string
      identity_card: string
      dri_icenes: string
      pay_image: string
      booking_pay: number
      usersId: string
      carId: string
      employeesId: string
      bankId: string
      creatDat: Date
      updateDat: Date
    }, ExtArgs["result"]["rental"]>
    composites: {}
  }

  type RentalGetPayload<S extends boolean | null | undefined | RentalDefaultArgs> = $Result.GetResult<Prisma.$RentalPayload, S>

  type RentalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RentalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RentalCountAggregateInputType | true
    }

  export interface RentalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rental'], meta: { name: 'Rental' } }
    /**
     * Find zero or one Rental that matches the filter.
     * @param {RentalFindUniqueArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RentalFindUniqueArgs>(args: SelectSubset<T, RentalFindUniqueArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Rental that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RentalFindUniqueOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RentalFindUniqueOrThrowArgs>(args: SelectSubset<T, RentalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Rental that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindFirstArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RentalFindFirstArgs>(args?: SelectSubset<T, RentalFindFirstArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Rental that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindFirstOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RentalFindFirstOrThrowArgs>(args?: SelectSubset<T, RentalFindFirstOrThrowArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Rentals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rentals
     * const rentals = await prisma.rental.findMany()
     * 
     * // Get first 10 Rentals
     * const rentals = await prisma.rental.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rentalWithIdOnly = await prisma.rental.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RentalFindManyArgs>(args?: SelectSubset<T, RentalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Rental.
     * @param {RentalCreateArgs} args - Arguments to create a Rental.
     * @example
     * // Create one Rental
     * const Rental = await prisma.rental.create({
     *   data: {
     *     // ... data to create a Rental
     *   }
     * })
     * 
     */
    create<T extends RentalCreateArgs>(args: SelectSubset<T, RentalCreateArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Rentals.
     * @param {RentalCreateManyArgs} args - Arguments to create many Rentals.
     * @example
     * // Create many Rentals
     * const rental = await prisma.rental.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RentalCreateManyArgs>(args?: SelectSubset<T, RentalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rental.
     * @param {RentalDeleteArgs} args - Arguments to delete one Rental.
     * @example
     * // Delete one Rental
     * const Rental = await prisma.rental.delete({
     *   where: {
     *     // ... filter to delete one Rental
     *   }
     * })
     * 
     */
    delete<T extends RentalDeleteArgs>(args: SelectSubset<T, RentalDeleteArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Rental.
     * @param {RentalUpdateArgs} args - Arguments to update one Rental.
     * @example
     * // Update one Rental
     * const rental = await prisma.rental.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RentalUpdateArgs>(args: SelectSubset<T, RentalUpdateArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Rentals.
     * @param {RentalDeleteManyArgs} args - Arguments to filter Rentals to delete.
     * @example
     * // Delete a few Rentals
     * const { count } = await prisma.rental.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RentalDeleteManyArgs>(args?: SelectSubset<T, RentalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rentals
     * const rental = await prisma.rental.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RentalUpdateManyArgs>(args: SelectSubset<T, RentalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rental.
     * @param {RentalUpsertArgs} args - Arguments to update or create a Rental.
     * @example
     * // Update or create a Rental
     * const rental = await prisma.rental.upsert({
     *   create: {
     *     // ... data to create a Rental
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rental we want to update
     *   }
     * })
     */
    upsert<T extends RentalUpsertArgs>(args: SelectSubset<T, RentalUpsertArgs<ExtArgs>>): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalCountArgs} args - Arguments to filter Rentals to count.
     * @example
     * // Count the number of Rentals
     * const count = await prisma.rental.count({
     *   where: {
     *     // ... the filter for the Rentals we want to count
     *   }
     * })
    **/
    count<T extends RentalCountArgs>(
      args?: Subset<T, RentalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentalAggregateArgs>(args: Subset<T, RentalAggregateArgs>): Prisma.PrismaPromise<GetRentalAggregateType<T>>

    /**
     * Group by Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentalGroupByArgs['orderBy'] }
        : { orderBy?: RentalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rental model
   */
  readonly fields: RentalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rental.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    car<T extends CarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarDefaultArgs<ExtArgs>>): Prisma__CarClient<$Result.GetResult<Prisma.$CarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    bank<T extends BankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BankDefaultArgs<ExtArgs>>): Prisma__BankClient<$Result.GetResult<Prisma.$BankPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    Employees<T extends EmployeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeesDefaultArgs<ExtArgs>>): Prisma__EmployeesClient<$Result.GetResult<Prisma.$EmployeesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    review<T extends Rental$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Rental$reviewArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    payment<T extends Rental$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Rental$paymentArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rental model
   */ 
  interface RentalFieldRefs {
    readonly id: FieldRef<"Rental", 'String'>
    readonly first_name: FieldRef<"Rental", 'String'>
    readonly last_name: FieldRef<"Rental", 'String'>
    readonly phone: FieldRef<"Rental", 'Int'>
    readonly passport: FieldRef<"Rental", 'String'>
    readonly identity_card: FieldRef<"Rental", 'String'>
    readonly dri_icenes: FieldRef<"Rental", 'String'>
    readonly pay_image: FieldRef<"Rental", 'String'>
    readonly booking_pay: FieldRef<"Rental", 'Float'>
    readonly usersId: FieldRef<"Rental", 'String'>
    readonly carId: FieldRef<"Rental", 'String'>
    readonly employeesId: FieldRef<"Rental", 'String'>
    readonly bankId: FieldRef<"Rental", 'String'>
    readonly creatDat: FieldRef<"Rental", 'DateTime'>
    readonly updateDat: FieldRef<"Rental", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rental findUnique
   */
  export type RentalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental findUniqueOrThrow
   */
  export type RentalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental findFirst
   */
  export type RentalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental findFirstOrThrow
   */
  export type RentalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental findMany
   */
  export type RentalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rentals to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental create
   */
  export type RentalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The data needed to create a Rental.
     */
    data: XOR<RentalCreateInput, RentalUncheckedCreateInput>
  }

  /**
   * Rental createMany
   */
  export type RentalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rentals.
     */
    data: RentalCreateManyInput | RentalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rental update
   */
  export type RentalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The data needed to update a Rental.
     */
    data: XOR<RentalUpdateInput, RentalUncheckedUpdateInput>
    /**
     * Choose, which Rental to update.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental updateMany
   */
  export type RentalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rentals.
     */
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyInput>
    /**
     * Filter which Rentals to update
     */
    where?: RentalWhereInput
    /**
     * Limit how many Rentals to update.
     */
    limit?: number
  }

  /**
   * Rental upsert
   */
  export type RentalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The filter to search for the Rental to update in case it exists.
     */
    where: RentalWhereUniqueInput
    /**
     * In case the Rental found by the `where` argument doesn't exist, create a new Rental with this data.
     */
    create: XOR<RentalCreateInput, RentalUncheckedCreateInput>
    /**
     * In case the Rental was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentalUpdateInput, RentalUncheckedUpdateInput>
  }

  /**
   * Rental delete
   */
  export type RentalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter which Rental to delete.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental deleteMany
   */
  export type RentalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rentals to delete
     */
    where?: RentalWhereInput
    /**
     * Limit how many Rentals to delete.
     */
    limit?: number
  }

  /**
   * Rental.review
   */
  export type Rental$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
  }

  /**
   * Rental.payment
   */
  export type Rental$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
  }

  /**
   * Rental without action
   */
  export type RentalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rental
     */
    omit?: RentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    profile: 'profile',
    role: 'role',
    otp: 'otp',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const EmployeesScalarFieldEnum: {
    id: 'id',
    dept_id: 'dept_id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    village: 'village',
    distrit: 'distrit',
    provinced: 'provinced',
    natinalIdCard: 'natinalIdCard',
    salary: 'salary',
    birthday: 'birthday',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type EmployeesScalarFieldEnum = (typeof EmployeesScalarFieldEnum)[keyof typeof EmployeesScalarFieldEnum]


  export const DepartmentsScalarFieldEnum: {
    id: 'id',
    deptName: 'deptName',
    pricePerDay: 'pricePerDay',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type DepartmentsScalarFieldEnum = (typeof DepartmentsScalarFieldEnum)[keyof typeof DepartmentsScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    statu: 'statu',
    statu_user: 'statu_user',
    statu_admin: 'statu_admin',
    statu_car: 'statu_car',
    icon_statu: 'icon_statu',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const PromotionsScalarFieldEnum: {
    id: 'id',
    titel: 'titel',
    description: 'description',
    image: 'image',
    discount_type: 'discount_type',
    discount: 'discount',
    min_rent_amount: 'min_rent_amount',
    status: 'status',
    start_date: 'start_date',
    end_date: 'end_date',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type PromotionsScalarFieldEnum = (typeof PromotionsScalarFieldEnum)[keyof typeof PromotionsScalarFieldEnum]


  export const CouponsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    code: 'code',
    description: 'description',
    discount: 'discount',
    status: 'status',
    start_date: 'start_date',
    end_date: 'end_date',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type CouponsScalarFieldEnum = (typeof CouponsScalarFieldEnum)[keyof typeof CouponsScalarFieldEnum]


  export const CarTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarTypeScalarFieldEnum = (typeof CarTypeScalarFieldEnum)[keyof typeof CarTypeScalarFieldEnum]


  export const InsuranceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InsuranceScalarFieldEnum = (typeof InsuranceScalarFieldEnum)[keyof typeof InsuranceScalarFieldEnum]


  export const BankScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BankScalarFieldEnum = (typeof BankScalarFieldEnum)[keyof typeof BankScalarFieldEnum]


  export const CarScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    year: 'year',
    plate_city: 'plate_city',
    plate_text: 'plate_text',
    plate_number: 'plate_number',
    gps: 'gps',
    car_seat: 'car_seat',
    car_gear: 'car_gear',
    color: 'color',
    status: 'status',
    price: 'price',
    carTypeId: 'carTypeId',
    insuranceId: 'insuranceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CarScalarFieldEnum = (typeof CarScalarFieldEnum)[keyof typeof CarScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    carPoint: 'carPoint',
    emplyPoint: 'emplyPoint',
    emplyId: 'emplyId',
    carId: 'carId',
    rentalId: 'rentalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    price: 'price',
    image: 'image',
    rentalId: 'rentalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const RepairScalarFieldEnum: {
    id: 'id',
    penaltyImg: 'penaltyImg',
    penaltyTail: 'penaltyTail',
    penaltyPrice: 'penaltyPrice',
    image: 'image',
    detail: 'detail',
    pay: 'pay',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RepairScalarFieldEnum = (typeof RepairScalarFieldEnum)[keyof typeof RepairScalarFieldEnum]


  export const RentalScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    phone: 'phone',
    passport: 'passport',
    identity_card: 'identity_card',
    dri_icenes: 'dri_icenes',
    pay_image: 'pay_image',
    booking_pay: 'booking_pay',
    usersId: 'usersId',
    carId: 'carId',
    employeesId: 'employeesId',
    bankId: 'bankId',
    creatDat: 'creatDat',
    updateDat: 'updateDat'
  };

  export type RentalScalarFieldEnum = (typeof RentalScalarFieldEnum)[keyof typeof RentalScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UsersOrderByRelevanceFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    profile: 'profile'
  };

  export type UsersOrderByRelevanceFieldEnum = (typeof UsersOrderByRelevanceFieldEnum)[keyof typeof UsersOrderByRelevanceFieldEnum]


  export const EmployeesOrderByRelevanceFieldEnum: {
    id: 'id',
    dept_id: 'dept_id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    village: 'village',
    distrit: 'distrit',
    provinced: 'provinced',
    natinalIdCard: 'natinalIdCard'
  };

  export type EmployeesOrderByRelevanceFieldEnum = (typeof EmployeesOrderByRelevanceFieldEnum)[keyof typeof EmployeesOrderByRelevanceFieldEnum]


  export const DepartmentsOrderByRelevanceFieldEnum: {
    id: 'id',
    deptName: 'deptName',
    pricePerDay: 'pricePerDay'
  };

  export type DepartmentsOrderByRelevanceFieldEnum = (typeof DepartmentsOrderByRelevanceFieldEnum)[keyof typeof DepartmentsOrderByRelevanceFieldEnum]


  export const StatusOrderByRelevanceFieldEnum: {
    id: 'id',
    statu_user: 'statu_user',
    statu_admin: 'statu_admin',
    statu_car: 'statu_car',
    icon_statu: 'icon_statu'
  };

  export type StatusOrderByRelevanceFieldEnum = (typeof StatusOrderByRelevanceFieldEnum)[keyof typeof StatusOrderByRelevanceFieldEnum]


  export const PromotionsOrderByRelevanceFieldEnum: {
    id: 'id',
    titel: 'titel',
    description: 'description',
    image: 'image'
  };

  export type PromotionsOrderByRelevanceFieldEnum = (typeof PromotionsOrderByRelevanceFieldEnum)[keyof typeof PromotionsOrderByRelevanceFieldEnum]


  export const CouponsOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    code: 'code',
    description: 'description'
  };

  export type CouponsOrderByRelevanceFieldEnum = (typeof CouponsOrderByRelevanceFieldEnum)[keyof typeof CouponsOrderByRelevanceFieldEnum]


  export const CarTypeOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon'
  };

  export type CarTypeOrderByRelevanceFieldEnum = (typeof CarTypeOrderByRelevanceFieldEnum)[keyof typeof CarTypeOrderByRelevanceFieldEnum]


  export const InsuranceOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon'
  };

  export type InsuranceOrderByRelevanceFieldEnum = (typeof InsuranceOrderByRelevanceFieldEnum)[keyof typeof InsuranceOrderByRelevanceFieldEnum]


  export const BankOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    image: 'image'
  };

  export type BankOrderByRelevanceFieldEnum = (typeof BankOrderByRelevanceFieldEnum)[keyof typeof BankOrderByRelevanceFieldEnum]


  export const CarOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    year: 'year',
    plate_city: 'plate_city',
    plate_text: 'plate_text',
    plate_number: 'plate_number',
    gps: 'gps',
    car_seat: 'car_seat',
    car_gear: 'car_gear',
    color: 'color',
    status: 'status',
    carTypeId: 'carTypeId',
    insuranceId: 'insuranceId'
  };

  export type CarOrderByRelevanceFieldEnum = (typeof CarOrderByRelevanceFieldEnum)[keyof typeof CarOrderByRelevanceFieldEnum]


  export const ReviewOrderByRelevanceFieldEnum: {
    id: 'id',
    comment: 'comment',
    emplyId: 'emplyId',
    carId: 'carId',
    rentalId: 'rentalId'
  };

  export type ReviewOrderByRelevanceFieldEnum = (typeof ReviewOrderByRelevanceFieldEnum)[keyof typeof ReviewOrderByRelevanceFieldEnum]


  export const paymentOrderByRelevanceFieldEnum: {
    id: 'id',
    image: 'image',
    rentalId: 'rentalId'
  };

  export type paymentOrderByRelevanceFieldEnum = (typeof paymentOrderByRelevanceFieldEnum)[keyof typeof paymentOrderByRelevanceFieldEnum]


  export const RepairOrderByRelevanceFieldEnum: {
    id: 'id',
    penaltyImg: 'penaltyImg',
    penaltyTail: 'penaltyTail',
    image: 'image',
    detail: 'detail'
  };

  export type RepairOrderByRelevanceFieldEnum = (typeof RepairOrderByRelevanceFieldEnum)[keyof typeof RepairOrderByRelevanceFieldEnum]


  export const RentalOrderByRelevanceFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    passport: 'passport',
    identity_card: 'identity_card',
    dri_icenes: 'dri_icenes',
    pay_image: 'pay_image',
    usersId: 'usersId',
    carId: 'carId',
    employeesId: 'employeesId',
    bankId: 'bankId'
  };

  export type RentalOrderByRelevanceFieldEnum = (typeof RentalOrderByRelevanceFieldEnum)[keyof typeof RentalOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Discount_Type'
   */
  export type EnumDiscount_TypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Discount_Type'>
    


  /**
   * Reference to a field of type 'Statu_Promotion'
   */
  export type EnumStatu_PromotionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Statu_Promotion'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    profile?: StringNullableFilter<"Users"> | string | null
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    otp?: JsonNullableFilter<"Users">
    createAt?: DateTimeFilter<"Users"> | Date | string
    updateAt?: DateTimeFilter<"Users"> | Date | string
    coupon?: CouponsListRelationFilter
    car?: RentalListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile?: SortOrderInput | SortOrder
    role?: SortOrder
    otp?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    coupon?: CouponsOrderByRelationAggregateInput
    car?: RentalOrderByRelationAggregateInput
    _relevance?: UsersOrderByRelevanceInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    profile?: StringNullableFilter<"Users"> | string | null
    role?: EnumRoleFilter<"Users"> | $Enums.Role
    otp?: JsonNullableFilter<"Users">
    createAt?: DateTimeFilter<"Users"> | Date | string
    updateAt?: DateTimeFilter<"Users"> | Date | string
    coupon?: CouponsListRelationFilter
    car?: RentalListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile?: SortOrderInput | SortOrder
    role?: SortOrder
    otp?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    firstName?: StringWithAggregatesFilter<"Users"> | string
    lastName?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    profile?: StringNullableWithAggregatesFilter<"Users"> | string | null
    role?: EnumRoleWithAggregatesFilter<"Users"> | $Enums.Role
    otp?: JsonNullableWithAggregatesFilter<"Users">
    createAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type EmployeesWhereInput = {
    AND?: EmployeesWhereInput | EmployeesWhereInput[]
    OR?: EmployeesWhereInput[]
    NOT?: EmployeesWhereInput | EmployeesWhereInput[]
    id?: StringFilter<"Employees"> | string
    dept_id?: StringFilter<"Employees"> | string
    firstName?: StringFilter<"Employees"> | string
    lastName?: StringFilter<"Employees"> | string
    email?: StringFilter<"Employees"> | string
    phone?: IntFilter<"Employees"> | number
    village?: StringFilter<"Employees"> | string
    distrit?: StringFilter<"Employees"> | string
    provinced?: StringFilter<"Employees"> | string
    natinalIdCard?: StringFilter<"Employees"> | string
    salary?: FloatFilter<"Employees"> | number
    birthday?: DateTimeFilter<"Employees"> | Date | string
    createAt?: DateTimeFilter<"Employees"> | Date | string
    updateAt?: DateTimeFilter<"Employees"> | Date | string
    department?: XOR<DepartmentsScalarRelationFilter, DepartmentsWhereInput>
    rental?: RentalListRelationFilter
    review?: ReviewListRelationFilter
  }

  export type EmployeesOrderByWithRelationInput = {
    id?: SortOrder
    dept_id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    village?: SortOrder
    distrit?: SortOrder
    provinced?: SortOrder
    natinalIdCard?: SortOrder
    salary?: SortOrder
    birthday?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    department?: DepartmentsOrderByWithRelationInput
    rental?: RentalOrderByRelationAggregateInput
    review?: ReviewOrderByRelationAggregateInput
    _relevance?: EmployeesOrderByRelevanceInput
  }

  export type EmployeesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: number
    natinalIdCard?: string
    AND?: EmployeesWhereInput | EmployeesWhereInput[]
    OR?: EmployeesWhereInput[]
    NOT?: EmployeesWhereInput | EmployeesWhereInput[]
    dept_id?: StringFilter<"Employees"> | string
    firstName?: StringFilter<"Employees"> | string
    lastName?: StringFilter<"Employees"> | string
    village?: StringFilter<"Employees"> | string
    distrit?: StringFilter<"Employees"> | string
    provinced?: StringFilter<"Employees"> | string
    salary?: FloatFilter<"Employees"> | number
    birthday?: DateTimeFilter<"Employees"> | Date | string
    createAt?: DateTimeFilter<"Employees"> | Date | string
    updateAt?: DateTimeFilter<"Employees"> | Date | string
    department?: XOR<DepartmentsScalarRelationFilter, DepartmentsWhereInput>
    rental?: RentalListRelationFilter
    review?: ReviewListRelationFilter
  }, "id" | "email" | "phone" | "natinalIdCard">

  export type EmployeesOrderByWithAggregationInput = {
    id?: SortOrder
    dept_id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    village?: SortOrder
    distrit?: SortOrder
    provinced?: SortOrder
    natinalIdCard?: SortOrder
    salary?: SortOrder
    birthday?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: EmployeesCountOrderByAggregateInput
    _avg?: EmployeesAvgOrderByAggregateInput
    _max?: EmployeesMaxOrderByAggregateInput
    _min?: EmployeesMinOrderByAggregateInput
    _sum?: EmployeesSumOrderByAggregateInput
  }

  export type EmployeesScalarWhereWithAggregatesInput = {
    AND?: EmployeesScalarWhereWithAggregatesInput | EmployeesScalarWhereWithAggregatesInput[]
    OR?: EmployeesScalarWhereWithAggregatesInput[]
    NOT?: EmployeesScalarWhereWithAggregatesInput | EmployeesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employees"> | string
    dept_id?: StringWithAggregatesFilter<"Employees"> | string
    firstName?: StringWithAggregatesFilter<"Employees"> | string
    lastName?: StringWithAggregatesFilter<"Employees"> | string
    email?: StringWithAggregatesFilter<"Employees"> | string
    phone?: IntWithAggregatesFilter<"Employees"> | number
    village?: StringWithAggregatesFilter<"Employees"> | string
    distrit?: StringWithAggregatesFilter<"Employees"> | string
    provinced?: StringWithAggregatesFilter<"Employees"> | string
    natinalIdCard?: StringWithAggregatesFilter<"Employees"> | string
    salary?: FloatWithAggregatesFilter<"Employees"> | number
    birthday?: DateTimeWithAggregatesFilter<"Employees"> | Date | string
    createAt?: DateTimeWithAggregatesFilter<"Employees"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Employees"> | Date | string
  }

  export type DepartmentsWhereInput = {
    AND?: DepartmentsWhereInput | DepartmentsWhereInput[]
    OR?: DepartmentsWhereInput[]
    NOT?: DepartmentsWhereInput | DepartmentsWhereInput[]
    id?: StringFilter<"Departments"> | string
    deptName?: StringFilter<"Departments"> | string
    pricePerDay?: StringNullableFilter<"Departments"> | string | null
    createAt?: DateTimeFilter<"Departments"> | Date | string
    updateAt?: DateTimeFilter<"Departments"> | Date | string
    Employees?: EmployeesListRelationFilter
  }

  export type DepartmentsOrderByWithRelationInput = {
    id?: SortOrder
    deptName?: SortOrder
    pricePerDay?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    Employees?: EmployeesOrderByRelationAggregateInput
    _relevance?: DepartmentsOrderByRelevanceInput
  }

  export type DepartmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    deptName?: string
    AND?: DepartmentsWhereInput | DepartmentsWhereInput[]
    OR?: DepartmentsWhereInput[]
    NOT?: DepartmentsWhereInput | DepartmentsWhereInput[]
    pricePerDay?: StringNullableFilter<"Departments"> | string | null
    createAt?: DateTimeFilter<"Departments"> | Date | string
    updateAt?: DateTimeFilter<"Departments"> | Date | string
    Employees?: EmployeesListRelationFilter
  }, "id" | "deptName">

  export type DepartmentsOrderByWithAggregationInput = {
    id?: SortOrder
    deptName?: SortOrder
    pricePerDay?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: DepartmentsCountOrderByAggregateInput
    _max?: DepartmentsMaxOrderByAggregateInput
    _min?: DepartmentsMinOrderByAggregateInput
  }

  export type DepartmentsScalarWhereWithAggregatesInput = {
    AND?: DepartmentsScalarWhereWithAggregatesInput | DepartmentsScalarWhereWithAggregatesInput[]
    OR?: DepartmentsScalarWhereWithAggregatesInput[]
    NOT?: DepartmentsScalarWhereWithAggregatesInput | DepartmentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Departments"> | string
    deptName?: StringWithAggregatesFilter<"Departments"> | string
    pricePerDay?: StringNullableWithAggregatesFilter<"Departments"> | string | null
    createAt?: DateTimeWithAggregatesFilter<"Departments"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Departments"> | Date | string
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    id?: StringFilter<"Status"> | string
    statu?: IntFilter<"Status"> | number
    statu_user?: StringFilter<"Status"> | string
    statu_admin?: StringFilter<"Status"> | string
    statu_car?: StringFilter<"Status"> | string
    icon_statu?: StringFilter<"Status"> | string
    createAt?: DateTimeFilter<"Status"> | Date | string
    updateAt?: DateTimeFilter<"Status"> | Date | string
  }

  export type StatusOrderByWithRelationInput = {
    id?: SortOrder
    statu?: SortOrder
    statu_user?: SortOrder
    statu_admin?: SortOrder
    statu_car?: SortOrder
    icon_statu?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _relevance?: StatusOrderByRelevanceInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    statu?: number
    statu_user?: string
    statu_admin?: string
    statu_car?: string
    icon_statu?: string
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    createAt?: DateTimeFilter<"Status"> | Date | string
    updateAt?: DateTimeFilter<"Status"> | Date | string
  }, "id" | "statu" | "statu_user" | "statu_admin" | "statu_car" | "icon_statu">

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    statu?: SortOrder
    statu_user?: SortOrder
    statu_admin?: SortOrder
    statu_car?: SortOrder
    icon_statu?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Status"> | string
    statu?: IntWithAggregatesFilter<"Status"> | number
    statu_user?: StringWithAggregatesFilter<"Status"> | string
    statu_admin?: StringWithAggregatesFilter<"Status"> | string
    statu_car?: StringWithAggregatesFilter<"Status"> | string
    icon_statu?: StringWithAggregatesFilter<"Status"> | string
    createAt?: DateTimeWithAggregatesFilter<"Status"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Status"> | Date | string
  }

  export type PromotionsWhereInput = {
    AND?: PromotionsWhereInput | PromotionsWhereInput[]
    OR?: PromotionsWhereInput[]
    NOT?: PromotionsWhereInput | PromotionsWhereInput[]
    id?: StringFilter<"Promotions"> | string
    titel?: StringFilter<"Promotions"> | string
    description?: StringFilter<"Promotions"> | string
    image?: StringFilter<"Promotions"> | string
    discount_type?: EnumDiscount_TypeFilter<"Promotions"> | $Enums.Discount_Type
    discount?: FloatFilter<"Promotions"> | number
    min_rent_amount?: FloatFilter<"Promotions"> | number
    status?: EnumStatu_PromotionFilter<"Promotions"> | $Enums.Statu_Promotion
    start_date?: DateTimeFilter<"Promotions"> | Date | string
    end_date?: DateTimeFilter<"Promotions"> | Date | string
    createAt?: DateTimeFilter<"Promotions"> | Date | string
    updateAt?: DateTimeFilter<"Promotions"> | Date | string
  }

  export type PromotionsOrderByWithRelationInput = {
    id?: SortOrder
    titel?: SortOrder
    description?: SortOrder
    image?: SortOrder
    discount_type?: SortOrder
    discount?: SortOrder
    min_rent_amount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _relevance?: PromotionsOrderByRelevanceInput
  }

  export type PromotionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PromotionsWhereInput | PromotionsWhereInput[]
    OR?: PromotionsWhereInput[]
    NOT?: PromotionsWhereInput | PromotionsWhereInput[]
    titel?: StringFilter<"Promotions"> | string
    description?: StringFilter<"Promotions"> | string
    image?: StringFilter<"Promotions"> | string
    discount_type?: EnumDiscount_TypeFilter<"Promotions"> | $Enums.Discount_Type
    discount?: FloatFilter<"Promotions"> | number
    min_rent_amount?: FloatFilter<"Promotions"> | number
    status?: EnumStatu_PromotionFilter<"Promotions"> | $Enums.Statu_Promotion
    start_date?: DateTimeFilter<"Promotions"> | Date | string
    end_date?: DateTimeFilter<"Promotions"> | Date | string
    createAt?: DateTimeFilter<"Promotions"> | Date | string
    updateAt?: DateTimeFilter<"Promotions"> | Date | string
  }, "id">

  export type PromotionsOrderByWithAggregationInput = {
    id?: SortOrder
    titel?: SortOrder
    description?: SortOrder
    image?: SortOrder
    discount_type?: SortOrder
    discount?: SortOrder
    min_rent_amount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: PromotionsCountOrderByAggregateInput
    _avg?: PromotionsAvgOrderByAggregateInput
    _max?: PromotionsMaxOrderByAggregateInput
    _min?: PromotionsMinOrderByAggregateInput
    _sum?: PromotionsSumOrderByAggregateInput
  }

  export type PromotionsScalarWhereWithAggregatesInput = {
    AND?: PromotionsScalarWhereWithAggregatesInput | PromotionsScalarWhereWithAggregatesInput[]
    OR?: PromotionsScalarWhereWithAggregatesInput[]
    NOT?: PromotionsScalarWhereWithAggregatesInput | PromotionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Promotions"> | string
    titel?: StringWithAggregatesFilter<"Promotions"> | string
    description?: StringWithAggregatesFilter<"Promotions"> | string
    image?: StringWithAggregatesFilter<"Promotions"> | string
    discount_type?: EnumDiscount_TypeWithAggregatesFilter<"Promotions"> | $Enums.Discount_Type
    discount?: FloatWithAggregatesFilter<"Promotions"> | number
    min_rent_amount?: FloatWithAggregatesFilter<"Promotions"> | number
    status?: EnumStatu_PromotionWithAggregatesFilter<"Promotions"> | $Enums.Statu_Promotion
    start_date?: DateTimeWithAggregatesFilter<"Promotions"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Promotions"> | Date | string
    createAt?: DateTimeWithAggregatesFilter<"Promotions"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Promotions"> | Date | string
  }

  export type CouponsWhereInput = {
    AND?: CouponsWhereInput | CouponsWhereInput[]
    OR?: CouponsWhereInput[]
    NOT?: CouponsWhereInput | CouponsWhereInput[]
    id?: StringFilter<"Coupons"> | string
    user_id?: StringFilter<"Coupons"> | string
    code?: StringFilter<"Coupons"> | string
    description?: StringFilter<"Coupons"> | string
    discount?: FloatFilter<"Coupons"> | number
    status?: EnumStatu_PromotionFilter<"Coupons"> | $Enums.Statu_Promotion
    start_date?: DateTimeFilter<"Coupons"> | Date | string
    end_date?: DateTimeFilter<"Coupons"> | Date | string
    createAt?: DateTimeFilter<"Coupons"> | Date | string
    updateAt?: DateTimeFilter<"Coupons"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type CouponsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    user?: UsersOrderByWithRelationInput
    _relevance?: CouponsOrderByRelevanceInput
  }

  export type CouponsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: CouponsWhereInput | CouponsWhereInput[]
    OR?: CouponsWhereInput[]
    NOT?: CouponsWhereInput | CouponsWhereInput[]
    user_id?: StringFilter<"Coupons"> | string
    description?: StringFilter<"Coupons"> | string
    discount?: FloatFilter<"Coupons"> | number
    status?: EnumStatu_PromotionFilter<"Coupons"> | $Enums.Statu_Promotion
    start_date?: DateTimeFilter<"Coupons"> | Date | string
    end_date?: DateTimeFilter<"Coupons"> | Date | string
    createAt?: DateTimeFilter<"Coupons"> | Date | string
    updateAt?: DateTimeFilter<"Coupons"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id" | "code">

  export type CouponsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: CouponsCountOrderByAggregateInput
    _avg?: CouponsAvgOrderByAggregateInput
    _max?: CouponsMaxOrderByAggregateInput
    _min?: CouponsMinOrderByAggregateInput
    _sum?: CouponsSumOrderByAggregateInput
  }

  export type CouponsScalarWhereWithAggregatesInput = {
    AND?: CouponsScalarWhereWithAggregatesInput | CouponsScalarWhereWithAggregatesInput[]
    OR?: CouponsScalarWhereWithAggregatesInput[]
    NOT?: CouponsScalarWhereWithAggregatesInput | CouponsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Coupons"> | string
    user_id?: StringWithAggregatesFilter<"Coupons"> | string
    code?: StringWithAggregatesFilter<"Coupons"> | string
    description?: StringWithAggregatesFilter<"Coupons"> | string
    discount?: FloatWithAggregatesFilter<"Coupons"> | number
    status?: EnumStatu_PromotionWithAggregatesFilter<"Coupons"> | $Enums.Statu_Promotion
    start_date?: DateTimeWithAggregatesFilter<"Coupons"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Coupons"> | Date | string
    createAt?: DateTimeWithAggregatesFilter<"Coupons"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Coupons"> | Date | string
  }

  export type CarTypeWhereInput = {
    AND?: CarTypeWhereInput | CarTypeWhereInput[]
    OR?: CarTypeWhereInput[]
    NOT?: CarTypeWhereInput | CarTypeWhereInput[]
    id?: StringFilter<"CarType"> | string
    name?: StringFilter<"CarType"> | string
    icon?: StringFilter<"CarType"> | string
    createdAt?: DateTimeFilter<"CarType"> | Date | string
    updatedAt?: DateTimeFilter<"CarType"> | Date | string
    car?: CarListRelationFilter
  }

  export type CarTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    car?: CarOrderByRelationAggregateInput
    _relevance?: CarTypeOrderByRelevanceInput
  }

  export type CarTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CarTypeWhereInput | CarTypeWhereInput[]
    OR?: CarTypeWhereInput[]
    NOT?: CarTypeWhereInput | CarTypeWhereInput[]
    name?: StringFilter<"CarType"> | string
    icon?: StringFilter<"CarType"> | string
    createdAt?: DateTimeFilter<"CarType"> | Date | string
    updatedAt?: DateTimeFilter<"CarType"> | Date | string
    car?: CarListRelationFilter
  }, "id">

  export type CarTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CarTypeCountOrderByAggregateInput
    _max?: CarTypeMaxOrderByAggregateInput
    _min?: CarTypeMinOrderByAggregateInput
  }

  export type CarTypeScalarWhereWithAggregatesInput = {
    AND?: CarTypeScalarWhereWithAggregatesInput | CarTypeScalarWhereWithAggregatesInput[]
    OR?: CarTypeScalarWhereWithAggregatesInput[]
    NOT?: CarTypeScalarWhereWithAggregatesInput | CarTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CarType"> | string
    name?: StringWithAggregatesFilter<"CarType"> | string
    icon?: StringWithAggregatesFilter<"CarType"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CarType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CarType"> | Date | string
  }

  export type InsuranceWhereInput = {
    AND?: InsuranceWhereInput | InsuranceWhereInput[]
    OR?: InsuranceWhereInput[]
    NOT?: InsuranceWhereInput | InsuranceWhereInput[]
    id?: StringFilter<"Insurance"> | string
    name?: StringFilter<"Insurance"> | string
    icon?: StringFilter<"Insurance"> | string
    createdAt?: DateTimeFilter<"Insurance"> | Date | string
    updatedAt?: DateTimeFilter<"Insurance"> | Date | string
    car?: CarListRelationFilter
  }

  export type InsuranceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    car?: CarOrderByRelationAggregateInput
    _relevance?: InsuranceOrderByRelevanceInput
  }

  export type InsuranceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsuranceWhereInput | InsuranceWhereInput[]
    OR?: InsuranceWhereInput[]
    NOT?: InsuranceWhereInput | InsuranceWhereInput[]
    name?: StringFilter<"Insurance"> | string
    icon?: StringFilter<"Insurance"> | string
    createdAt?: DateTimeFilter<"Insurance"> | Date | string
    updatedAt?: DateTimeFilter<"Insurance"> | Date | string
    car?: CarListRelationFilter
  }, "id">

  export type InsuranceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InsuranceCountOrderByAggregateInput
    _max?: InsuranceMaxOrderByAggregateInput
    _min?: InsuranceMinOrderByAggregateInput
  }

  export type InsuranceScalarWhereWithAggregatesInput = {
    AND?: InsuranceScalarWhereWithAggregatesInput | InsuranceScalarWhereWithAggregatesInput[]
    OR?: InsuranceScalarWhereWithAggregatesInput[]
    NOT?: InsuranceScalarWhereWithAggregatesInput | InsuranceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Insurance"> | string
    name?: StringWithAggregatesFilter<"Insurance"> | string
    icon?: StringWithAggregatesFilter<"Insurance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Insurance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Insurance"> | Date | string
  }

  export type BankWhereInput = {
    AND?: BankWhereInput | BankWhereInput[]
    OR?: BankWhereInput[]
    NOT?: BankWhereInput | BankWhereInput[]
    id?: StringFilter<"Bank"> | string
    name?: StringFilter<"Bank"> | string
    icon?: StringFilter<"Bank"> | string
    image?: StringFilter<"Bank"> | string
    createdAt?: DateTimeFilter<"Bank"> | Date | string
    updatedAt?: DateTimeFilter<"Bank"> | Date | string
    rental?: RentalListRelationFilter
  }

  export type BankOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rental?: RentalOrderByRelationAggregateInput
    _relevance?: BankOrderByRelevanceInput
  }

  export type BankWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BankWhereInput | BankWhereInput[]
    OR?: BankWhereInput[]
    NOT?: BankWhereInput | BankWhereInput[]
    name?: StringFilter<"Bank"> | string
    icon?: StringFilter<"Bank"> | string
    image?: StringFilter<"Bank"> | string
    createdAt?: DateTimeFilter<"Bank"> | Date | string
    updatedAt?: DateTimeFilter<"Bank"> | Date | string
    rental?: RentalListRelationFilter
  }, "id">

  export type BankOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BankCountOrderByAggregateInput
    _max?: BankMaxOrderByAggregateInput
    _min?: BankMinOrderByAggregateInput
  }

  export type BankScalarWhereWithAggregatesInput = {
    AND?: BankScalarWhereWithAggregatesInput | BankScalarWhereWithAggregatesInput[]
    OR?: BankScalarWhereWithAggregatesInput[]
    NOT?: BankScalarWhereWithAggregatesInput | BankScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bank"> | string
    name?: StringWithAggregatesFilter<"Bank"> | string
    icon?: StringWithAggregatesFilter<"Bank"> | string
    image?: StringWithAggregatesFilter<"Bank"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Bank"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bank"> | Date | string
  }

  export type CarWhereInput = {
    AND?: CarWhereInput | CarWhereInput[]
    OR?: CarWhereInput[]
    NOT?: CarWhereInput | CarWhereInput[]
    id?: StringFilter<"Car"> | string
    name?: StringFilter<"Car"> | string
    image?: StringFilter<"Car"> | string
    year?: StringFilter<"Car"> | string
    plate_city?: StringFilter<"Car"> | string
    plate_text?: StringFilter<"Car"> | string
    plate_number?: StringFilter<"Car"> | string
    gps?: StringFilter<"Car"> | string
    car_seat?: StringFilter<"Car"> | string
    car_gear?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    status?: StringFilter<"Car"> | string
    price?: FloatFilter<"Car"> | number
    carTypeId?: StringFilter<"Car"> | string
    insuranceId?: StringFilter<"Car"> | string
    createdAt?: DateTimeFilter<"Car"> | Date | string
    updatedAt?: DateTimeFilter<"Car"> | Date | string
    carType?: XOR<CarTypeScalarRelationFilter, CarTypeWhereInput>
    insurance?: XOR<InsuranceScalarRelationFilter, InsuranceWhereInput>
    rental?: RentalListRelationFilter
    review?: ReviewListRelationFilter
  }

  export type CarOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    year?: SortOrder
    plate_city?: SortOrder
    plate_text?: SortOrder
    plate_number?: SortOrder
    gps?: SortOrder
    car_seat?: SortOrder
    car_gear?: SortOrder
    color?: SortOrder
    status?: SortOrder
    price?: SortOrder
    carTypeId?: SortOrder
    insuranceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    carType?: CarTypeOrderByWithRelationInput
    insurance?: InsuranceOrderByWithRelationInput
    rental?: RentalOrderByRelationAggregateInput
    review?: ReviewOrderByRelationAggregateInput
    _relevance?: CarOrderByRelevanceInput
  }

  export type CarWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CarWhereInput | CarWhereInput[]
    OR?: CarWhereInput[]
    NOT?: CarWhereInput | CarWhereInput[]
    name?: StringFilter<"Car"> | string
    image?: StringFilter<"Car"> | string
    year?: StringFilter<"Car"> | string
    plate_city?: StringFilter<"Car"> | string
    plate_text?: StringFilter<"Car"> | string
    plate_number?: StringFilter<"Car"> | string
    gps?: StringFilter<"Car"> | string
    car_seat?: StringFilter<"Car"> | string
    car_gear?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    status?: StringFilter<"Car"> | string
    price?: FloatFilter<"Car"> | number
    carTypeId?: StringFilter<"Car"> | string
    insuranceId?: StringFilter<"Car"> | string
    createdAt?: DateTimeFilter<"Car"> | Date | string
    updatedAt?: DateTimeFilter<"Car"> | Date | string
    carType?: XOR<CarTypeScalarRelationFilter, CarTypeWhereInput>
    insurance?: XOR<InsuranceScalarRelationFilter, InsuranceWhereInput>
    rental?: RentalListRelationFilter
    review?: ReviewListRelationFilter
  }, "id">

  export type CarOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    year?: SortOrder
    plate_city?: SortOrder
    plate_text?: SortOrder
    plate_number?: SortOrder
    gps?: SortOrder
    car_seat?: SortOrder
    car_gear?: SortOrder
    color?: SortOrder
    status?: SortOrder
    price?: SortOrder
    carTypeId?: SortOrder
    insuranceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CarCountOrderByAggregateInput
    _avg?: CarAvgOrderByAggregateInput
    _max?: CarMaxOrderByAggregateInput
    _min?: CarMinOrderByAggregateInput
    _sum?: CarSumOrderByAggregateInput
  }

  export type CarScalarWhereWithAggregatesInput = {
    AND?: CarScalarWhereWithAggregatesInput | CarScalarWhereWithAggregatesInput[]
    OR?: CarScalarWhereWithAggregatesInput[]
    NOT?: CarScalarWhereWithAggregatesInput | CarScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Car"> | string
    name?: StringWithAggregatesFilter<"Car"> | string
    image?: StringWithAggregatesFilter<"Car"> | string
    year?: StringWithAggregatesFilter<"Car"> | string
    plate_city?: StringWithAggregatesFilter<"Car"> | string
    plate_text?: StringWithAggregatesFilter<"Car"> | string
    plate_number?: StringWithAggregatesFilter<"Car"> | string
    gps?: StringWithAggregatesFilter<"Car"> | string
    car_seat?: StringWithAggregatesFilter<"Car"> | string
    car_gear?: StringWithAggregatesFilter<"Car"> | string
    color?: StringWithAggregatesFilter<"Car"> | string
    status?: StringWithAggregatesFilter<"Car"> | string
    price?: FloatWithAggregatesFilter<"Car"> | number
    carTypeId?: StringWithAggregatesFilter<"Car"> | string
    insuranceId?: StringWithAggregatesFilter<"Car"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Car"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Car"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    comment?: StringFilter<"Review"> | string
    carPoint?: IntFilter<"Review"> | number
    emplyPoint?: IntFilter<"Review"> | number
    emplyId?: StringFilter<"Review"> | string
    carId?: StringFilter<"Review"> | string
    rentalId?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    rental?: XOR<RentalScalarRelationFilter, RentalWhereInput>
    emply?: XOR<EmployeesScalarRelationFilter, EmployeesWhereInput>
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    carPoint?: SortOrder
    emplyPoint?: SortOrder
    emplyId?: SortOrder
    carId?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rental?: RentalOrderByWithRelationInput
    emply?: EmployeesOrderByWithRelationInput
    car?: CarOrderByWithRelationInput
    _relevance?: ReviewOrderByRelevanceInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rentalId?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    comment?: StringFilter<"Review"> | string
    carPoint?: IntFilter<"Review"> | number
    emplyPoint?: IntFilter<"Review"> | number
    emplyId?: StringFilter<"Review"> | string
    carId?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    rental?: XOR<RentalScalarRelationFilter, RentalWhereInput>
    emply?: XOR<EmployeesScalarRelationFilter, EmployeesWhereInput>
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
  }, "id" | "rentalId">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    carPoint?: SortOrder
    emplyPoint?: SortOrder
    emplyId?: SortOrder
    carId?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    comment?: StringWithAggregatesFilter<"Review"> | string
    carPoint?: IntWithAggregatesFilter<"Review"> | number
    emplyPoint?: IntWithAggregatesFilter<"Review"> | number
    emplyId?: StringWithAggregatesFilter<"Review"> | string
    carId?: StringWithAggregatesFilter<"Review"> | string
    rentalId?: StringWithAggregatesFilter<"Review"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type paymentWhereInput = {
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    id?: StringFilter<"payment"> | string
    price?: FloatFilter<"payment"> | number
    image?: StringFilter<"payment"> | string
    rentalId?: StringFilter<"payment"> | string
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    rental?: XOR<RentalScalarRelationFilter, RentalWhereInput>
  }

  export type paymentOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rental?: RentalOrderByWithRelationInput
    _relevance?: paymentOrderByRelevanceInput
  }

  export type paymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    rentalId?: string
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    price?: FloatFilter<"payment"> | number
    image?: StringFilter<"payment"> | string
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    rental?: XOR<RentalScalarRelationFilter, RentalWhereInput>
  }, "id" | "rentalId">

  export type paymentOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    OR?: paymentScalarWhereWithAggregatesInput[]
    NOT?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"payment"> | string
    price?: FloatWithAggregatesFilter<"payment"> | number
    image?: StringWithAggregatesFilter<"payment"> | string
    rentalId?: StringWithAggregatesFilter<"payment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
  }

  export type RepairWhereInput = {
    AND?: RepairWhereInput | RepairWhereInput[]
    OR?: RepairWhereInput[]
    NOT?: RepairWhereInput | RepairWhereInput[]
    id?: StringFilter<"Repair"> | string
    penaltyImg?: StringFilter<"Repair"> | string
    penaltyTail?: StringFilter<"Repair"> | string
    penaltyPrice?: FloatFilter<"Repair"> | number
    image?: StringFilter<"Repair"> | string
    detail?: StringFilter<"Repair"> | string
    pay?: FloatFilter<"Repair"> | number
    createdAt?: DateTimeFilter<"Repair"> | Date | string
    updatedAt?: DateTimeFilter<"Repair"> | Date | string
  }

  export type RepairOrderByWithRelationInput = {
    id?: SortOrder
    penaltyImg?: SortOrder
    penaltyTail?: SortOrder
    penaltyPrice?: SortOrder
    image?: SortOrder
    detail?: SortOrder
    pay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: RepairOrderByRelevanceInput
  }

  export type RepairWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RepairWhereInput | RepairWhereInput[]
    OR?: RepairWhereInput[]
    NOT?: RepairWhereInput | RepairWhereInput[]
    penaltyImg?: StringFilter<"Repair"> | string
    penaltyTail?: StringFilter<"Repair"> | string
    penaltyPrice?: FloatFilter<"Repair"> | number
    image?: StringFilter<"Repair"> | string
    detail?: StringFilter<"Repair"> | string
    pay?: FloatFilter<"Repair"> | number
    createdAt?: DateTimeFilter<"Repair"> | Date | string
    updatedAt?: DateTimeFilter<"Repair"> | Date | string
  }, "id">

  export type RepairOrderByWithAggregationInput = {
    id?: SortOrder
    penaltyImg?: SortOrder
    penaltyTail?: SortOrder
    penaltyPrice?: SortOrder
    image?: SortOrder
    detail?: SortOrder
    pay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RepairCountOrderByAggregateInput
    _avg?: RepairAvgOrderByAggregateInput
    _max?: RepairMaxOrderByAggregateInput
    _min?: RepairMinOrderByAggregateInput
    _sum?: RepairSumOrderByAggregateInput
  }

  export type RepairScalarWhereWithAggregatesInput = {
    AND?: RepairScalarWhereWithAggregatesInput | RepairScalarWhereWithAggregatesInput[]
    OR?: RepairScalarWhereWithAggregatesInput[]
    NOT?: RepairScalarWhereWithAggregatesInput | RepairScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Repair"> | string
    penaltyImg?: StringWithAggregatesFilter<"Repair"> | string
    penaltyTail?: StringWithAggregatesFilter<"Repair"> | string
    penaltyPrice?: FloatWithAggregatesFilter<"Repair"> | number
    image?: StringWithAggregatesFilter<"Repair"> | string
    detail?: StringWithAggregatesFilter<"Repair"> | string
    pay?: FloatWithAggregatesFilter<"Repair"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Repair"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Repair"> | Date | string
  }

  export type RentalWhereInput = {
    AND?: RentalWhereInput | RentalWhereInput[]
    OR?: RentalWhereInput[]
    NOT?: RentalWhereInput | RentalWhereInput[]
    id?: StringFilter<"Rental"> | string
    first_name?: StringFilter<"Rental"> | string
    last_name?: StringFilter<"Rental"> | string
    phone?: IntFilter<"Rental"> | number
    passport?: StringFilter<"Rental"> | string
    identity_card?: StringFilter<"Rental"> | string
    dri_icenes?: StringFilter<"Rental"> | string
    pay_image?: StringFilter<"Rental"> | string
    booking_pay?: FloatFilter<"Rental"> | number
    usersId?: StringFilter<"Rental"> | string
    carId?: StringFilter<"Rental"> | string
    employeesId?: StringFilter<"Rental"> | string
    bankId?: StringFilter<"Rental"> | string
    creatDat?: DateTimeFilter<"Rental"> | Date | string
    updateDat?: DateTimeFilter<"Rental"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
    bank?: XOR<BankScalarRelationFilter, BankWhereInput>
    Employees?: XOR<EmployeesScalarRelationFilter, EmployeesWhereInput>
    review?: XOR<ReviewNullableScalarRelationFilter, ReviewWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }

  export type RentalOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    passport?: SortOrder
    identity_card?: SortOrder
    dri_icenes?: SortOrder
    pay_image?: SortOrder
    booking_pay?: SortOrder
    usersId?: SortOrder
    carId?: SortOrder
    employeesId?: SortOrder
    bankId?: SortOrder
    creatDat?: SortOrder
    updateDat?: SortOrder
    users?: UsersOrderByWithRelationInput
    car?: CarOrderByWithRelationInput
    bank?: BankOrderByWithRelationInput
    Employees?: EmployeesOrderByWithRelationInput
    review?: ReviewOrderByWithRelationInput
    payment?: paymentOrderByWithRelationInput
    _relevance?: RentalOrderByRelevanceInput
  }

  export type RentalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RentalWhereInput | RentalWhereInput[]
    OR?: RentalWhereInput[]
    NOT?: RentalWhereInput | RentalWhereInput[]
    first_name?: StringFilter<"Rental"> | string
    last_name?: StringFilter<"Rental"> | string
    phone?: IntFilter<"Rental"> | number
    passport?: StringFilter<"Rental"> | string
    identity_card?: StringFilter<"Rental"> | string
    dri_icenes?: StringFilter<"Rental"> | string
    pay_image?: StringFilter<"Rental"> | string
    booking_pay?: FloatFilter<"Rental"> | number
    usersId?: StringFilter<"Rental"> | string
    carId?: StringFilter<"Rental"> | string
    employeesId?: StringFilter<"Rental"> | string
    bankId?: StringFilter<"Rental"> | string
    creatDat?: DateTimeFilter<"Rental"> | Date | string
    updateDat?: DateTimeFilter<"Rental"> | Date | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    car?: XOR<CarScalarRelationFilter, CarWhereInput>
    bank?: XOR<BankScalarRelationFilter, BankWhereInput>
    Employees?: XOR<EmployeesScalarRelationFilter, EmployeesWhereInput>
    review?: XOR<ReviewNullableScalarRelationFilter, ReviewWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }, "id">

  export type RentalOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    passport?: SortOrder
    identity_card?: SortOrder
    dri_icenes?: SortOrder
    pay_image?: SortOrder
    booking_pay?: SortOrder
    usersId?: SortOrder
    carId?: SortOrder
    employeesId?: SortOrder
    bankId?: SortOrder
    creatDat?: SortOrder
    updateDat?: SortOrder
    _count?: RentalCountOrderByAggregateInput
    _avg?: RentalAvgOrderByAggregateInput
    _max?: RentalMaxOrderByAggregateInput
    _min?: RentalMinOrderByAggregateInput
    _sum?: RentalSumOrderByAggregateInput
  }

  export type RentalScalarWhereWithAggregatesInput = {
    AND?: RentalScalarWhereWithAggregatesInput | RentalScalarWhereWithAggregatesInput[]
    OR?: RentalScalarWhereWithAggregatesInput[]
    NOT?: RentalScalarWhereWithAggregatesInput | RentalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rental"> | string
    first_name?: StringWithAggregatesFilter<"Rental"> | string
    last_name?: StringWithAggregatesFilter<"Rental"> | string
    phone?: IntWithAggregatesFilter<"Rental"> | number
    passport?: StringWithAggregatesFilter<"Rental"> | string
    identity_card?: StringWithAggregatesFilter<"Rental"> | string
    dri_icenes?: StringWithAggregatesFilter<"Rental"> | string
    pay_image?: StringWithAggregatesFilter<"Rental"> | string
    booking_pay?: FloatWithAggregatesFilter<"Rental"> | number
    usersId?: StringWithAggregatesFilter<"Rental"> | string
    carId?: StringWithAggregatesFilter<"Rental"> | string
    employeesId?: StringWithAggregatesFilter<"Rental"> | string
    bankId?: StringWithAggregatesFilter<"Rental"> | string
    creatDat?: DateTimeWithAggregatesFilter<"Rental"> | Date | string
    updateDat?: DateTimeWithAggregatesFilter<"Rental"> | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    coupon?: CouponsCreateNestedManyWithoutUserInput
    car?: RentalCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    coupon?: CouponsUncheckedCreateNestedManyWithoutUserInput
    car?: RentalUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupon?: CouponsUpdateManyWithoutUserNestedInput
    car?: RentalUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupon?: CouponsUncheckedUpdateManyWithoutUserNestedInput
    car?: RentalUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeesCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    department: DepartmentsCreateNestedOneWithoutEmployeesInput
    rental?: RentalCreateNestedManyWithoutEmployeesInput
    review?: ReviewCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesUncheckedCreateInput = {
    id?: string
    dept_id: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutEmployeesInput
    review?: ReviewUncheckedCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentsUpdateOneRequiredWithoutEmployeesNestedInput
    rental?: RentalUpdateManyWithoutEmployeesNestedInput
    review?: ReviewUpdateManyWithoutEmplyNestedInput
  }

  export type EmployeesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dept_id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutEmployeesNestedInput
    review?: ReviewUncheckedUpdateManyWithoutEmplyNestedInput
  }

  export type EmployeesCreateManyInput = {
    id?: string
    dept_id: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type EmployeesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dept_id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentsCreateInput = {
    id?: string
    deptName: string
    pricePerDay?: string | null
    createAt?: Date | string
    updateAt?: Date | string
    Employees?: EmployeesCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentsUncheckedCreateInput = {
    id?: string
    deptName: string
    pricePerDay?: string | null
    createAt?: Date | string
    updateAt?: Date | string
    Employees?: EmployeesUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Employees?: EmployeesUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Employees?: EmployeesUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentsCreateManyInput = {
    id?: string
    deptName: string
    pricePerDay?: string | null
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type DepartmentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCreateInput = {
    id?: string
    statu: number
    statu_user: string
    statu_admin: string
    statu_car: string
    icon_statu: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type StatusUncheckedCreateInput = {
    id?: string
    statu: number
    statu_user: string
    statu_admin: string
    statu_car: string
    icon_statu: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type StatusUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    statu?: IntFieldUpdateOperationsInput | number
    statu_user?: StringFieldUpdateOperationsInput | string
    statu_admin?: StringFieldUpdateOperationsInput | string
    statu_car?: StringFieldUpdateOperationsInput | string
    icon_statu?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    statu?: IntFieldUpdateOperationsInput | number
    statu_user?: StringFieldUpdateOperationsInput | string
    statu_admin?: StringFieldUpdateOperationsInput | string
    statu_car?: StringFieldUpdateOperationsInput | string
    icon_statu?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCreateManyInput = {
    id?: string
    statu: number
    statu_user: string
    statu_admin: string
    statu_car: string
    icon_statu: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type StatusUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    statu?: IntFieldUpdateOperationsInput | number
    statu_user?: StringFieldUpdateOperationsInput | string
    statu_admin?: StringFieldUpdateOperationsInput | string
    statu_car?: StringFieldUpdateOperationsInput | string
    icon_statu?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    statu?: IntFieldUpdateOperationsInput | number
    statu_user?: StringFieldUpdateOperationsInput | string
    statu_admin?: StringFieldUpdateOperationsInput | string
    statu_car?: StringFieldUpdateOperationsInput | string
    icon_statu?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionsCreateInput = {
    id?: string
    titel: string
    description: string
    image: string
    discount_type: $Enums.Discount_Type
    discount: number
    min_rent_amount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type PromotionsUncheckedCreateInput = {
    id?: string
    titel: string
    description: string
    image: string
    discount_type: $Enums.Discount_Type
    discount: number
    min_rent_amount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type PromotionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    discount_type?: EnumDiscount_TypeFieldUpdateOperationsInput | $Enums.Discount_Type
    discount?: FloatFieldUpdateOperationsInput | number
    min_rent_amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    discount_type?: EnumDiscount_TypeFieldUpdateOperationsInput | $Enums.Discount_Type
    discount?: FloatFieldUpdateOperationsInput | number
    min_rent_amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionsCreateManyInput = {
    id?: string
    titel: string
    description: string
    image: string
    discount_type: $Enums.Discount_Type
    discount: number
    min_rent_amount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type PromotionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    discount_type?: EnumDiscount_TypeFieldUpdateOperationsInput | $Enums.Discount_Type
    discount?: FloatFieldUpdateOperationsInput | number
    min_rent_amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromotionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    discount_type?: EnumDiscount_TypeFieldUpdateOperationsInput | $Enums.Discount_Type
    discount?: FloatFieldUpdateOperationsInput | number
    min_rent_amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsCreateInput = {
    id?: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    user: UsersCreateNestedOneWithoutCouponInput
  }

  export type CouponsUncheckedCreateInput = {
    id?: string
    user_id: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type CouponsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutCouponNestedInput
  }

  export type CouponsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsCreateManyInput = {
    id?: string
    user_id: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type CouponsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarTypeCreateInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    car?: CarCreateNestedManyWithoutCarTypeInput
  }

  export type CarTypeUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    car?: CarUncheckedCreateNestedManyWithoutCarTypeInput
  }

  export type CarTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUpdateManyWithoutCarTypeNestedInput
  }

  export type CarTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUncheckedUpdateManyWithoutCarTypeNestedInput
  }

  export type CarTypeCreateManyInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceCreateInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    car?: CarCreateNestedManyWithoutInsuranceInput
  }

  export type InsuranceUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    car?: CarUncheckedCreateNestedManyWithoutInsuranceInput
  }

  export type InsuranceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUpdateManyWithoutInsuranceNestedInput
  }

  export type InsuranceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUncheckedUpdateManyWithoutInsuranceNestedInput
  }

  export type InsuranceCreateManyInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankCreateInput = {
    id?: string
    name: string
    icon: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalCreateNestedManyWithoutBankInput
  }

  export type BankUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutBankInput
  }

  export type BankUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateManyWithoutBankNestedInput
  }

  export type BankUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutBankNestedInput
  }

  export type BankCreateManyInput = {
    id?: string
    name: string
    icon: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarCreateInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    carType: CarTypeCreateNestedOneWithoutCarInput
    insurance: InsuranceCreateNestedOneWithoutCarInput
    rental?: RentalCreateNestedManyWithoutCarInput
    review?: ReviewCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutCarInput
    review?: ReviewUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carType?: CarTypeUpdateOneRequiredWithoutCarNestedInput
    insurance?: InsuranceUpdateOneRequiredWithoutCarNestedInput
    rental?: RentalUpdateManyWithoutCarNestedInput
    review?: ReviewUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutCarNestedInput
    review?: ReviewUncheckedUpdateManyWithoutCarNestedInput
  }

  export type CarCreateManyInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rental: RentalCreateNestedOneWithoutReviewInput
    emply: EmployeesCreateNestedOneWithoutReviewInput
    car: CarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    carId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateOneRequiredWithoutReviewNestedInput
    emply?: EmployeesUpdateOneRequiredWithoutReviewNestedInput
    car?: CarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    emplyId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    carId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    emplyId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateInput = {
    id?: string
    price: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental: RentalCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateInput = {
    id?: string
    price: number
    image: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateOneRequiredWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateManyInput = {
    id?: string
    price: number
    image: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairCreateInput = {
    id?: string
    penaltyImg: string
    penaltyTail: string
    penaltyPrice: number
    image: string
    detail: string
    pay: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepairUncheckedCreateInput = {
    id?: string
    penaltyImg: string
    penaltyTail: string
    penaltyPrice: number
    image: string
    detail: string
    pay: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepairUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    penaltyImg?: StringFieldUpdateOperationsInput | string
    penaltyTail?: StringFieldUpdateOperationsInput | string
    penaltyPrice?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    pay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    penaltyImg?: StringFieldUpdateOperationsInput | string
    penaltyTail?: StringFieldUpdateOperationsInput | string
    penaltyPrice?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    pay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairCreateManyInput = {
    id?: string
    penaltyImg: string
    penaltyTail: string
    penaltyPrice: number
    image: string
    detail: string
    pay: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RepairUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    penaltyImg?: StringFieldUpdateOperationsInput | string
    penaltyTail?: StringFieldUpdateOperationsInput | string
    penaltyPrice?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    pay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RepairUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    penaltyImg?: StringFieldUpdateOperationsInput | string
    penaltyTail?: StringFieldUpdateOperationsInput | string
    penaltyPrice?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    pay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalCreateInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    car: CarCreateNestedOneWithoutRentalInput
    bank: BankCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type RentalCreateManyInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
  }

  export type RentalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CouponsListRelationFilter = {
    every?: CouponsWhereInput
    some?: CouponsWhereInput
    none?: CouponsWhereInput
  }

  export type RentalListRelationFilter = {
    every?: RentalWhereInput
    some?: RentalWhereInput
    none?: RentalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CouponsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RentalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelevanceInput = {
    fields: UsersOrderByRelevanceFieldEnum | UsersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile?: SortOrder
    role?: SortOrder
    otp?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile?: SortOrder
    role?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile?: SortOrder
    role?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DepartmentsScalarRelationFilter = {
    is?: DepartmentsWhereInput
    isNot?: DepartmentsWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeesOrderByRelevanceInput = {
    fields: EmployeesOrderByRelevanceFieldEnum | EmployeesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmployeesCountOrderByAggregateInput = {
    id?: SortOrder
    dept_id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    village?: SortOrder
    distrit?: SortOrder
    provinced?: SortOrder
    natinalIdCard?: SortOrder
    salary?: SortOrder
    birthday?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type EmployeesAvgOrderByAggregateInput = {
    phone?: SortOrder
    salary?: SortOrder
  }

  export type EmployeesMaxOrderByAggregateInput = {
    id?: SortOrder
    dept_id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    village?: SortOrder
    distrit?: SortOrder
    provinced?: SortOrder
    natinalIdCard?: SortOrder
    salary?: SortOrder
    birthday?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type EmployeesMinOrderByAggregateInput = {
    id?: SortOrder
    dept_id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    village?: SortOrder
    distrit?: SortOrder
    provinced?: SortOrder
    natinalIdCard?: SortOrder
    salary?: SortOrder
    birthday?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type EmployeesSumOrderByAggregateInput = {
    phone?: SortOrder
    salary?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EmployeesListRelationFilter = {
    every?: EmployeesWhereInput
    some?: EmployeesWhereInput
    none?: EmployeesWhereInput
  }

  export type EmployeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentsOrderByRelevanceInput = {
    fields: DepartmentsOrderByRelevanceFieldEnum | DepartmentsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DepartmentsCountOrderByAggregateInput = {
    id?: SortOrder
    deptName?: SortOrder
    pricePerDay?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type DepartmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    deptName?: SortOrder
    pricePerDay?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type DepartmentsMinOrderByAggregateInput = {
    id?: SortOrder
    deptName?: SortOrder
    pricePerDay?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StatusOrderByRelevanceInput = {
    fields: StatusOrderByRelevanceFieldEnum | StatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    statu?: SortOrder
    statu_user?: SortOrder
    statu_admin?: SortOrder
    statu_car?: SortOrder
    icon_statu?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    statu?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    statu?: SortOrder
    statu_user?: SortOrder
    statu_admin?: SortOrder
    statu_car?: SortOrder
    icon_statu?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    statu?: SortOrder
    statu_user?: SortOrder
    statu_admin?: SortOrder
    statu_car?: SortOrder
    icon_statu?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    statu?: SortOrder
  }

  export type EnumDiscount_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Discount_Type | EnumDiscount_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Discount_Type[]
    notIn?: $Enums.Discount_Type[]
    not?: NestedEnumDiscount_TypeFilter<$PrismaModel> | $Enums.Discount_Type
  }

  export type EnumStatu_PromotionFilter<$PrismaModel = never> = {
    equals?: $Enums.Statu_Promotion | EnumStatu_PromotionFieldRefInput<$PrismaModel>
    in?: $Enums.Statu_Promotion[]
    notIn?: $Enums.Statu_Promotion[]
    not?: NestedEnumStatu_PromotionFilter<$PrismaModel> | $Enums.Statu_Promotion
  }

  export type PromotionsOrderByRelevanceInput = {
    fields: PromotionsOrderByRelevanceFieldEnum | PromotionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PromotionsCountOrderByAggregateInput = {
    id?: SortOrder
    titel?: SortOrder
    description?: SortOrder
    image?: SortOrder
    discount_type?: SortOrder
    discount?: SortOrder
    min_rent_amount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PromotionsAvgOrderByAggregateInput = {
    discount?: SortOrder
    min_rent_amount?: SortOrder
  }

  export type PromotionsMaxOrderByAggregateInput = {
    id?: SortOrder
    titel?: SortOrder
    description?: SortOrder
    image?: SortOrder
    discount_type?: SortOrder
    discount?: SortOrder
    min_rent_amount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PromotionsMinOrderByAggregateInput = {
    id?: SortOrder
    titel?: SortOrder
    description?: SortOrder
    image?: SortOrder
    discount_type?: SortOrder
    discount?: SortOrder
    min_rent_amount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PromotionsSumOrderByAggregateInput = {
    discount?: SortOrder
    min_rent_amount?: SortOrder
  }

  export type EnumDiscount_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Discount_Type | EnumDiscount_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Discount_Type[]
    notIn?: $Enums.Discount_Type[]
    not?: NestedEnumDiscount_TypeWithAggregatesFilter<$PrismaModel> | $Enums.Discount_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiscount_TypeFilter<$PrismaModel>
    _max?: NestedEnumDiscount_TypeFilter<$PrismaModel>
  }

  export type EnumStatu_PromotionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Statu_Promotion | EnumStatu_PromotionFieldRefInput<$PrismaModel>
    in?: $Enums.Statu_Promotion[]
    notIn?: $Enums.Statu_Promotion[]
    not?: NestedEnumStatu_PromotionWithAggregatesFilter<$PrismaModel> | $Enums.Statu_Promotion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatu_PromotionFilter<$PrismaModel>
    _max?: NestedEnumStatu_PromotionFilter<$PrismaModel>
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type CouponsOrderByRelevanceInput = {
    fields: CouponsOrderByRelevanceFieldEnum | CouponsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CouponsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type CouponsAvgOrderByAggregateInput = {
    discount?: SortOrder
  }

  export type CouponsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type CouponsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    code?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    status?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type CouponsSumOrderByAggregateInput = {
    discount?: SortOrder
  }

  export type CarListRelationFilter = {
    every?: CarWhereInput
    some?: CarWhereInput
    none?: CarWhereInput
  }

  export type CarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarTypeOrderByRelevanceInput = {
    fields: CarTypeOrderByRelevanceFieldEnum | CarTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CarTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceOrderByRelevanceInput = {
    fields: InsuranceOrderByRelevanceFieldEnum | InsuranceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InsuranceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsuranceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankOrderByRelevanceInput = {
    fields: BankOrderByRelevanceFieldEnum | BankOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BankCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarTypeScalarRelationFilter = {
    is?: CarTypeWhereInput
    isNot?: CarTypeWhereInput
  }

  export type InsuranceScalarRelationFilter = {
    is?: InsuranceWhereInput
    isNot?: InsuranceWhereInput
  }

  export type CarOrderByRelevanceInput = {
    fields: CarOrderByRelevanceFieldEnum | CarOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CarCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    year?: SortOrder
    plate_city?: SortOrder
    plate_text?: SortOrder
    plate_number?: SortOrder
    gps?: SortOrder
    car_seat?: SortOrder
    car_gear?: SortOrder
    color?: SortOrder
    status?: SortOrder
    price?: SortOrder
    carTypeId?: SortOrder
    insuranceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type CarMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    year?: SortOrder
    plate_city?: SortOrder
    plate_text?: SortOrder
    plate_number?: SortOrder
    gps?: SortOrder
    car_seat?: SortOrder
    car_gear?: SortOrder
    color?: SortOrder
    status?: SortOrder
    price?: SortOrder
    carTypeId?: SortOrder
    insuranceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    year?: SortOrder
    plate_city?: SortOrder
    plate_text?: SortOrder
    plate_number?: SortOrder
    gps?: SortOrder
    car_seat?: SortOrder
    car_gear?: SortOrder
    color?: SortOrder
    status?: SortOrder
    price?: SortOrder
    carTypeId?: SortOrder
    insuranceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CarSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type RentalScalarRelationFilter = {
    is?: RentalWhereInput
    isNot?: RentalWhereInput
  }

  export type EmployeesScalarRelationFilter = {
    is?: EmployeesWhereInput
    isNot?: EmployeesWhereInput
  }

  export type CarScalarRelationFilter = {
    is?: CarWhereInput
    isNot?: CarWhereInput
  }

  export type ReviewOrderByRelevanceInput = {
    fields: ReviewOrderByRelevanceFieldEnum | ReviewOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    carPoint?: SortOrder
    emplyPoint?: SortOrder
    emplyId?: SortOrder
    carId?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    carPoint?: SortOrder
    emplyPoint?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    carPoint?: SortOrder
    emplyPoint?: SortOrder
    emplyId?: SortOrder
    carId?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    carPoint?: SortOrder
    emplyPoint?: SortOrder
    emplyId?: SortOrder
    carId?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    carPoint?: SortOrder
    emplyPoint?: SortOrder
  }

  export type paymentOrderByRelevanceInput = {
    fields: paymentOrderByRelevanceFieldEnum | paymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type paymentCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    image?: SortOrder
    rentalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type RepairOrderByRelevanceInput = {
    fields: RepairOrderByRelevanceFieldEnum | RepairOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RepairCountOrderByAggregateInput = {
    id?: SortOrder
    penaltyImg?: SortOrder
    penaltyTail?: SortOrder
    penaltyPrice?: SortOrder
    image?: SortOrder
    detail?: SortOrder
    pay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepairAvgOrderByAggregateInput = {
    penaltyPrice?: SortOrder
    pay?: SortOrder
  }

  export type RepairMaxOrderByAggregateInput = {
    id?: SortOrder
    penaltyImg?: SortOrder
    penaltyTail?: SortOrder
    penaltyPrice?: SortOrder
    image?: SortOrder
    detail?: SortOrder
    pay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepairMinOrderByAggregateInput = {
    id?: SortOrder
    penaltyImg?: SortOrder
    penaltyTail?: SortOrder
    penaltyPrice?: SortOrder
    image?: SortOrder
    detail?: SortOrder
    pay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RepairSumOrderByAggregateInput = {
    penaltyPrice?: SortOrder
    pay?: SortOrder
  }

  export type BankScalarRelationFilter = {
    is?: BankWhereInput
    isNot?: BankWhereInput
  }

  export type ReviewNullableScalarRelationFilter = {
    is?: ReviewWhereInput | null
    isNot?: ReviewWhereInput | null
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: paymentWhereInput | null
    isNot?: paymentWhereInput | null
  }

  export type RentalOrderByRelevanceInput = {
    fields: RentalOrderByRelevanceFieldEnum | RentalOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RentalCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    passport?: SortOrder
    identity_card?: SortOrder
    dri_icenes?: SortOrder
    pay_image?: SortOrder
    booking_pay?: SortOrder
    usersId?: SortOrder
    carId?: SortOrder
    employeesId?: SortOrder
    bankId?: SortOrder
    creatDat?: SortOrder
    updateDat?: SortOrder
  }

  export type RentalAvgOrderByAggregateInput = {
    phone?: SortOrder
    booking_pay?: SortOrder
  }

  export type RentalMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    passport?: SortOrder
    identity_card?: SortOrder
    dri_icenes?: SortOrder
    pay_image?: SortOrder
    booking_pay?: SortOrder
    usersId?: SortOrder
    carId?: SortOrder
    employeesId?: SortOrder
    bankId?: SortOrder
    creatDat?: SortOrder
    updateDat?: SortOrder
  }

  export type RentalMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    passport?: SortOrder
    identity_card?: SortOrder
    dri_icenes?: SortOrder
    pay_image?: SortOrder
    booking_pay?: SortOrder
    usersId?: SortOrder
    carId?: SortOrder
    employeesId?: SortOrder
    bankId?: SortOrder
    creatDat?: SortOrder
    updateDat?: SortOrder
  }

  export type RentalSumOrderByAggregateInput = {
    phone?: SortOrder
    booking_pay?: SortOrder
  }

  export type CouponsCreateNestedManyWithoutUserInput = {
    create?: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput> | CouponsCreateWithoutUserInput[] | CouponsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CouponsCreateOrConnectWithoutUserInput | CouponsCreateOrConnectWithoutUserInput[]
    createMany?: CouponsCreateManyUserInputEnvelope
    connect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
  }

  export type RentalCreateNestedManyWithoutUsersInput = {
    create?: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput> | RentalCreateWithoutUsersInput[] | RentalUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutUsersInput | RentalCreateOrConnectWithoutUsersInput[]
    createMany?: RentalCreateManyUsersInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type CouponsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput> | CouponsCreateWithoutUserInput[] | CouponsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CouponsCreateOrConnectWithoutUserInput | CouponsCreateOrConnectWithoutUserInput[]
    createMany?: CouponsCreateManyUserInputEnvelope
    connect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput> | RentalCreateWithoutUsersInput[] | RentalUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutUsersInput | RentalCreateOrConnectWithoutUsersInput[]
    createMany?: RentalCreateManyUsersInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CouponsUpdateManyWithoutUserNestedInput = {
    create?: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput> | CouponsCreateWithoutUserInput[] | CouponsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CouponsCreateOrConnectWithoutUserInput | CouponsCreateOrConnectWithoutUserInput[]
    upsert?: CouponsUpsertWithWhereUniqueWithoutUserInput | CouponsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CouponsCreateManyUserInputEnvelope
    set?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    disconnect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    delete?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    connect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    update?: CouponsUpdateWithWhereUniqueWithoutUserInput | CouponsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CouponsUpdateManyWithWhereWithoutUserInput | CouponsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CouponsScalarWhereInput | CouponsScalarWhereInput[]
  }

  export type RentalUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput> | RentalCreateWithoutUsersInput[] | RentalUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutUsersInput | RentalCreateOrConnectWithoutUsersInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutUsersInput | RentalUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: RentalCreateManyUsersInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutUsersInput | RentalUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutUsersInput | RentalUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type CouponsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput> | CouponsCreateWithoutUserInput[] | CouponsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CouponsCreateOrConnectWithoutUserInput | CouponsCreateOrConnectWithoutUserInput[]
    upsert?: CouponsUpsertWithWhereUniqueWithoutUserInput | CouponsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CouponsCreateManyUserInputEnvelope
    set?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    disconnect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    delete?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    connect?: CouponsWhereUniqueInput | CouponsWhereUniqueInput[]
    update?: CouponsUpdateWithWhereUniqueWithoutUserInput | CouponsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CouponsUpdateManyWithWhereWithoutUserInput | CouponsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CouponsScalarWhereInput | CouponsScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput> | RentalCreateWithoutUsersInput[] | RentalUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutUsersInput | RentalCreateOrConnectWithoutUsersInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutUsersInput | RentalUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: RentalCreateManyUsersInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutUsersInput | RentalUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutUsersInput | RentalUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type DepartmentsCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<DepartmentsCreateWithoutEmployeesInput, DepartmentsUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentsCreateOrConnectWithoutEmployeesInput
    connect?: DepartmentsWhereUniqueInput
  }

  export type RentalCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput> | RentalCreateWithoutEmployeesInput[] | RentalUncheckedCreateWithoutEmployeesInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutEmployeesInput | RentalCreateOrConnectWithoutEmployeesInput[]
    createMany?: RentalCreateManyEmployeesInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutEmplyInput = {
    create?: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput> | ReviewCreateWithoutEmplyInput[] | ReviewUncheckedCreateWithoutEmplyInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutEmplyInput | ReviewCreateOrConnectWithoutEmplyInput[]
    createMany?: ReviewCreateManyEmplyInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput> | RentalCreateWithoutEmployeesInput[] | RentalUncheckedCreateWithoutEmployeesInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutEmployeesInput | RentalCreateOrConnectWithoutEmployeesInput[]
    createMany?: RentalCreateManyEmployeesInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutEmplyInput = {
    create?: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput> | ReviewCreateWithoutEmplyInput[] | ReviewUncheckedCreateWithoutEmplyInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutEmplyInput | ReviewCreateOrConnectWithoutEmplyInput[]
    createMany?: ReviewCreateManyEmplyInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentsUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<DepartmentsCreateWithoutEmployeesInput, DepartmentsUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentsCreateOrConnectWithoutEmployeesInput
    upsert?: DepartmentsUpsertWithoutEmployeesInput
    connect?: DepartmentsWhereUniqueInput
    update?: XOR<XOR<DepartmentsUpdateToOneWithWhereWithoutEmployeesInput, DepartmentsUpdateWithoutEmployeesInput>, DepartmentsUncheckedUpdateWithoutEmployeesInput>
  }

  export type RentalUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput> | RentalCreateWithoutEmployeesInput[] | RentalUncheckedCreateWithoutEmployeesInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutEmployeesInput | RentalCreateOrConnectWithoutEmployeesInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutEmployeesInput | RentalUpsertWithWhereUniqueWithoutEmployeesInput[]
    createMany?: RentalCreateManyEmployeesInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutEmployeesInput | RentalUpdateWithWhereUniqueWithoutEmployeesInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutEmployeesInput | RentalUpdateManyWithWhereWithoutEmployeesInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutEmplyNestedInput = {
    create?: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput> | ReviewCreateWithoutEmplyInput[] | ReviewUncheckedCreateWithoutEmplyInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutEmplyInput | ReviewCreateOrConnectWithoutEmplyInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutEmplyInput | ReviewUpsertWithWhereUniqueWithoutEmplyInput[]
    createMany?: ReviewCreateManyEmplyInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutEmplyInput | ReviewUpdateWithWhereUniqueWithoutEmplyInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutEmplyInput | ReviewUpdateManyWithWhereWithoutEmplyInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput> | RentalCreateWithoutEmployeesInput[] | RentalUncheckedCreateWithoutEmployeesInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutEmployeesInput | RentalCreateOrConnectWithoutEmployeesInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutEmployeesInput | RentalUpsertWithWhereUniqueWithoutEmployeesInput[]
    createMany?: RentalCreateManyEmployeesInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutEmployeesInput | RentalUpdateWithWhereUniqueWithoutEmployeesInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutEmployeesInput | RentalUpdateManyWithWhereWithoutEmployeesInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutEmplyNestedInput = {
    create?: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput> | ReviewCreateWithoutEmplyInput[] | ReviewUncheckedCreateWithoutEmplyInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutEmplyInput | ReviewCreateOrConnectWithoutEmplyInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutEmplyInput | ReviewUpsertWithWhereUniqueWithoutEmplyInput[]
    createMany?: ReviewCreateManyEmplyInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutEmplyInput | ReviewUpdateWithWhereUniqueWithoutEmplyInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutEmplyInput | ReviewUpdateManyWithWhereWithoutEmplyInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type EmployeesCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput> | EmployeesCreateWithoutDepartmentInput[] | EmployeesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeesCreateOrConnectWithoutDepartmentInput | EmployeesCreateOrConnectWithoutDepartmentInput[]
    createMany?: EmployeesCreateManyDepartmentInputEnvelope
    connect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
  }

  export type EmployeesUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput> | EmployeesCreateWithoutDepartmentInput[] | EmployeesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeesCreateOrConnectWithoutDepartmentInput | EmployeesCreateOrConnectWithoutDepartmentInput[]
    createMany?: EmployeesCreateManyDepartmentInputEnvelope
    connect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
  }

  export type EmployeesUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput> | EmployeesCreateWithoutDepartmentInput[] | EmployeesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeesCreateOrConnectWithoutDepartmentInput | EmployeesCreateOrConnectWithoutDepartmentInput[]
    upsert?: EmployeesUpsertWithWhereUniqueWithoutDepartmentInput | EmployeesUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EmployeesCreateManyDepartmentInputEnvelope
    set?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    disconnect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    delete?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    connect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    update?: EmployeesUpdateWithWhereUniqueWithoutDepartmentInput | EmployeesUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EmployeesUpdateManyWithWhereWithoutDepartmentInput | EmployeesUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EmployeesScalarWhereInput | EmployeesScalarWhereInput[]
  }

  export type EmployeesUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput> | EmployeesCreateWithoutDepartmentInput[] | EmployeesUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EmployeesCreateOrConnectWithoutDepartmentInput | EmployeesCreateOrConnectWithoutDepartmentInput[]
    upsert?: EmployeesUpsertWithWhereUniqueWithoutDepartmentInput | EmployeesUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EmployeesCreateManyDepartmentInputEnvelope
    set?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    disconnect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    delete?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    connect?: EmployeesWhereUniqueInput | EmployeesWhereUniqueInput[]
    update?: EmployeesUpdateWithWhereUniqueWithoutDepartmentInput | EmployeesUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EmployeesUpdateManyWithWhereWithoutDepartmentInput | EmployeesUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EmployeesScalarWhereInput | EmployeesScalarWhereInput[]
  }

  export type EnumDiscount_TypeFieldUpdateOperationsInput = {
    set?: $Enums.Discount_Type
  }

  export type EnumStatu_PromotionFieldUpdateOperationsInput = {
    set?: $Enums.Statu_Promotion
  }

  export type UsersCreateNestedOneWithoutCouponInput = {
    create?: XOR<UsersCreateWithoutCouponInput, UsersUncheckedCreateWithoutCouponInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCouponInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutCouponNestedInput = {
    create?: XOR<UsersCreateWithoutCouponInput, UsersUncheckedCreateWithoutCouponInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCouponInput
    upsert?: UsersUpsertWithoutCouponInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCouponInput, UsersUpdateWithoutCouponInput>, UsersUncheckedUpdateWithoutCouponInput>
  }

  export type CarCreateNestedManyWithoutCarTypeInput = {
    create?: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput> | CarCreateWithoutCarTypeInput[] | CarUncheckedCreateWithoutCarTypeInput[]
    connectOrCreate?: CarCreateOrConnectWithoutCarTypeInput | CarCreateOrConnectWithoutCarTypeInput[]
    createMany?: CarCreateManyCarTypeInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type CarUncheckedCreateNestedManyWithoutCarTypeInput = {
    create?: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput> | CarCreateWithoutCarTypeInput[] | CarUncheckedCreateWithoutCarTypeInput[]
    connectOrCreate?: CarCreateOrConnectWithoutCarTypeInput | CarCreateOrConnectWithoutCarTypeInput[]
    createMany?: CarCreateManyCarTypeInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type CarUpdateManyWithoutCarTypeNestedInput = {
    create?: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput> | CarCreateWithoutCarTypeInput[] | CarUncheckedCreateWithoutCarTypeInput[]
    connectOrCreate?: CarCreateOrConnectWithoutCarTypeInput | CarCreateOrConnectWithoutCarTypeInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutCarTypeInput | CarUpsertWithWhereUniqueWithoutCarTypeInput[]
    createMany?: CarCreateManyCarTypeInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutCarTypeInput | CarUpdateWithWhereUniqueWithoutCarTypeInput[]
    updateMany?: CarUpdateManyWithWhereWithoutCarTypeInput | CarUpdateManyWithWhereWithoutCarTypeInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type CarUncheckedUpdateManyWithoutCarTypeNestedInput = {
    create?: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput> | CarCreateWithoutCarTypeInput[] | CarUncheckedCreateWithoutCarTypeInput[]
    connectOrCreate?: CarCreateOrConnectWithoutCarTypeInput | CarCreateOrConnectWithoutCarTypeInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutCarTypeInput | CarUpsertWithWhereUniqueWithoutCarTypeInput[]
    createMany?: CarCreateManyCarTypeInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutCarTypeInput | CarUpdateWithWhereUniqueWithoutCarTypeInput[]
    updateMany?: CarUpdateManyWithWhereWithoutCarTypeInput | CarUpdateManyWithWhereWithoutCarTypeInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type CarCreateNestedManyWithoutInsuranceInput = {
    create?: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput> | CarCreateWithoutInsuranceInput[] | CarUncheckedCreateWithoutInsuranceInput[]
    connectOrCreate?: CarCreateOrConnectWithoutInsuranceInput | CarCreateOrConnectWithoutInsuranceInput[]
    createMany?: CarCreateManyInsuranceInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type CarUncheckedCreateNestedManyWithoutInsuranceInput = {
    create?: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput> | CarCreateWithoutInsuranceInput[] | CarUncheckedCreateWithoutInsuranceInput[]
    connectOrCreate?: CarCreateOrConnectWithoutInsuranceInput | CarCreateOrConnectWithoutInsuranceInput[]
    createMany?: CarCreateManyInsuranceInputEnvelope
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
  }

  export type CarUpdateManyWithoutInsuranceNestedInput = {
    create?: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput> | CarCreateWithoutInsuranceInput[] | CarUncheckedCreateWithoutInsuranceInput[]
    connectOrCreate?: CarCreateOrConnectWithoutInsuranceInput | CarCreateOrConnectWithoutInsuranceInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutInsuranceInput | CarUpsertWithWhereUniqueWithoutInsuranceInput[]
    createMany?: CarCreateManyInsuranceInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutInsuranceInput | CarUpdateWithWhereUniqueWithoutInsuranceInput[]
    updateMany?: CarUpdateManyWithWhereWithoutInsuranceInput | CarUpdateManyWithWhereWithoutInsuranceInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type CarUncheckedUpdateManyWithoutInsuranceNestedInput = {
    create?: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput> | CarCreateWithoutInsuranceInput[] | CarUncheckedCreateWithoutInsuranceInput[]
    connectOrCreate?: CarCreateOrConnectWithoutInsuranceInput | CarCreateOrConnectWithoutInsuranceInput[]
    upsert?: CarUpsertWithWhereUniqueWithoutInsuranceInput | CarUpsertWithWhereUniqueWithoutInsuranceInput[]
    createMany?: CarCreateManyInsuranceInputEnvelope
    set?: CarWhereUniqueInput | CarWhereUniqueInput[]
    disconnect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    delete?: CarWhereUniqueInput | CarWhereUniqueInput[]
    connect?: CarWhereUniqueInput | CarWhereUniqueInput[]
    update?: CarUpdateWithWhereUniqueWithoutInsuranceInput | CarUpdateWithWhereUniqueWithoutInsuranceInput[]
    updateMany?: CarUpdateManyWithWhereWithoutInsuranceInput | CarUpdateManyWithWhereWithoutInsuranceInput[]
    deleteMany?: CarScalarWhereInput | CarScalarWhereInput[]
  }

  export type RentalCreateNestedManyWithoutBankInput = {
    create?: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput> | RentalCreateWithoutBankInput[] | RentalUncheckedCreateWithoutBankInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutBankInput | RentalCreateOrConnectWithoutBankInput[]
    createMany?: RentalCreateManyBankInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutBankInput = {
    create?: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput> | RentalCreateWithoutBankInput[] | RentalUncheckedCreateWithoutBankInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutBankInput | RentalCreateOrConnectWithoutBankInput[]
    createMany?: RentalCreateManyBankInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type RentalUpdateManyWithoutBankNestedInput = {
    create?: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput> | RentalCreateWithoutBankInput[] | RentalUncheckedCreateWithoutBankInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutBankInput | RentalCreateOrConnectWithoutBankInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutBankInput | RentalUpsertWithWhereUniqueWithoutBankInput[]
    createMany?: RentalCreateManyBankInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutBankInput | RentalUpdateWithWhereUniqueWithoutBankInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutBankInput | RentalUpdateManyWithWhereWithoutBankInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutBankNestedInput = {
    create?: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput> | RentalCreateWithoutBankInput[] | RentalUncheckedCreateWithoutBankInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutBankInput | RentalCreateOrConnectWithoutBankInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutBankInput | RentalUpsertWithWhereUniqueWithoutBankInput[]
    createMany?: RentalCreateManyBankInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutBankInput | RentalUpdateWithWhereUniqueWithoutBankInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutBankInput | RentalUpdateManyWithWhereWithoutBankInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type CarTypeCreateNestedOneWithoutCarInput = {
    create?: XOR<CarTypeCreateWithoutCarInput, CarTypeUncheckedCreateWithoutCarInput>
    connectOrCreate?: CarTypeCreateOrConnectWithoutCarInput
    connect?: CarTypeWhereUniqueInput
  }

  export type InsuranceCreateNestedOneWithoutCarInput = {
    create?: XOR<InsuranceCreateWithoutCarInput, InsuranceUncheckedCreateWithoutCarInput>
    connectOrCreate?: InsuranceCreateOrConnectWithoutCarInput
    connect?: InsuranceWhereUniqueInput
  }

  export type RentalCreateNestedManyWithoutCarInput = {
    create?: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput> | RentalCreateWithoutCarInput[] | RentalUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutCarInput | RentalCreateOrConnectWithoutCarInput[]
    createMany?: RentalCreateManyCarInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutCarInput = {
    create?: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput> | ReviewCreateWithoutCarInput[] | ReviewUncheckedCreateWithoutCarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutCarInput | ReviewCreateOrConnectWithoutCarInput[]
    createMany?: ReviewCreateManyCarInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput> | RentalCreateWithoutCarInput[] | RentalUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutCarInput | RentalCreateOrConnectWithoutCarInput[]
    createMany?: RentalCreateManyCarInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutCarInput = {
    create?: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput> | ReviewCreateWithoutCarInput[] | ReviewUncheckedCreateWithoutCarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutCarInput | ReviewCreateOrConnectWithoutCarInput[]
    createMany?: ReviewCreateManyCarInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type CarTypeUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<CarTypeCreateWithoutCarInput, CarTypeUncheckedCreateWithoutCarInput>
    connectOrCreate?: CarTypeCreateOrConnectWithoutCarInput
    upsert?: CarTypeUpsertWithoutCarInput
    connect?: CarTypeWhereUniqueInput
    update?: XOR<XOR<CarTypeUpdateToOneWithWhereWithoutCarInput, CarTypeUpdateWithoutCarInput>, CarTypeUncheckedUpdateWithoutCarInput>
  }

  export type InsuranceUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<InsuranceCreateWithoutCarInput, InsuranceUncheckedCreateWithoutCarInput>
    connectOrCreate?: InsuranceCreateOrConnectWithoutCarInput
    upsert?: InsuranceUpsertWithoutCarInput
    connect?: InsuranceWhereUniqueInput
    update?: XOR<XOR<InsuranceUpdateToOneWithWhereWithoutCarInput, InsuranceUpdateWithoutCarInput>, InsuranceUncheckedUpdateWithoutCarInput>
  }

  export type RentalUpdateManyWithoutCarNestedInput = {
    create?: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput> | RentalCreateWithoutCarInput[] | RentalUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutCarInput | RentalCreateOrConnectWithoutCarInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutCarInput | RentalUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: RentalCreateManyCarInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutCarInput | RentalUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutCarInput | RentalUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutCarNestedInput = {
    create?: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput> | ReviewCreateWithoutCarInput[] | ReviewUncheckedCreateWithoutCarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutCarInput | ReviewCreateOrConnectWithoutCarInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutCarInput | ReviewUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: ReviewCreateManyCarInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutCarInput | ReviewUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutCarInput | ReviewUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput> | RentalCreateWithoutCarInput[] | RentalUncheckedCreateWithoutCarInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutCarInput | RentalCreateOrConnectWithoutCarInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutCarInput | RentalUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: RentalCreateManyCarInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutCarInput | RentalUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutCarInput | RentalUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutCarNestedInput = {
    create?: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput> | ReviewCreateWithoutCarInput[] | ReviewUncheckedCreateWithoutCarInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutCarInput | ReviewCreateOrConnectWithoutCarInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutCarInput | ReviewUpsertWithWhereUniqueWithoutCarInput[]
    createMany?: ReviewCreateManyCarInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutCarInput | ReviewUpdateWithWhereUniqueWithoutCarInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutCarInput | ReviewUpdateManyWithWhereWithoutCarInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type RentalCreateNestedOneWithoutReviewInput = {
    create?: XOR<RentalCreateWithoutReviewInput, RentalUncheckedCreateWithoutReviewInput>
    connectOrCreate?: RentalCreateOrConnectWithoutReviewInput
    connect?: RentalWhereUniqueInput
  }

  export type EmployeesCreateNestedOneWithoutReviewInput = {
    create?: XOR<EmployeesCreateWithoutReviewInput, EmployeesUncheckedCreateWithoutReviewInput>
    connectOrCreate?: EmployeesCreateOrConnectWithoutReviewInput
    connect?: EmployeesWhereUniqueInput
  }

  export type CarCreateNestedOneWithoutReviewInput = {
    create?: XOR<CarCreateWithoutReviewInput, CarUncheckedCreateWithoutReviewInput>
    connectOrCreate?: CarCreateOrConnectWithoutReviewInput
    connect?: CarWhereUniqueInput
  }

  export type RentalUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<RentalCreateWithoutReviewInput, RentalUncheckedCreateWithoutReviewInput>
    connectOrCreate?: RentalCreateOrConnectWithoutReviewInput
    upsert?: RentalUpsertWithoutReviewInput
    connect?: RentalWhereUniqueInput
    update?: XOR<XOR<RentalUpdateToOneWithWhereWithoutReviewInput, RentalUpdateWithoutReviewInput>, RentalUncheckedUpdateWithoutReviewInput>
  }

  export type EmployeesUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<EmployeesCreateWithoutReviewInput, EmployeesUncheckedCreateWithoutReviewInput>
    connectOrCreate?: EmployeesCreateOrConnectWithoutReviewInput
    upsert?: EmployeesUpsertWithoutReviewInput
    connect?: EmployeesWhereUniqueInput
    update?: XOR<XOR<EmployeesUpdateToOneWithWhereWithoutReviewInput, EmployeesUpdateWithoutReviewInput>, EmployeesUncheckedUpdateWithoutReviewInput>
  }

  export type CarUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<CarCreateWithoutReviewInput, CarUncheckedCreateWithoutReviewInput>
    connectOrCreate?: CarCreateOrConnectWithoutReviewInput
    upsert?: CarUpsertWithoutReviewInput
    connect?: CarWhereUniqueInput
    update?: XOR<XOR<CarUpdateToOneWithWhereWithoutReviewInput, CarUpdateWithoutReviewInput>, CarUncheckedUpdateWithoutReviewInput>
  }

  export type RentalCreateNestedOneWithoutPaymentInput = {
    create?: XOR<RentalCreateWithoutPaymentInput, RentalUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: RentalCreateOrConnectWithoutPaymentInput
    connect?: RentalWhereUniqueInput
  }

  export type RentalUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<RentalCreateWithoutPaymentInput, RentalUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: RentalCreateOrConnectWithoutPaymentInput
    upsert?: RentalUpsertWithoutPaymentInput
    connect?: RentalWhereUniqueInput
    update?: XOR<XOR<RentalUpdateToOneWithWhereWithoutPaymentInput, RentalUpdateWithoutPaymentInput>, RentalUncheckedUpdateWithoutPaymentInput>
  }

  export type UsersCreateNestedOneWithoutCarInput = {
    create?: XOR<UsersCreateWithoutCarInput, UsersUncheckedCreateWithoutCarInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCarInput
    connect?: UsersWhereUniqueInput
  }

  export type CarCreateNestedOneWithoutRentalInput = {
    create?: XOR<CarCreateWithoutRentalInput, CarUncheckedCreateWithoutRentalInput>
    connectOrCreate?: CarCreateOrConnectWithoutRentalInput
    connect?: CarWhereUniqueInput
  }

  export type BankCreateNestedOneWithoutRentalInput = {
    create?: XOR<BankCreateWithoutRentalInput, BankUncheckedCreateWithoutRentalInput>
    connectOrCreate?: BankCreateOrConnectWithoutRentalInput
    connect?: BankWhereUniqueInput
  }

  export type EmployeesCreateNestedOneWithoutRentalInput = {
    create?: XOR<EmployeesCreateWithoutRentalInput, EmployeesUncheckedCreateWithoutRentalInput>
    connectOrCreate?: EmployeesCreateOrConnectWithoutRentalInput
    connect?: EmployeesWhereUniqueInput
  }

  export type ReviewCreateNestedOneWithoutRentalInput = {
    create?: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutRentalInput
    connect?: ReviewWhereUniqueInput
  }

  export type paymentCreateNestedOneWithoutRentalInput = {
    create?: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
    connectOrCreate?: paymentCreateOrConnectWithoutRentalInput
    connect?: paymentWhereUniqueInput
  }

  export type ReviewUncheckedCreateNestedOneWithoutRentalInput = {
    create?: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutRentalInput
    connect?: ReviewWhereUniqueInput
  }

  export type paymentUncheckedCreateNestedOneWithoutRentalInput = {
    create?: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
    connectOrCreate?: paymentCreateOrConnectWithoutRentalInput
    connect?: paymentWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<UsersCreateWithoutCarInput, UsersUncheckedCreateWithoutCarInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCarInput
    upsert?: UsersUpsertWithoutCarInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCarInput, UsersUpdateWithoutCarInput>, UsersUncheckedUpdateWithoutCarInput>
  }

  export type CarUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<CarCreateWithoutRentalInput, CarUncheckedCreateWithoutRentalInput>
    connectOrCreate?: CarCreateOrConnectWithoutRentalInput
    upsert?: CarUpsertWithoutRentalInput
    connect?: CarWhereUniqueInput
    update?: XOR<XOR<CarUpdateToOneWithWhereWithoutRentalInput, CarUpdateWithoutRentalInput>, CarUncheckedUpdateWithoutRentalInput>
  }

  export type BankUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<BankCreateWithoutRentalInput, BankUncheckedCreateWithoutRentalInput>
    connectOrCreate?: BankCreateOrConnectWithoutRentalInput
    upsert?: BankUpsertWithoutRentalInput
    connect?: BankWhereUniqueInput
    update?: XOR<XOR<BankUpdateToOneWithWhereWithoutRentalInput, BankUpdateWithoutRentalInput>, BankUncheckedUpdateWithoutRentalInput>
  }

  export type EmployeesUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<EmployeesCreateWithoutRentalInput, EmployeesUncheckedCreateWithoutRentalInput>
    connectOrCreate?: EmployeesCreateOrConnectWithoutRentalInput
    upsert?: EmployeesUpsertWithoutRentalInput
    connect?: EmployeesWhereUniqueInput
    update?: XOR<XOR<EmployeesUpdateToOneWithWhereWithoutRentalInput, EmployeesUpdateWithoutRentalInput>, EmployeesUncheckedUpdateWithoutRentalInput>
  }

  export type ReviewUpdateOneWithoutRentalNestedInput = {
    create?: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutRentalInput
    upsert?: ReviewUpsertWithoutRentalInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutRentalInput, ReviewUpdateWithoutRentalInput>, ReviewUncheckedUpdateWithoutRentalInput>
  }

  export type paymentUpdateOneWithoutRentalNestedInput = {
    create?: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
    connectOrCreate?: paymentCreateOrConnectWithoutRentalInput
    upsert?: paymentUpsertWithoutRentalInput
    disconnect?: paymentWhereInput | boolean
    delete?: paymentWhereInput | boolean
    connect?: paymentWhereUniqueInput
    update?: XOR<XOR<paymentUpdateToOneWithWhereWithoutRentalInput, paymentUpdateWithoutRentalInput>, paymentUncheckedUpdateWithoutRentalInput>
  }

  export type ReviewUncheckedUpdateOneWithoutRentalNestedInput = {
    create?: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutRentalInput
    upsert?: ReviewUpsertWithoutRentalInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutRentalInput, ReviewUpdateWithoutRentalInput>, ReviewUncheckedUpdateWithoutRentalInput>
  }

  export type paymentUncheckedUpdateOneWithoutRentalNestedInput = {
    create?: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
    connectOrCreate?: paymentCreateOrConnectWithoutRentalInput
    upsert?: paymentUpsertWithoutRentalInput
    disconnect?: paymentWhereInput | boolean
    delete?: paymentWhereInput | boolean
    connect?: paymentWhereUniqueInput
    update?: XOR<XOR<paymentUpdateToOneWithWhereWithoutRentalInput, paymentUpdateWithoutRentalInput>, paymentUncheckedUpdateWithoutRentalInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumDiscount_TypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Discount_Type | EnumDiscount_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Discount_Type[]
    notIn?: $Enums.Discount_Type[]
    not?: NestedEnumDiscount_TypeFilter<$PrismaModel> | $Enums.Discount_Type
  }

  export type NestedEnumStatu_PromotionFilter<$PrismaModel = never> = {
    equals?: $Enums.Statu_Promotion | EnumStatu_PromotionFieldRefInput<$PrismaModel>
    in?: $Enums.Statu_Promotion[]
    notIn?: $Enums.Statu_Promotion[]
    not?: NestedEnumStatu_PromotionFilter<$PrismaModel> | $Enums.Statu_Promotion
  }

  export type NestedEnumDiscount_TypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Discount_Type | EnumDiscount_TypeFieldRefInput<$PrismaModel>
    in?: $Enums.Discount_Type[]
    notIn?: $Enums.Discount_Type[]
    not?: NestedEnumDiscount_TypeWithAggregatesFilter<$PrismaModel> | $Enums.Discount_Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiscount_TypeFilter<$PrismaModel>
    _max?: NestedEnumDiscount_TypeFilter<$PrismaModel>
  }

  export type NestedEnumStatu_PromotionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Statu_Promotion | EnumStatu_PromotionFieldRefInput<$PrismaModel>
    in?: $Enums.Statu_Promotion[]
    notIn?: $Enums.Statu_Promotion[]
    not?: NestedEnumStatu_PromotionWithAggregatesFilter<$PrismaModel> | $Enums.Statu_Promotion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatu_PromotionFilter<$PrismaModel>
    _max?: NestedEnumStatu_PromotionFilter<$PrismaModel>
  }

  export type CouponsCreateWithoutUserInput = {
    id?: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type CouponsUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type CouponsCreateOrConnectWithoutUserInput = {
    where: CouponsWhereUniqueInput
    create: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput>
  }

  export type CouponsCreateManyUserInputEnvelope = {
    data: CouponsCreateManyUserInput | CouponsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RentalCreateWithoutUsersInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    car: CarCreateNestedOneWithoutRentalInput
    bank: BankCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutUsersInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutUsersInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput>
  }

  export type RentalCreateManyUsersInputEnvelope = {
    data: RentalCreateManyUsersInput | RentalCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type CouponsUpsertWithWhereUniqueWithoutUserInput = {
    where: CouponsWhereUniqueInput
    update: XOR<CouponsUpdateWithoutUserInput, CouponsUncheckedUpdateWithoutUserInput>
    create: XOR<CouponsCreateWithoutUserInput, CouponsUncheckedCreateWithoutUserInput>
  }

  export type CouponsUpdateWithWhereUniqueWithoutUserInput = {
    where: CouponsWhereUniqueInput
    data: XOR<CouponsUpdateWithoutUserInput, CouponsUncheckedUpdateWithoutUserInput>
  }

  export type CouponsUpdateManyWithWhereWithoutUserInput = {
    where: CouponsScalarWhereInput
    data: XOR<CouponsUpdateManyMutationInput, CouponsUncheckedUpdateManyWithoutUserInput>
  }

  export type CouponsScalarWhereInput = {
    AND?: CouponsScalarWhereInput | CouponsScalarWhereInput[]
    OR?: CouponsScalarWhereInput[]
    NOT?: CouponsScalarWhereInput | CouponsScalarWhereInput[]
    id?: StringFilter<"Coupons"> | string
    user_id?: StringFilter<"Coupons"> | string
    code?: StringFilter<"Coupons"> | string
    description?: StringFilter<"Coupons"> | string
    discount?: FloatFilter<"Coupons"> | number
    status?: EnumStatu_PromotionFilter<"Coupons"> | $Enums.Statu_Promotion
    start_date?: DateTimeFilter<"Coupons"> | Date | string
    end_date?: DateTimeFilter<"Coupons"> | Date | string
    createAt?: DateTimeFilter<"Coupons"> | Date | string
    updateAt?: DateTimeFilter<"Coupons"> | Date | string
  }

  export type RentalUpsertWithWhereUniqueWithoutUsersInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutUsersInput, RentalUncheckedUpdateWithoutUsersInput>
    create: XOR<RentalCreateWithoutUsersInput, RentalUncheckedCreateWithoutUsersInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutUsersInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutUsersInput, RentalUncheckedUpdateWithoutUsersInput>
  }

  export type RentalUpdateManyWithWhereWithoutUsersInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutUsersInput>
  }

  export type RentalScalarWhereInput = {
    AND?: RentalScalarWhereInput | RentalScalarWhereInput[]
    OR?: RentalScalarWhereInput[]
    NOT?: RentalScalarWhereInput | RentalScalarWhereInput[]
    id?: StringFilter<"Rental"> | string
    first_name?: StringFilter<"Rental"> | string
    last_name?: StringFilter<"Rental"> | string
    phone?: IntFilter<"Rental"> | number
    passport?: StringFilter<"Rental"> | string
    identity_card?: StringFilter<"Rental"> | string
    dri_icenes?: StringFilter<"Rental"> | string
    pay_image?: StringFilter<"Rental"> | string
    booking_pay?: FloatFilter<"Rental"> | number
    usersId?: StringFilter<"Rental"> | string
    carId?: StringFilter<"Rental"> | string
    employeesId?: StringFilter<"Rental"> | string
    bankId?: StringFilter<"Rental"> | string
    creatDat?: DateTimeFilter<"Rental"> | Date | string
    updateDat?: DateTimeFilter<"Rental"> | Date | string
  }

  export type DepartmentsCreateWithoutEmployeesInput = {
    id?: string
    deptName: string
    pricePerDay?: string | null
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type DepartmentsUncheckedCreateWithoutEmployeesInput = {
    id?: string
    deptName: string
    pricePerDay?: string | null
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type DepartmentsCreateOrConnectWithoutEmployeesInput = {
    where: DepartmentsWhereUniqueInput
    create: XOR<DepartmentsCreateWithoutEmployeesInput, DepartmentsUncheckedCreateWithoutEmployeesInput>
  }

  export type RentalCreateWithoutEmployeesInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    car: CarCreateNestedOneWithoutRentalInput
    bank: BankCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutEmployeesInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutEmployeesInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput>
  }

  export type RentalCreateManyEmployeesInputEnvelope = {
    data: RentalCreateManyEmployeesInput | RentalCreateManyEmployeesInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutEmplyInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rental: RentalCreateNestedOneWithoutReviewInput
    car: CarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutEmplyInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    carId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutEmplyInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput>
  }

  export type ReviewCreateManyEmplyInputEnvelope = {
    data: ReviewCreateManyEmplyInput | ReviewCreateManyEmplyInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentsUpsertWithoutEmployeesInput = {
    update: XOR<DepartmentsUpdateWithoutEmployeesInput, DepartmentsUncheckedUpdateWithoutEmployeesInput>
    create: XOR<DepartmentsCreateWithoutEmployeesInput, DepartmentsUncheckedCreateWithoutEmployeesInput>
    where?: DepartmentsWhereInput
  }

  export type DepartmentsUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: DepartmentsWhereInput
    data: XOR<DepartmentsUpdateWithoutEmployeesInput, DepartmentsUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentsUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentsUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    deptName?: StringFieldUpdateOperationsInput | string
    pricePerDay?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalUpsertWithWhereUniqueWithoutEmployeesInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutEmployeesInput, RentalUncheckedUpdateWithoutEmployeesInput>
    create: XOR<RentalCreateWithoutEmployeesInput, RentalUncheckedCreateWithoutEmployeesInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutEmployeesInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutEmployeesInput, RentalUncheckedUpdateWithoutEmployeesInput>
  }

  export type RentalUpdateManyWithWhereWithoutEmployeesInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutEmployeesInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutEmplyInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutEmplyInput, ReviewUncheckedUpdateWithoutEmplyInput>
    create: XOR<ReviewCreateWithoutEmplyInput, ReviewUncheckedCreateWithoutEmplyInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutEmplyInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutEmplyInput, ReviewUncheckedUpdateWithoutEmplyInput>
  }

  export type ReviewUpdateManyWithWhereWithoutEmplyInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutEmplyInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    comment?: StringFilter<"Review"> | string
    carPoint?: IntFilter<"Review"> | number
    emplyPoint?: IntFilter<"Review"> | number
    emplyId?: StringFilter<"Review"> | string
    carId?: StringFilter<"Review"> | string
    rentalId?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type EmployeesCreateWithoutDepartmentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    rental?: RentalCreateNestedManyWithoutEmployeesInput
    review?: ReviewCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesUncheckedCreateWithoutDepartmentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutEmployeesInput
    review?: ReviewUncheckedCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesCreateOrConnectWithoutDepartmentInput = {
    where: EmployeesWhereUniqueInput
    create: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput>
  }

  export type EmployeesCreateManyDepartmentInputEnvelope = {
    data: EmployeesCreateManyDepartmentInput | EmployeesCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type EmployeesUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: EmployeesWhereUniqueInput
    update: XOR<EmployeesUpdateWithoutDepartmentInput, EmployeesUncheckedUpdateWithoutDepartmentInput>
    create: XOR<EmployeesCreateWithoutDepartmentInput, EmployeesUncheckedCreateWithoutDepartmentInput>
  }

  export type EmployeesUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: EmployeesWhereUniqueInput
    data: XOR<EmployeesUpdateWithoutDepartmentInput, EmployeesUncheckedUpdateWithoutDepartmentInput>
  }

  export type EmployeesUpdateManyWithWhereWithoutDepartmentInput = {
    where: EmployeesScalarWhereInput
    data: XOR<EmployeesUpdateManyMutationInput, EmployeesUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type EmployeesScalarWhereInput = {
    AND?: EmployeesScalarWhereInput | EmployeesScalarWhereInput[]
    OR?: EmployeesScalarWhereInput[]
    NOT?: EmployeesScalarWhereInput | EmployeesScalarWhereInput[]
    id?: StringFilter<"Employees"> | string
    dept_id?: StringFilter<"Employees"> | string
    firstName?: StringFilter<"Employees"> | string
    lastName?: StringFilter<"Employees"> | string
    email?: StringFilter<"Employees"> | string
    phone?: IntFilter<"Employees"> | number
    village?: StringFilter<"Employees"> | string
    distrit?: StringFilter<"Employees"> | string
    provinced?: StringFilter<"Employees"> | string
    natinalIdCard?: StringFilter<"Employees"> | string
    salary?: FloatFilter<"Employees"> | number
    birthday?: DateTimeFilter<"Employees"> | Date | string
    createAt?: DateTimeFilter<"Employees"> | Date | string
    updateAt?: DateTimeFilter<"Employees"> | Date | string
  }

  export type UsersCreateWithoutCouponInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    car?: RentalCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutCouponInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    car?: RentalUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutCouponInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCouponInput, UsersUncheckedCreateWithoutCouponInput>
  }

  export type UsersUpsertWithoutCouponInput = {
    update: XOR<UsersUpdateWithoutCouponInput, UsersUncheckedUpdateWithoutCouponInput>
    create: XOR<UsersCreateWithoutCouponInput, UsersUncheckedCreateWithoutCouponInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCouponInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCouponInput, UsersUncheckedUpdateWithoutCouponInput>
  }

  export type UsersUpdateWithoutCouponInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: RentalUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutCouponInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: RentalUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CarCreateWithoutCarTypeInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insurance: InsuranceCreateNestedOneWithoutCarInput
    rental?: RentalCreateNestedManyWithoutCarInput
    review?: ReviewCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutCarTypeInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutCarInput
    review?: ReviewUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutCarTypeInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput>
  }

  export type CarCreateManyCarTypeInputEnvelope = {
    data: CarCreateManyCarTypeInput | CarCreateManyCarTypeInput[]
    skipDuplicates?: boolean
  }

  export type CarUpsertWithWhereUniqueWithoutCarTypeInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutCarTypeInput, CarUncheckedUpdateWithoutCarTypeInput>
    create: XOR<CarCreateWithoutCarTypeInput, CarUncheckedCreateWithoutCarTypeInput>
  }

  export type CarUpdateWithWhereUniqueWithoutCarTypeInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutCarTypeInput, CarUncheckedUpdateWithoutCarTypeInput>
  }

  export type CarUpdateManyWithWhereWithoutCarTypeInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarTypeInput>
  }

  export type CarScalarWhereInput = {
    AND?: CarScalarWhereInput | CarScalarWhereInput[]
    OR?: CarScalarWhereInput[]
    NOT?: CarScalarWhereInput | CarScalarWhereInput[]
    id?: StringFilter<"Car"> | string
    name?: StringFilter<"Car"> | string
    image?: StringFilter<"Car"> | string
    year?: StringFilter<"Car"> | string
    plate_city?: StringFilter<"Car"> | string
    plate_text?: StringFilter<"Car"> | string
    plate_number?: StringFilter<"Car"> | string
    gps?: StringFilter<"Car"> | string
    car_seat?: StringFilter<"Car"> | string
    car_gear?: StringFilter<"Car"> | string
    color?: StringFilter<"Car"> | string
    status?: StringFilter<"Car"> | string
    price?: FloatFilter<"Car"> | number
    carTypeId?: StringFilter<"Car"> | string
    insuranceId?: StringFilter<"Car"> | string
    createdAt?: DateTimeFilter<"Car"> | Date | string
    updatedAt?: DateTimeFilter<"Car"> | Date | string
  }

  export type CarCreateWithoutInsuranceInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    carType: CarTypeCreateNestedOneWithoutCarInput
    rental?: RentalCreateNestedManyWithoutCarInput
    review?: ReviewCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutInsuranceInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutCarInput
    review?: ReviewUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutInsuranceInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput>
  }

  export type CarCreateManyInsuranceInputEnvelope = {
    data: CarCreateManyInsuranceInput | CarCreateManyInsuranceInput[]
    skipDuplicates?: boolean
  }

  export type CarUpsertWithWhereUniqueWithoutInsuranceInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutInsuranceInput, CarUncheckedUpdateWithoutInsuranceInput>
    create: XOR<CarCreateWithoutInsuranceInput, CarUncheckedCreateWithoutInsuranceInput>
  }

  export type CarUpdateWithWhereUniqueWithoutInsuranceInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutInsuranceInput, CarUncheckedUpdateWithoutInsuranceInput>
  }

  export type CarUpdateManyWithWhereWithoutInsuranceInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutInsuranceInput>
  }

  export type RentalCreateWithoutBankInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    car: CarCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutBankInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutBankInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput>
  }

  export type RentalCreateManyBankInputEnvelope = {
    data: RentalCreateManyBankInput | RentalCreateManyBankInput[]
    skipDuplicates?: boolean
  }

  export type RentalUpsertWithWhereUniqueWithoutBankInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutBankInput, RentalUncheckedUpdateWithoutBankInput>
    create: XOR<RentalCreateWithoutBankInput, RentalUncheckedCreateWithoutBankInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutBankInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutBankInput, RentalUncheckedUpdateWithoutBankInput>
  }

  export type RentalUpdateManyWithWhereWithoutBankInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutBankInput>
  }

  export type CarTypeCreateWithoutCarInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarTypeUncheckedCreateWithoutCarInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarTypeCreateOrConnectWithoutCarInput = {
    where: CarTypeWhereUniqueInput
    create: XOR<CarTypeCreateWithoutCarInput, CarTypeUncheckedCreateWithoutCarInput>
  }

  export type InsuranceCreateWithoutCarInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceUncheckedCreateWithoutCarInput = {
    id?: string
    name: string
    icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsuranceCreateOrConnectWithoutCarInput = {
    where: InsuranceWhereUniqueInput
    create: XOR<InsuranceCreateWithoutCarInput, InsuranceUncheckedCreateWithoutCarInput>
  }

  export type RentalCreateWithoutCarInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    bank: BankCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutCarInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutCarInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput>
  }

  export type RentalCreateManyCarInputEnvelope = {
    data: RentalCreateManyCarInput | RentalCreateManyCarInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutCarInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rental: RentalCreateNestedOneWithoutReviewInput
    emply: EmployeesCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutCarInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutCarInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput>
  }

  export type ReviewCreateManyCarInputEnvelope = {
    data: ReviewCreateManyCarInput | ReviewCreateManyCarInput[]
    skipDuplicates?: boolean
  }

  export type CarTypeUpsertWithoutCarInput = {
    update: XOR<CarTypeUpdateWithoutCarInput, CarTypeUncheckedUpdateWithoutCarInput>
    create: XOR<CarTypeCreateWithoutCarInput, CarTypeUncheckedCreateWithoutCarInput>
    where?: CarTypeWhereInput
  }

  export type CarTypeUpdateToOneWithWhereWithoutCarInput = {
    where?: CarTypeWhereInput
    data: XOR<CarTypeUpdateWithoutCarInput, CarTypeUncheckedUpdateWithoutCarInput>
  }

  export type CarTypeUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarTypeUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceUpsertWithoutCarInput = {
    update: XOR<InsuranceUpdateWithoutCarInput, InsuranceUncheckedUpdateWithoutCarInput>
    create: XOR<InsuranceCreateWithoutCarInput, InsuranceUncheckedCreateWithoutCarInput>
    where?: InsuranceWhereInput
  }

  export type InsuranceUpdateToOneWithWhereWithoutCarInput = {
    where?: InsuranceWhereInput
    data: XOR<InsuranceUpdateWithoutCarInput, InsuranceUncheckedUpdateWithoutCarInput>
  }

  export type InsuranceUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsuranceUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalUpsertWithWhereUniqueWithoutCarInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutCarInput, RentalUncheckedUpdateWithoutCarInput>
    create: XOR<RentalCreateWithoutCarInput, RentalUncheckedCreateWithoutCarInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutCarInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutCarInput, RentalUncheckedUpdateWithoutCarInput>
  }

  export type RentalUpdateManyWithWhereWithoutCarInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutCarInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutCarInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutCarInput, ReviewUncheckedUpdateWithoutCarInput>
    create: XOR<ReviewCreateWithoutCarInput, ReviewUncheckedCreateWithoutCarInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutCarInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutCarInput, ReviewUncheckedUpdateWithoutCarInput>
  }

  export type ReviewUpdateManyWithWhereWithoutCarInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutCarInput>
  }

  export type RentalCreateWithoutReviewInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    car: CarCreateNestedOneWithoutRentalInput
    bank: BankCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    payment?: paymentCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutReviewInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    payment?: paymentUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutReviewInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutReviewInput, RentalUncheckedCreateWithoutReviewInput>
  }

  export type EmployeesCreateWithoutReviewInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    department: DepartmentsCreateNestedOneWithoutEmployeesInput
    rental?: RentalCreateNestedManyWithoutEmployeesInput
  }

  export type EmployeesUncheckedCreateWithoutReviewInput = {
    id?: string
    dept_id: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutEmployeesInput
  }

  export type EmployeesCreateOrConnectWithoutReviewInput = {
    where: EmployeesWhereUniqueInput
    create: XOR<EmployeesCreateWithoutReviewInput, EmployeesUncheckedCreateWithoutReviewInput>
  }

  export type CarCreateWithoutReviewInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    carType: CarTypeCreateNestedOneWithoutCarInput
    insurance: InsuranceCreateNestedOneWithoutCarInput
    rental?: RentalCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutReviewInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rental?: RentalUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutReviewInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutReviewInput, CarUncheckedCreateWithoutReviewInput>
  }

  export type RentalUpsertWithoutReviewInput = {
    update: XOR<RentalUpdateWithoutReviewInput, RentalUncheckedUpdateWithoutReviewInput>
    create: XOR<RentalCreateWithoutReviewInput, RentalUncheckedCreateWithoutReviewInput>
    where?: RentalWhereInput
  }

  export type RentalUpdateToOneWithWhereWithoutReviewInput = {
    where?: RentalWhereInput
    data: XOR<RentalUpdateWithoutReviewInput, RentalUncheckedUpdateWithoutReviewInput>
  }

  export type RentalUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type EmployeesUpsertWithoutReviewInput = {
    update: XOR<EmployeesUpdateWithoutReviewInput, EmployeesUncheckedUpdateWithoutReviewInput>
    create: XOR<EmployeesCreateWithoutReviewInput, EmployeesUncheckedCreateWithoutReviewInput>
    where?: EmployeesWhereInput
  }

  export type EmployeesUpdateToOneWithWhereWithoutReviewInput = {
    where?: EmployeesWhereInput
    data: XOR<EmployeesUpdateWithoutReviewInput, EmployeesUncheckedUpdateWithoutReviewInput>
  }

  export type EmployeesUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentsUpdateOneRequiredWithoutEmployeesNestedInput
    rental?: RentalUpdateManyWithoutEmployeesNestedInput
  }

  export type EmployeesUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    dept_id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutEmployeesNestedInput
  }

  export type CarUpsertWithoutReviewInput = {
    update: XOR<CarUpdateWithoutReviewInput, CarUncheckedUpdateWithoutReviewInput>
    create: XOR<CarCreateWithoutReviewInput, CarUncheckedCreateWithoutReviewInput>
    where?: CarWhereInput
  }

  export type CarUpdateToOneWithWhereWithoutReviewInput = {
    where?: CarWhereInput
    data: XOR<CarUpdateWithoutReviewInput, CarUncheckedUpdateWithoutReviewInput>
  }

  export type CarUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carType?: CarTypeUpdateOneRequiredWithoutCarNestedInput
    insurance?: InsuranceUpdateOneRequiredWithoutCarNestedInput
    rental?: RentalUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutCarNestedInput
  }

  export type RentalCreateWithoutPaymentInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    creatDat?: Date | string
    updateDat?: Date | string
    users: UsersCreateNestedOneWithoutCarInput
    car: CarCreateNestedOneWithoutRentalInput
    bank: BankCreateNestedOneWithoutRentalInput
    Employees: EmployeesCreateNestedOneWithoutRentalInput
    review?: ReviewCreateNestedOneWithoutRentalInput
  }

  export type RentalUncheckedCreateWithoutPaymentInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
    review?: ReviewUncheckedCreateNestedOneWithoutRentalInput
  }

  export type RentalCreateOrConnectWithoutPaymentInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutPaymentInput, RentalUncheckedCreateWithoutPaymentInput>
  }

  export type RentalUpsertWithoutPaymentInput = {
    update: XOR<RentalUpdateWithoutPaymentInput, RentalUncheckedUpdateWithoutPaymentInput>
    create: XOR<RentalCreateWithoutPaymentInput, RentalUncheckedCreateWithoutPaymentInput>
    where?: RentalWhereInput
  }

  export type RentalUpdateToOneWithWhereWithoutPaymentInput = {
    where?: RentalWhereInput
    data: XOR<RentalUpdateWithoutPaymentInput, RentalUncheckedUpdateWithoutPaymentInput>
  }

  export type RentalUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type UsersCreateWithoutCarInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    coupon?: CouponsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCarInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    password: string
    profile?: string | null
    role?: $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: Date | string
    updateAt?: Date | string
    coupon?: CouponsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCarInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCarInput, UsersUncheckedCreateWithoutCarInput>
  }

  export type CarCreateWithoutRentalInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    carType: CarTypeCreateNestedOneWithoutCarInput
    insurance: InsuranceCreateNestedOneWithoutCarInput
    review?: ReviewCreateNestedManyWithoutCarInput
  }

  export type CarUncheckedCreateWithoutRentalInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    review?: ReviewUncheckedCreateNestedManyWithoutCarInput
  }

  export type CarCreateOrConnectWithoutRentalInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutRentalInput, CarUncheckedCreateWithoutRentalInput>
  }

  export type BankCreateWithoutRentalInput = {
    id?: string
    name: string
    icon: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankUncheckedCreateWithoutRentalInput = {
    id?: string
    name: string
    icon: string
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankCreateOrConnectWithoutRentalInput = {
    where: BankWhereUniqueInput
    create: XOR<BankCreateWithoutRentalInput, BankUncheckedCreateWithoutRentalInput>
  }

  export type EmployeesCreateWithoutRentalInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    department: DepartmentsCreateNestedOneWithoutEmployeesInput
    review?: ReviewCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesUncheckedCreateWithoutRentalInput = {
    id?: string
    dept_id: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
    review?: ReviewUncheckedCreateNestedManyWithoutEmplyInput
  }

  export type EmployeesCreateOrConnectWithoutRentalInput = {
    where: EmployeesWhereUniqueInput
    create: XOR<EmployeesCreateWithoutRentalInput, EmployeesUncheckedCreateWithoutRentalInput>
  }

  export type ReviewCreateWithoutRentalInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    createdAt?: Date | string
    updatedAt?: Date | string
    emply: EmployeesCreateNestedOneWithoutReviewInput
    car: CarCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutRentalInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    carId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutRentalInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
  }

  export type paymentCreateWithoutRentalInput = {
    id?: string
    price: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentUncheckedCreateWithoutRentalInput = {
    id?: string
    price: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentCreateOrConnectWithoutRentalInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
  }

  export type UsersUpsertWithoutCarInput = {
    update: XOR<UsersUpdateWithoutCarInput, UsersUncheckedUpdateWithoutCarInput>
    create: XOR<UsersCreateWithoutCarInput, UsersUncheckedCreateWithoutCarInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCarInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCarInput, UsersUncheckedUpdateWithoutCarInput>
  }

  export type UsersUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupon?: CouponsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    otp?: NullableJsonNullValueInput | InputJsonValue
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coupon?: CouponsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CarUpsertWithoutRentalInput = {
    update: XOR<CarUpdateWithoutRentalInput, CarUncheckedUpdateWithoutRentalInput>
    create: XOR<CarCreateWithoutRentalInput, CarUncheckedCreateWithoutRentalInput>
    where?: CarWhereInput
  }

  export type CarUpdateToOneWithWhereWithoutRentalInput = {
    where?: CarWhereInput
    data: XOR<CarUpdateWithoutRentalInput, CarUncheckedUpdateWithoutRentalInput>
  }

  export type CarUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carType?: CarTypeUpdateOneRequiredWithoutCarNestedInput
    insurance?: InsuranceUpdateOneRequiredWithoutCarNestedInput
    review?: ReviewUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateManyWithoutCarNestedInput
  }

  export type BankUpsertWithoutRentalInput = {
    update: XOR<BankUpdateWithoutRentalInput, BankUncheckedUpdateWithoutRentalInput>
    create: XOR<BankCreateWithoutRentalInput, BankUncheckedCreateWithoutRentalInput>
    where?: BankWhereInput
  }

  export type BankUpdateToOneWithWhereWithoutRentalInput = {
    where?: BankWhereInput
    data: XOR<BankUpdateWithoutRentalInput, BankUncheckedUpdateWithoutRentalInput>
  }

  export type BankUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankUncheckedUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeesUpsertWithoutRentalInput = {
    update: XOR<EmployeesUpdateWithoutRentalInput, EmployeesUncheckedUpdateWithoutRentalInput>
    create: XOR<EmployeesCreateWithoutRentalInput, EmployeesUncheckedCreateWithoutRentalInput>
    where?: EmployeesWhereInput
  }

  export type EmployeesUpdateToOneWithWhereWithoutRentalInput = {
    where?: EmployeesWhereInput
    data: XOR<EmployeesUpdateWithoutRentalInput, EmployeesUncheckedUpdateWithoutRentalInput>
  }

  export type EmployeesUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentsUpdateOneRequiredWithoutEmployeesNestedInput
    review?: ReviewUpdateManyWithoutEmplyNestedInput
  }

  export type EmployeesUncheckedUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    dept_id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateManyWithoutEmplyNestedInput
  }

  export type ReviewUpsertWithoutRentalInput = {
    update: XOR<ReviewUpdateWithoutRentalInput, ReviewUncheckedUpdateWithoutRentalInput>
    create: XOR<ReviewCreateWithoutRentalInput, ReviewUncheckedCreateWithoutRentalInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutRentalInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutRentalInput, ReviewUncheckedUpdateWithoutRentalInput>
  }

  export type ReviewUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emply?: EmployeesUpdateOneRequiredWithoutReviewNestedInput
    car?: CarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    emplyId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUpsertWithoutRentalInput = {
    update: XOR<paymentUpdateWithoutRentalInput, paymentUncheckedUpdateWithoutRentalInput>
    create: XOR<paymentCreateWithoutRentalInput, paymentUncheckedCreateWithoutRentalInput>
    where?: paymentWhereInput
  }

  export type paymentUpdateToOneWithWhereWithoutRentalInput = {
    where?: paymentWhereInput
    data: XOR<paymentUpdateWithoutRentalInput, paymentUncheckedUpdateWithoutRentalInput>
  }

  export type paymentUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUncheckedUpdateWithoutRentalInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsCreateManyUserInput = {
    id?: string
    code: string
    description: string
    discount: number
    status?: $Enums.Statu_Promotion
    start_date: Date | string
    end_date: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type RentalCreateManyUsersInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    carId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
  }

  export type CouponsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CouponsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatu_PromotionFieldUpdateOperationsInput | $Enums.Statu_Promotion
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalCreateManyEmployeesInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
  }

  export type ReviewCreateManyEmplyInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    carId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RentalUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateManyWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutEmplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateOneRequiredWithoutReviewNestedInput
    car?: CarUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutEmplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    carId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutEmplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    carId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeesCreateManyDepartmentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: number
    village: string
    distrit: string
    provinced: string
    natinalIdCard: string
    salary: number
    birthday: Date | string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type EmployeesUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateManyWithoutEmployeesNestedInput
    review?: ReviewUpdateManyWithoutEmplyNestedInput
  }

  export type EmployeesUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutEmployeesNestedInput
    review?: ReviewUncheckedUpdateManyWithoutEmplyNestedInput
  }

  export type EmployeesUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    village?: StringFieldUpdateOperationsInput | string
    distrit?: StringFieldUpdateOperationsInput | string
    provinced?: StringFieldUpdateOperationsInput | string
    natinalIdCard?: StringFieldUpdateOperationsInput | string
    salary?: FloatFieldUpdateOperationsInput | number
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarCreateManyCarTypeInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    insuranceId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarUpdateWithoutCarTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insurance?: InsuranceUpdateOneRequiredWithoutCarNestedInput
    rental?: RentalUpdateManyWithoutCarNestedInput
    review?: ReviewUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutCarTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutCarNestedInput
    review?: ReviewUncheckedUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateManyWithoutCarTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    insuranceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarCreateManyInsuranceInput = {
    id?: string
    name: string
    image: string
    year: string
    plate_city: string
    plate_text: string
    plate_number: string
    gps: string
    car_seat: string
    car_gear: string
    color: string
    status: string
    price: number
    carTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CarUpdateWithoutInsuranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    carType?: CarTypeUpdateOneRequiredWithoutCarNestedInput
    rental?: RentalUpdateManyWithoutCarNestedInput
    review?: ReviewUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutInsuranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUncheckedUpdateManyWithoutCarNestedInput
    review?: ReviewUncheckedUpdateManyWithoutCarNestedInput
  }

  export type CarUncheckedUpdateManyWithoutInsuranceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    plate_city?: StringFieldUpdateOperationsInput | string
    plate_text?: StringFieldUpdateOperationsInput | string
    plate_number?: StringFieldUpdateOperationsInput | string
    gps?: StringFieldUpdateOperationsInput | string
    car_seat?: StringFieldUpdateOperationsInput | string
    car_gear?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    carTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalCreateManyBankInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    carId: string
    employeesId: string
    creatDat?: Date | string
    updateDat?: Date | string
  }

  export type RentalUpdateWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    car?: CarUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateManyWithoutBankInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    carId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RentalCreateManyCarInput = {
    id?: string
    first_name: string
    last_name: string
    phone: number
    passport: string
    identity_card: string
    dri_icenes: string
    pay_image: string
    booking_pay: number
    usersId: string
    employeesId: string
    bankId: string
    creatDat?: Date | string
    updateDat?: Date | string
  }

  export type ReviewCreateManyCarInput = {
    id?: string
    comment: string
    carPoint: number
    emplyPoint: number
    emplyId: string
    rentalId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RentalUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UsersUpdateOneRequiredWithoutCarNestedInput
    bank?: BankUpdateOneRequiredWithoutRentalNestedInput
    Employees?: EmployeesUpdateOneRequiredWithoutRentalNestedInput
    review?: ReviewUpdateOneWithoutRentalNestedInput
    payment?: paymentUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
    review?: ReviewUncheckedUpdateOneWithoutRentalNestedInput
    payment?: paymentUncheckedUpdateOneWithoutRentalNestedInput
  }

  export type RentalUncheckedUpdateManyWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: IntFieldUpdateOperationsInput | number
    passport?: StringFieldUpdateOperationsInput | string
    identity_card?: StringFieldUpdateOperationsInput | string
    dri_icenes?: StringFieldUpdateOperationsInput | string
    pay_image?: StringFieldUpdateOperationsInput | string
    booking_pay?: FloatFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
    employeesId?: StringFieldUpdateOperationsInput | string
    bankId?: StringFieldUpdateOperationsInput | string
    creatDat?: DateTimeFieldUpdateOperationsInput | Date | string
    updateDat?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: RentalUpdateOneRequiredWithoutReviewNestedInput
    emply?: EmployeesUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    emplyId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutCarInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    carPoint?: IntFieldUpdateOperationsInput | number
    emplyPoint?: IntFieldUpdateOperationsInput | number
    emplyId?: StringFieldUpdateOperationsInput | string
    rentalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}